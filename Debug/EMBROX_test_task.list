
EMBROX_test_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007340  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800763c  0800763c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007644  08007644  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800764c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b68  20000074  080076c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bdc  080076c0  00024bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb3f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003724  00000000  00000000  0003bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  000408f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003747  00000000  00000000  00041db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001877d  00000000  00000000  000454f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ec0  00000000  00000000  0005dc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100b34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006000  00000000  00000000  00100b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074c8 	.word	0x080074c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080074c8 	.word	0x080074c8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fce0 	bl	8000eac <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f848 	bl	8000580 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f9a8 	bl	8000844 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004f4:	f000 f906 	bl	8000704 <MX_TIM2_Init>
  MX_ADC1_Init();
 80004f8:	f000 f8b2 	bl	8000660 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004fc:	f000 f978 	bl	80007f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // create threads for tasks
  defaultTaskHandle 		= osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <main+0x6c>)
 8000502:	2100      	movs	r1, #0
 8000504:	4813      	ldr	r0, [pc, #76]	; (8000554 <main+0x70>)
 8000506:	f004 f9af 	bl	8004868 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a12      	ldr	r2, [pc, #72]	; (8000558 <main+0x74>)
 800050e:	6013      	str	r3, [r2, #0]
  motorControllerHandle 	= osThreadNew(StartTaskMotorController, NULL, &motorController_attributes);
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <main+0x78>)
 8000512:	2100      	movs	r1, #0
 8000514:	4812      	ldr	r0, [pc, #72]	; (8000560 <main+0x7c>)
 8000516:	f004 f9a7 	bl	8004868 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <main+0x80>)
 800051e:	6013      	str	r3, [r2, #0]
  UARTControllerHandle 		= osThreadNew(StartTaskUARTController, NULL, &UARTController_attributes);
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <main+0x84>)
 8000522:	2100      	movs	r1, #0
 8000524:	4811      	ldr	r0, [pc, #68]	; (800056c <main+0x88>)
 8000526:	f004 f99f 	bl	8004868 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <main+0x8c>)
 800052e:	6013      	str	r3, [r2, #0]
  buttonControlleHandle 		= osThreadNew(StartTaskButtonController, NULL, &buttonControlle_attributes);
 8000530:	4a10      	ldr	r2, [pc, #64]	; (8000574 <main+0x90>)
 8000532:	2100      	movs	r1, #0
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <main+0x94>)
 8000536:	f004 f997 	bl	8004868 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <main+0x98>)
 800053e:	6013      	str	r3, [r2, #0]
  
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000540:	f004 f948 	bl	80047d4 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000544:	f004 f96a 	bl	800481c <osKernelStart>
 8000548:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	08007534 	.word	0x08007534
 8000554:	08000925 	.word	0x08000925
 8000558:	20000164 	.word	0x20000164
 800055c:	08007558 	.word	0x08007558
 8000560:	08000939 	.word	0x08000939
 8000564:	20000168 	.word	0x20000168
 8000568:	0800757c 	.word	0x0800757c
 800056c:	080009ed 	.word	0x080009ed
 8000570:	2000016c 	.word	0x2000016c
 8000574:	080075a0 	.word	0x080075a0
 8000578:	08000a01 	.word	0x08000a01
 800057c:	20000170 	.word	0x20000170

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 fed0 	bl	8007334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <SystemClock_Config+0xd8>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <SystemClock_Config+0xd8>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <SystemClock_Config+0xd8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xdc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005cc:	4a23      	ldr	r2, [pc, #140]	; (800065c <SystemClock_Config+0xdc>)
 80005ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <SystemClock_Config+0xdc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f8:	2348      	movs	r3, #72	; 0x48
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fcd5 	bl	8001fb8 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000614:	f000 fa40 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff37 	bl	80024a8 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000640:	f000 fa2a 	bl	8000a98 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	2000      	movs	r0, #0
 800064a:	f002 f813 	bl	8002674 <HAL_RCC_MCOConfig>
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC1_Init+0xa0>)
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006c0:	f000 fc36 	bl	8000f30 <HAL_ADC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f9e5 	bl	8000a98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006e0:	f000 ff18 	bl	8001514 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ea:	f000 f9d5 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000090 	.word	0x20000090
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_TIM2_Init+0xe8>)
 8000736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_TIM2_Init+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_TIM2_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256;
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <MX_TIM2_Init+0xe8>)
 800074a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_TIM2_Init+0xe8>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <MX_TIM2_Init+0xe8>)
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075c:	4823      	ldr	r0, [pc, #140]	; (80007ec <MX_TIM2_Init+0xe8>)
 800075e:	f002 f91d 	bl	800299c <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000768:	f000 f996 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000776:	4619      	mov	r1, r3
 8000778:	481c      	ldr	r0, [pc, #112]	; (80007ec <MX_TIM2_Init+0xe8>)
 800077a:	f002 fc95 	bl	80030a8 <HAL_TIM_ConfigClockSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000784:	f000 f988 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000788:	4818      	ldr	r0, [pc, #96]	; (80007ec <MX_TIM2_Init+0xe8>)
 800078a:	f002 f9b9 	bl	8002b00 <HAL_TIM_PWM_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000794:	f000 f980 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4619      	mov	r1, r3
 80007a6:	4811      	ldr	r0, [pc, #68]	; (80007ec <MX_TIM2_Init+0xe8>)
 80007a8:	f003 f83a 	bl	8003820 <HAL_TIMEx_MasterConfigSynchronization>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007b2:	f000 f971 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b6:	2360      	movs	r3, #96	; 0x60
 80007b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <MX_TIM2_Init+0xe8>)
 80007ce:	f002 fba9 	bl	8002f24 <HAL_TIM_PWM_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007d8:	f000 f95e 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <MX_TIM2_Init+0xe8>)
 80007de:	f000 f9fb 	bl	8000bd8 <HAL_TIM_MspPostInit>

}
 80007e2:	bf00      	nop
 80007e4:	3738      	adds	r7, #56	; 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000d8 	.word	0x200000d8

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_USART2_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000828:	f003 f87c 	bl	8003924 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f931 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000120 	.word	0x20000120
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <MX_GPIO_Init+0xd4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a2d      	ldr	r2, [pc, #180]	; (8000918 <MX_GPIO_Init+0xd4>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <MX_GPIO_Init+0xd4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_GPIO_Init+0xd4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a26      	ldr	r2, [pc, #152]	; (8000918 <MX_GPIO_Init+0xd4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_GPIO_Init+0xd4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_GPIO_Init+0xd4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <MX_GPIO_Init+0xd4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_GPIO_Init+0xd4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2110      	movs	r1, #16
 80008b2:	481a      	ldr	r0, [pc, #104]	; (800091c <MX_GPIO_Init+0xd8>)
 80008b4:	f001 fb66 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008b8:	2310      	movs	r3, #16
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_GPIO_Init+0xd8>)
 80008d0:	f001 f9bc 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	480a      	ldr	r0, [pc, #40]	; (800091c <MX_GPIO_Init+0xd8>)
 80008f2:	f001 f9ab 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_GPIO_Init+0xdc>)
 800090a:	f001 f99f 	bl	8001c4c <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020400 	.word	0x40020400

08000924 <StartDefaultTask>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* USER CODE END 5 */
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <StartTaskMotorController>:

/* USER CODE BEGIN Header_StartTaskMotorController */
/* USER CODE END Header_StartTaskMotorController */
void StartTaskMotorController(void *argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorController */

	for(;;)
	{
		HAL_ADC_Start(&hadc1); // start the adc
 8000940:	4826      	ldr	r0, [pc, #152]	; (80009dc <StartTaskMotorController+0xa4>)
 8000942:	f000 fb39 	bl	8000fb8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8000946:	2164      	movs	r1, #100	; 0x64
 8000948:	4824      	ldr	r0, [pc, #144]	; (80009dc <StartTaskMotorController+0xa4>)
 800094a:	f000 fc1c 	bl	8001186 <HAL_ADC_PollForConversion>

		uint16_t adc_val = HAL_ADC_GetValue(&hadc1) / 16; // get the adc value
 800094e:	4823      	ldr	r0, [pc, #140]	; (80009dc <StartTaskMotorController+0xa4>)
 8000950:	f000 fdb4 	bl	80014bc <HAL_ADC_GetValue>
 8000954:	4603      	mov	r3, r0
 8000956:	091b      	lsrs	r3, r3, #4
 8000958:	81fb      	strh	r3, [r7, #14]

		HAL_ADC_Stop(&hadc1); // stop adc
 800095a:	4820      	ldr	r0, [pc, #128]	; (80009dc <StartTaskMotorController+0xa4>)
 800095c:	f000 fbe0 	bl	8001120 <HAL_ADC_Stop>
		if(buttonStatus == GPIO_PIN_SET){           // check is button pressed
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <StartTaskMotorController+0xa8>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d119      	bne.n	800099c <StartTaskMotorController+0x64>
		  if(adc_val >= motorSpeed) motorSpeed++;   // smooth change speed of motor
 8000968:	89fb      	ldrh	r3, [r7, #14]
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <StartTaskMotorController+0xac>)
 800096c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000970:	4293      	cmp	r3, r2
 8000972:	db09      	blt.n	8000988 <StartTaskMotorController+0x50>
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <StartTaskMotorController+0xac>)
 8000976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097a:	b29b      	uxth	r3, r3
 800097c:	3301      	adds	r3, #1
 800097e:	b29b      	uxth	r3, r3
 8000980:	b21a      	sxth	r2, r3
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <StartTaskMotorController+0xac>)
 8000984:	801a      	strh	r2, [r3, #0]
 8000986:	e01a      	b.n	80009be <StartTaskMotorController+0x86>
		  else motorSpeed--;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <StartTaskMotorController+0xac>)
 800098a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098e:	b29b      	uxth	r3, r3
 8000990:	3b01      	subs	r3, #1
 8000992:	b29b      	uxth	r3, r3
 8000994:	b21a      	sxth	r2, r3
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <StartTaskMotorController+0xac>)
 8000998:	801a      	strh	r2, [r3, #0]
 800099a:	e010      	b.n	80009be <StartTaskMotorController+0x86>
		}
		else{
		  motorSpeed--;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <StartTaskMotorController+0xac>)
 800099e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	3b01      	subs	r3, #1
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <StartTaskMotorController+0xac>)
 80009ac:	801a      	strh	r2, [r3, #0]
		  if(motorSpeed < 0) motorSpeed = 0;        // min value
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <StartTaskMotorController+0xac>)
 80009b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	da02      	bge.n	80009be <StartTaskMotorController+0x86>
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <StartTaskMotorController+0xac>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	801a      	strh	r2, [r3, #0]
		}
		TIM2->CCR1 = motorSpeed;                    // set pwm for motor speed
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <StartTaskMotorController+0xac>)
 80009c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c8:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // pwm start
 80009ca:	2100      	movs	r1, #0
 80009cc:	4806      	ldr	r0, [pc, #24]	; (80009e8 <StartTaskMotorController+0xb0>)
 80009ce:	f002 f8f1 	bl	8002bb4 <HAL_TIM_PWM_Start>
		osDelay(10);                                // some sleep)
 80009d2:	200a      	movs	r0, #10
 80009d4:	f003 ffda 	bl	800498c <osDelay>
	{
 80009d8:	e7b2      	b.n	8000940 <StartTaskMotorController+0x8>
 80009da:	bf00      	nop
 80009dc:	20000090 	.word	0x20000090
 80009e0:	20000174 	.word	0x20000174
 80009e4:	20000176 	.word	0x20000176
 80009e8:	200000d8 	.word	0x200000d8

080009ec <StartTaskUARTController>:
}

/* USER CODE BEGIN Header_StartTaskUARTController */
/* USER CODE END Header_StartTaskUARTController */
void StartTaskUARTController(void *argument)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUARTController */
  /* USER CODE END StartTaskUARTController */
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <StartTaskButtonController>:

/* USER CODE BEGIN Header_StartTaskButtonController */
/* USER CODE END Header_StartTaskButtonController */
void StartTaskButtonController(void *argument)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskButtonController */

	uint32_t time_button_pressed;
	for(;;)
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	4817      	ldr	r0, [pc, #92]	; (8000a68 <StartTaskButtonController+0x68>)
 8000a0c:	f001 faa2 	bl	8001f54 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d119      	bne.n	8000a4a <StartTaskButtonController+0x4a>
		{
			time_button_pressed = HAL_GetTick();
 8000a16:	f000 fa7f 	bl	8000f18 <HAL_GetTick>
 8000a1a:	60f8      	str	r0, [r7, #12]
			while(time_button_pressed + 50 < HAL_GetTick()) osDelay(1);
 8000a1c:	e002      	b.n	8000a24 <StartTaskButtonController+0x24>
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f003 ffb4 	bl	800498c <osDelay>
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000a2a:	f000 fa75 	bl	8000f18 <HAL_GetTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	429c      	cmp	r4, r3
 8000a32:	d3f4      	bcc.n	8000a1e <StartTaskButtonController+0x1e>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <StartTaskButtonController+0x68>)
 8000a38:	f001 fa8c 	bl	8001f54 <HAL_GPIO_ReadPin>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d106      	bne.n	8000a50 <StartTaskButtonController+0x50>
				buttonStatus = GPIO_PIN_SET;
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <StartTaskButtonController+0x6c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]
 8000a48:	e002      	b.n	8000a50 <StartTaskButtonController+0x50>
			}
		}
		else{
			buttonStatus = GPIO_PIN_RESET;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <StartTaskButtonController+0x6c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, buttonStatus);
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <StartTaskButtonController+0x6c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	2110      	movs	r1, #16
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <StartTaskButtonController+0x70>)
 8000a5a:	f001 fa93 	bl	8001f84 <HAL_GPIO_WritePin>

		osDelay(1);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f003 ff94 	bl	800498c <osDelay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 8000a64:	e7d0      	b.n	8000a08 <StartTaskButtonController+0x8>
 8000a66:	bf00      	nop
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	20000174 	.word	0x20000174
 8000a70:	40020000 	.word	0x40020000

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 fa33 	bl	8000ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40010000 	.word	0x40010000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a11      	ldr	r2, [pc, #68]	; (8000afc <HAL_MspInit+0x54>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_MspInit+0x54>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_MspInit+0x54>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_MspInit+0x54>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	f06f 0001 	mvn.w	r0, #1
 8000aee:	f000 fff1 	bl	8001ad4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <HAL_ADC_MspInit+0x8c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12f      	bne.n	8000b82 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_ADC_MspInit+0x90>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_ADC_MspInit+0x90>)
 8000b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_ADC_MspInit+0x90>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <HAL_ADC_MspInit+0x90>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <HAL_ADC_MspInit+0x90>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_ADC_MspInit+0x90>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_ADC_MspInit+0x94>)
 8000b6e:	f001 f86d 	bl	8001c4c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	2012      	movs	r0, #18
 8000b78:	f000 ffac 	bl	8001ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f000 ffc5 	bl	8001b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40012000 	.word	0x40012000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba8:	d10d      	bne.n	8000bc6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf8:	d11d      	bne.n	8000c36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c16:	2320      	movs	r3, #32
 8000c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <HAL_TIM_MspPostInit+0x6c>)
 8000c32:	f001 f80b 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0x94>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d133      	bne.n	8000cd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_UART_MspInit+0x9c>)
 8000cbe:	f000 ffc5 	bl	8001c4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2026      	movs	r0, #38	; 0x26
 8000cc8:	f000 ff04 	bl	8001ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ccc:	2026      	movs	r0, #38	; 0x26
 8000cce:	f000 ff1d 	bl	8001b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <HAL_InitTick+0xd0>)
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	4a2d      	ldr	r2, [pc, #180]	; (8000db8 <HAL_InitTick+0xd0>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6453      	str	r3, [r2, #68]	; 0x44
 8000d08:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <HAL_InitTick+0xd0>)
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d14:	f107 020c 	add.w	r2, r7, #12
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fe0a 	bl	8002938 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d24:	f001 fdf4 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8000d28:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <HAL_InitTick+0xd4>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	0c9b      	lsrs	r3, r3, #18
 8000d34:	3b01      	subs	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_InitTick+0xd8>)
 8000d3a:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <HAL_InitTick+0xdc>)
 8000d3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_InitTick+0xd8>)
 8000d40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d46:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <HAL_InitTick+0xd8>)
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_InitTick+0xd8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_InitTick+0xd8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_InitTick+0xd8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <HAL_InitTick+0xd8>)
 8000d60:	f001 fe1c 	bl	800299c <HAL_TIM_Base_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d11b      	bne.n	8000daa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d72:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <HAL_InitTick+0xd8>)
 8000d74:	f001 fe62 	bl	8002a3c <HAL_TIM_Base_Start_IT>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d111      	bne.n	8000daa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d86:	2019      	movs	r0, #25
 8000d88:	f000 fec0 	bl	8001b0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	d808      	bhi.n	8000da4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d92:	2200      	movs	r2, #0
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	2019      	movs	r0, #25
 8000d98:	f000 fe9c 	bl	8001ad4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_InitTick+0xe0>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e002      	b.n	8000daa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3730      	adds	r7, #48	; 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	431bde83 	.word	0x431bde83
 8000dc0:	20000178 	.word	0x20000178
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <ADC_IRQHandler+0x10>)
 8000dfe:	f000 fa4d 	bl	800129c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000090 	.word	0x20000090

08000e0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e12:	f001 ff7f 	bl	8002d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000178 	.word	0x20000178

08000e20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <USART2_IRQHandler+0x10>)
 8000e26:	f002 fdcb 	bl	80039c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000120 	.word	0x20000120

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ffd7 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f006 fa21 	bl	80072cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fb2b 	bl	80004e4 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e9c:	0800764c 	.word	0x0800764c
  ldr r2, =_sbss
 8000ea0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ea4:	20004bdc 	.word	0x20004bdc

08000ea8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <DMA1_Stream0_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 fdf2 	bl	8001abe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	200f      	movs	r0, #15
 8000edc:	f7ff ff04 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fde2 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	200001c0 	.word	0x200001c0

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200001c0 	.word	0x200001c0

08000f30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e033      	b.n	8000fae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d109      	bne.n	8000f62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fdd6 	bl	8000b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d118      	bne.n	8000fa0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	f043 0202 	orr.w	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 fbe8 	bl	8001758 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9e:	e001      	b.n	8000fa4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Start+0x1a>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e097      	b.n	8001102 <HAL_ADC_Start+0x14a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d018      	beq.n	800101a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff8:	4b45      	ldr	r3, [pc, #276]	; (8001110 <HAL_ADC_Start+0x158>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a45      	ldr	r2, [pc, #276]	; (8001114 <HAL_ADC_Start+0x15c>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9a      	lsrs	r2, r3, #18
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800100c:	e002      	b.n	8001014 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	3b01      	subs	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f9      	bne.n	800100e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b01      	cmp	r3, #1
 8001026:	d15f      	bne.n	80010e8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001052:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001066:	d106      	bne.n	8001076 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	f023 0206 	bic.w	r2, r3, #6
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
 8001074:	e002      	b.n	800107c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_ADC_Start+0x160>)
 8001086:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001090:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10f      	bne.n	80010be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d129      	bne.n	8001100 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	e020      	b.n	8001100 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a16      	ldr	r2, [pc, #88]	; (800111c <HAL_ADC_Start+0x164>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d11b      	bne.n	8001100 <HAL_ADC_Start+0x148>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d114      	bne.n	8001100 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	e00b      	b.n	8001100 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f043 0210 	orr.w	r2, r3, #16
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000
 8001114:	431bde83 	.word	0x431bde83
 8001118:	40012300 	.word	0x40012300
 800111c:	40012000 	.word	0x40012000

08001120 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Stop+0x16>
 8001132:	2302      	movs	r3, #2
 8001134:	e021      	b.n	800117a <HAL_ADC_Stop+0x5a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d109      	bne.n	8001170 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a2:	d113      	bne.n	80011cc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b2:	d10b      	bne.n	80011cc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f043 0220 	orr.w	r2, r3, #32
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e063      	b.n	8001294 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011cc:	f7ff fea4 	bl	8000f18 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011d2:	e021      	b.n	8001218 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011da:	d01d      	beq.n	8001218 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <HAL_ADC_PollForConversion+0x6c>
 80011e2:	f7ff fe99 	bl	8000f18 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d212      	bcs.n	8001218 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d00b      	beq.n	8001218 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f043 0204 	orr.w	r2, r3, #4
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e03d      	b.n	8001294 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b02      	cmp	r3, #2
 8001224:	d1d6      	bne.n	80011d4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f06f 0212 	mvn.w	r2, #18
 800122e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d123      	bne.n	8001292 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800124e:	2b00      	cmp	r3, #0
 8001250:	d11f      	bne.n	8001292 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800126a:	2b00      	cmp	r3, #0
 800126c:	d111      	bne.n	8001292 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d105      	bne.n	8001292 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d049      	beq.n	8001366 <HAL_ADC_IRQHandler+0xca>
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d046      	beq.n	8001366 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d105      	bne.n	80012f0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d12b      	bne.n	8001356 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001302:	2b00      	cmp	r3, #0
 8001304:	d127      	bne.n	8001356 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800131e:	2b00      	cmp	r3, #0
 8001320:	d119      	bne.n	8001356 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0220 	bic.w	r2, r2, #32
 8001330:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f8bd 	bl	80014d6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f06f 0212 	mvn.w	r2, #18
 8001364:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001374:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d057      	beq.n	800142c <HAL_ADC_IRQHandler+0x190>
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d054      	beq.n	800142c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d139      	bne.n	800141c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d12b      	bne.n	800141c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d124      	bne.n	800141c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d11d      	bne.n	800141c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d119      	bne.n	800141c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d105      	bne.n	800141c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f043 0201 	orr.w	r2, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fa97 	bl	8001950 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f06f 020c 	mvn.w	r2, #12
 800142a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d017      	beq.n	8001472 <HAL_ADC_IRQHandler+0x1d6>
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d014      	beq.n	8001472 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b01      	cmp	r3, #1
 8001454:	d10d      	bne.n	8001472 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f841 	bl	80014ea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f06f 0201 	mvn.w	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f003 0320 	and.w	r3, r3, #32
 8001478:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001480:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d015      	beq.n	80014b4 <HAL_ADC_IRQHandler+0x218>
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d012      	beq.n	80014b4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f043 0202 	orr.w	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f06f 0220 	mvn.w	r2, #32
 80014a2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f82a 	bl	80014fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f06f 0220 	mvn.w	r2, #32
 80014b2:	601a      	str	r2, [r3, #0]
  }
}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1c>
 800152c:	2302      	movs	r3, #2
 800152e:	e105      	b.n	800173c <HAL_ADC_ConfigChannel+0x228>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b09      	cmp	r3, #9
 800153e:	d925      	bls.n	800158c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68d9      	ldr	r1, [r3, #12]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	3b1e      	subs	r3, #30
 8001556:	2207      	movs	r2, #7
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43da      	mvns	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	400a      	ands	r2, r1
 8001564:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68d9      	ldr	r1, [r3, #12]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	4603      	mov	r3, r0
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4403      	add	r3, r0
 800157e:	3b1e      	subs	r3, #30
 8001580:	409a      	lsls	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	e022      	b.n	80015d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6919      	ldr	r1, [r3, #16]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	2207      	movs	r2, #7
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	400a      	ands	r2, r1
 80015ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6919      	ldr	r1, [r3, #16]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4403      	add	r3, r0
 80015c8:	409a      	lsls	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d824      	bhi.n	8001624 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	3b05      	subs	r3, #5
 80015ec:	221f      	movs	r2, #31
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	400a      	ands	r2, r1
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b05      	subs	r3, #5
 8001616:	fa00 f203 	lsl.w	r2, r0, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	635a      	str	r2, [r3, #52]	; 0x34
 8001622:	e04c      	b.n	80016be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b0c      	cmp	r3, #12
 800162a:	d824      	bhi.n	8001676 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b23      	subs	r3, #35	; 0x23
 800163e:	221f      	movs	r2, #31
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43da      	mvns	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	400a      	ands	r2, r1
 800164c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b29b      	uxth	r3, r3
 800165a:	4618      	mov	r0, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	3b23      	subs	r3, #35	; 0x23
 8001668:	fa00 f203 	lsl.w	r2, r0, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	631a      	str	r2, [r3, #48]	; 0x30
 8001674:	e023      	b.n	80016be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3b41      	subs	r3, #65	; 0x41
 8001688:	221f      	movs	r2, #31
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	400a      	ands	r2, r1
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b41      	subs	r3, #65	; 0x41
 80016b2:	fa00 f203 	lsl.w	r2, r0, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_ADC_ConfigChannel+0x234>)
 80016c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a21      	ldr	r2, [pc, #132]	; (800174c <HAL_ADC_ConfigChannel+0x238>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d109      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1cc>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b12      	cmp	r3, #18
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_ADC_ConfigChannel+0x238>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d123      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x21e>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d003      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x1e6>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b11      	cmp	r3, #17
 80016f8:	d11b      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b10      	cmp	r3, #16
 800170c:	d111      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_ADC_ConfigChannel+0x23c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <HAL_ADC_ConfigChannel+0x240>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	0c9a      	lsrs	r2, r3, #18
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001724:	e002      	b.n	800172c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	3b01      	subs	r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f9      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40012300 	.word	0x40012300
 800174c:	40012000 	.word	0x40012000
 8001750:	20000000 	.word	0x20000000
 8001754:	431bde83 	.word	0x431bde83

08001758 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001760:	4b79      	ldr	r3, [pc, #484]	; (8001948 <ADC_Init+0x1f0>)
 8001762:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	431a      	orrs	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800178c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	021a      	lsls	r2, r3, #8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6899      	ldr	r1, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	4a58      	ldr	r2, [pc, #352]	; (800194c <ADC_Init+0x1f4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d022      	beq.n	8001836 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6899      	ldr	r1, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	e00f      	b.n	8001856 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0202 	bic.w	r2, r2, #2
 8001864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7e1b      	ldrb	r3, [r3, #24]
 8001870:	005a      	lsls	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	3b01      	subs	r3, #1
 80018b0:	035a      	lsls	r2, r3, #13
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	e007      	b.n	80018cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	051a      	lsls	r2, r3, #20
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6899      	ldr	r1, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800190e:	025a      	lsls	r2, r3, #9
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	029a      	lsls	r2, r3, #10
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40012300 	.word	0x40012300
 800194c:	0f000001 	.word	0x0f000001

08001950 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff4c 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae6:	f7ff ff61 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001aea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	6978      	ldr	r0, [r7, #20]
 8001af2:	f7ff ffb1 	bl	8001a58 <NVIC_EncodePriority>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff80 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff54 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b36:	f7ff f9ef 	bl	8000f18 <HAL_GetTick>
 8001b3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d008      	beq.n	8001b5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e052      	b.n	8001c00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0216 	bic.w	r2, r2, #22
 8001b68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <HAL_DMA_Abort+0x62>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0208 	bic.w	r2, r2, #8
 8001b98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001baa:	e013      	b.n	8001bd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bac:	f7ff f9b4 	bl	8000f18 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d90c      	bls.n	8001bd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e015      	b.n	8001c00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1e4      	bne.n	8001bac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	223f      	movs	r2, #63	; 0x3f
 8001be8:	409a      	lsls	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d004      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00c      	b.n	8001c40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2205      	movs	r2, #5
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e159      	b.n	8001f1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 8148 	bne.w	8001f16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d005      	beq.n	8001c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d130      	bne.n	8001d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 0201 	and.w	r2, r3, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d017      	beq.n	8001d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d123      	bne.n	8001d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	08da      	lsrs	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3208      	adds	r2, #8
 8001d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	08da      	lsrs	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3208      	adds	r2, #8
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0203 	and.w	r2, r3, #3
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a2 	beq.w	8001f16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_GPIO_Init+0x2e8>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a56      	ldr	r2, [pc, #344]	; (8001f34 <HAL_GPIO_Init+0x2e8>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <HAL_GPIO_Init+0x2e8>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dee:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_GPIO_Init+0x2ec>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a49      	ldr	r2, [pc, #292]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d019      	beq.n	8001e4e <HAL_GPIO_Init+0x202>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a48      	ldr	r2, [pc, #288]	; (8001f40 <HAL_GPIO_Init+0x2f4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_GPIO_Init+0x1fe>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a47      	ldr	r2, [pc, #284]	; (8001f44 <HAL_GPIO_Init+0x2f8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00d      	beq.n	8001e46 <HAL_GPIO_Init+0x1fa>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a46      	ldr	r2, [pc, #280]	; (8001f48 <HAL_GPIO_Init+0x2fc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_GPIO_Init+0x1f6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a45      	ldr	r2, [pc, #276]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_GPIO_Init+0x1f2>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e008      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e3e:	2307      	movs	r3, #7
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e004      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	4093      	lsls	r3, r2
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e60:	4935      	ldr	r1, [pc, #212]	; (8001f38 <HAL_GPIO_Init+0x2ec>)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6e:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e92:	4a2f      	ldr	r2, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ebc:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee6:	4a1a      	ldr	r2, [pc, #104]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	f67f aea2 	bls.w	8001c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e267      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d075      	beq.n	80020c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d00c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d112      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	4b7e      	ldr	r3, [pc, #504]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d05b      	beq.n	80020c0 <HAL_RCC_OscConfig+0x108>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d157      	bne.n	80020c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e242      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0x74>
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x98>
 8002036:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6f      	ldr	r2, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6c      	ldr	r2, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 8002050:	4b69      	ldr	r3, [pc, #420]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a68      	ldr	r2, [pc, #416]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a65      	ldr	r2, [pc, #404]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe ff52 	bl	8000f18 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe ff4e 	bl	8000f18 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e207      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xc0>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe ff3e 	bl	8000f18 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7fe ff3a 	bl	8000f18 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1f3      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0xe8>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b44      	ldr	r3, [pc, #272]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1c7      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4937      	ldr	r1, [pc, #220]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_OscConfig+0x244>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7fe fef3 	bl	8000f18 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7fe feef 	bl	8000f18 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1a8      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4925      	ldr	r1, [pc, #148]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_OscConfig+0x244>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fed2 	bl	8000f18 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002178:	f7fe fece 	bl	8000f18 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e187      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d036      	beq.n	8002210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_RCC_OscConfig+0x248>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe feb2 	bl	8000f18 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe feae 	bl	8000f18 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e167      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x200>
 80021d6:	e01b      	b.n	8002210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_OscConfig+0x248>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7fe fe9b 	bl	8000f18 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	e00e      	b.n	8002204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e6:	f7fe fe97 	bl	8000f18 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d907      	bls.n	8002204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e150      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
 80021f8:	40023800 	.word	0x40023800
 80021fc:	42470000 	.word	0x42470000
 8002200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ea      	bne.n	80021e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8097 	beq.w	800234c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b7d      	ldr	r3, [pc, #500]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a7c      	ldr	r2, [pc, #496]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b7a      	ldr	r3, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b77      	ldr	r3, [pc, #476]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b74      	ldr	r3, [pc, #464]	; (800242c <HAL_RCC_OscConfig+0x474>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a73      	ldr	r2, [pc, #460]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7fe fe57 	bl	8000f18 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe fe53 	bl	8000f18 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e10c      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2ea>
 8002294:	4b64      	ldr	r3, [pc, #400]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a63      	ldr	r2, [pc, #396]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
 80022a0:	e01c      	b.n	80022dc <HAL_RCC_OscConfig+0x324>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x30c>
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a5b      	ldr	r2, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x324>
 80022c4:	4b58      	ldr	r3, [pc, #352]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a57      	ldr	r2, [pc, #348]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
 80022d0:	4b55      	ldr	r3, [pc, #340]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a54      	ldr	r2, [pc, #336]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe fe18 	bl	8000f18 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fe14 	bl	8000f18 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0cb      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0ee      	beq.n	80022ec <HAL_RCC_OscConfig+0x334>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe fe02 	bl	8000f18 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe fdfe 	bl	8000f18 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0b5      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ee      	bne.n	8002318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	4a38      	ldr	r2, [pc, #224]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a1 	beq.w	8002498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d05c      	beq.n	800241c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d141      	bne.n	80023ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fdd2 	bl	8000f18 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fdce 	bl	8000f18 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e087      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	3b01      	subs	r3, #1
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	491b      	ldr	r1, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fda7 	bl	8000f18 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fda3 	bl	8000f18 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e05c      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x416>
 80023ec:	e054      	b.n	8002498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fd90 	bl	8000f18 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fd8c 	bl	8000f18 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e045      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x444>
 800241a:	e03d      	b.n	8002498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e038      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
 8002428:	40023800 	.word	0x40023800
 800242c:	40007000 	.word	0x40007000
 8002430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d028      	beq.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d121      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d11a      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800246a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0cc      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d90c      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002514:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a52      	ldr	r2, [pc, #328]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800251e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	494d      	ldr	r1, [pc, #308]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d044      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d119      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d003      	beq.n	8002566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	2b03      	cmp	r3, #3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e067      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4934      	ldr	r1, [pc, #208]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7fe fcbe 	bl	8000f18 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7fe fcba 	bl	8000f18 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e04f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 020c 	and.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1eb      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d20c      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e032      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4916      	ldr	r1, [pc, #88]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	490e      	ldr	r1, [pc, #56]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800262e:	f000 f889 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	490a      	ldr	r1, [pc, #40]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb4a 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00
 8002664:	40023800 	.word	0x40023800
 8002668:	080075c4 	.word	0x080075c4
 800266c:	20000000 	.word	0x20000000
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	; 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d129      	bne.n	80026da <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a2a      	ldr	r2, [pc, #168]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80026a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	481f      	ldr	r0, [pc, #124]	; (800273c <HAL_RCC_MCOConfig+0xc8>)
 80026c0:	f7ff fac4 	bl	8001c4c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	4919      	ldr	r1, [pc, #100]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80026d8:	e029      	b.n	800272e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a15      	ldr	r2, [pc, #84]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80026f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	4619      	mov	r1, r3
 8002712:	480b      	ldr	r0, [pc, #44]	; (8002740 <HAL_RCC_MCOConfig+0xcc>)
 8002714:	f7ff fa9a 	bl	8001c4c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	00d9      	lsls	r1, r3, #3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	430b      	orrs	r3, r1
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <HAL_RCC_MCOConfig+0xc4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
}
 800272e:	bf00      	nop
 8002730:	3730      	adds	r7, #48	; 0x30
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40020000 	.word	0x40020000
 8002740:	40020800 	.word	0x40020800

08002744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002748:	b090      	sub	sp, #64	; 0x40
 800274a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
 8002750:	2300      	movs	r3, #0
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002754:	2300      	movs	r3, #0
 8002756:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800275c:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b08      	cmp	r3, #8
 8002766:	d00d      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x40>
 8002768:	2b08      	cmp	r3, #8
 800276a:	f200 80a1 	bhi.w	80028b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x34>
 8002772:	2b04      	cmp	r3, #4
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x3a>
 8002776:	e09b      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800277a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800277c:	e09b      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277e:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002782:	e098      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800278e:	4b4d      	ldr	r3, [pc, #308]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d028      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	2200      	movs	r2, #0
 80027a2:	623b      	str	r3, [r7, #32]
 80027a4:	627a      	str	r2, [r7, #36]	; 0x24
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027ac:	2100      	movs	r1, #0
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_GetSysClockFreq+0x188>)
 80027b0:	fb03 f201 	mul.w	r2, r3, r1
 80027b4:	2300      	movs	r3, #0
 80027b6:	fb00 f303 	mul.w	r3, r0, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	4a43      	ldr	r2, [pc, #268]	; (80028cc <HAL_RCC_GetSysClockFreq+0x188>)
 80027be:	fba0 1202 	umull	r1, r2, r0, r2
 80027c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c4:	460a      	mov	r2, r1
 80027c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80027c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ca:	4413      	add	r3, r2
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d0:	2200      	movs	r2, #0
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	61fa      	str	r2, [r7, #28]
 80027d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027de:	f7fd fcff 	bl	80001e0 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4613      	mov	r3, r2
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ea:	e053      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ec:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	2200      	movs	r2, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	617a      	str	r2, [r7, #20]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027fe:	f04f 0b00 	mov.w	fp, #0
 8002802:	4652      	mov	r2, sl
 8002804:	465b      	mov	r3, fp
 8002806:	f04f 0000 	mov.w	r0, #0
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	0159      	lsls	r1, r3, #5
 8002810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002814:	0150      	lsls	r0, r2, #5
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	ebb2 080a 	subs.w	r8, r2, sl
 800281e:	eb63 090b 	sbc.w	r9, r3, fp
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800282e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002832:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002836:	ebb2 0408 	subs.w	r4, r2, r8
 800283a:	eb63 0509 	sbc.w	r5, r3, r9
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	00eb      	lsls	r3, r5, #3
 8002848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284c:	00e2      	lsls	r2, r4, #3
 800284e:	4614      	mov	r4, r2
 8002850:	461d      	mov	r5, r3
 8002852:	eb14 030a 	adds.w	r3, r4, sl
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	eb45 030b 	adc.w	r3, r5, fp
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286a:	4629      	mov	r1, r5
 800286c:	028b      	lsls	r3, r1, #10
 800286e:	4621      	mov	r1, r4
 8002870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002874:	4621      	mov	r1, r4
 8002876:	028a      	lsls	r2, r1, #10
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	2200      	movs	r2, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	60fa      	str	r2, [r7, #12]
 8002884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002888:	f7fd fcaa 	bl	80001e0 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3740      	adds	r7, #64	; 0x40
 80028bc:	46bd      	mov	sp, r7
 80028be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	017d7840 	.word	0x017d7840

080028d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000000 	.word	0x20000000

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ec:	f7ff fff0 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4903      	ldr	r1, [pc, #12]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	080075d4 	.word	0x080075d4

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002914:	f7ff ffdc 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0b5b      	lsrs	r3, r3, #13
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	080075d4 	.word	0x080075d4

08002938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	220f      	movs	r2, #15
 8002946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_RCC_GetClockConfig+0x60>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0207 	and.w	r2, r3, #7
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	601a      	str	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	40023c00 	.word	0x40023c00

0800299c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e041      	b.n	8002a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe f8e8 	bl	8000b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f000 fc54 	bl	8003288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d001      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e044      	b.n	8002ade <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1e      	ldr	r2, [pc, #120]	; (8002aec <HAL_TIM_Base_Start_IT+0xb0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7e:	d013      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1a      	ldr	r2, [pc, #104]	; (8002af0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <HAL_TIM_Base_Start_IT+0xc0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d111      	bne.n	8002acc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d010      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aca:	e007      	b.n	8002adc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40014000 	.word	0x40014000

08002b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e041      	b.n	8002b96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f839 	bl	8002b9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 fba2 	bl	8003288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_TIM_PWM_Start+0x24>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e022      	b.n	8002c1e <HAL_TIM_PWM_Start+0x6a>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d109      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x3e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	e015      	b.n	8002c1e <HAL_TIM_PWM_Start+0x6a>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d109      	bne.n	8002c0c <HAL_TIM_PWM_Start+0x58>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e008      	b.n	8002c1e <HAL_TIM_PWM_Start+0x6a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	bf14      	ite	ne
 8002c18:	2301      	movne	r3, #1
 8002c1a:	2300      	moveq	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e068      	b.n	8002cf8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <HAL_TIM_PWM_Start+0x82>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c34:	e013      	b.n	8002c5e <HAL_TIM_PWM_Start+0xaa>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d104      	bne.n	8002c46 <HAL_TIM_PWM_Start+0x92>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c44:	e00b      	b.n	8002c5e <HAL_TIM_PWM_Start+0xaa>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_PWM_Start+0xa2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c54:	e003      	b.n	8002c5e <HAL_TIM_PWM_Start+0xaa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2201      	movs	r2, #1
 8002c64:	6839      	ldr	r1, [r7, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fdb4 	bl	80037d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_TIM_PWM_Start+0x14c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d107      	bne.n	8002c86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_TIM_PWM_Start+0x14c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d018      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x10e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d013      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x10e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <HAL_TIM_PWM_Start+0x150>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x10e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <HAL_TIM_PWM_Start+0x154>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d009      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x10e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a16      	ldr	r2, [pc, #88]	; (8002d0c <HAL_TIM_PWM_Start+0x158>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d004      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x10e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <HAL_TIM_PWM_Start+0x15c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d111      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b06      	cmp	r3, #6
 8002cd2:	d010      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce4:	e007      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40014000 	.word	0x40014000

08002d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d122      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d11b      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0202 	mvn.w	r2, #2
 8002d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa77 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa69 	bl	8003236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa7a 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d122      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0204 	mvn.w	r2, #4
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa4d 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa3f 	bl	8003236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fa50 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d122      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d11b      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0208 	mvn.w	r2, #8
 8002de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2204      	movs	r2, #4
 8002dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa23 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8002e04:	e005      	b.n	8002e12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa15 	bl	8003236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fa26 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d122      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d11b      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0210 	mvn.w	r2, #16
 8002e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2208      	movs	r2, #8
 8002e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9f9 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8002e58:	e005      	b.n	8002e66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f9eb 	bl	8003236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f9fc 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d10e      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d107      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0201 	mvn.w	r2, #1
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fdee 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d107      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fd26 	bl	8003910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b40      	cmp	r3, #64	; 0x40
 8002ede:	d107      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9c1 	bl	8003272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0220 	mvn.w	r2, #32
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fcf0 	bl	80038fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e0ae      	b.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	f200 809f 	bhi.w	8003090 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f52:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	08002f8d 	.word	0x08002f8d
 8002f5c:	08003091 	.word	0x08003091
 8002f60:	08003091 	.word	0x08003091
 8002f64:	08003091 	.word	0x08003091
 8002f68:	08002fcd 	.word	0x08002fcd
 8002f6c:	08003091 	.word	0x08003091
 8002f70:	08003091 	.word	0x08003091
 8002f74:	08003091 	.word	0x08003091
 8002f78:	0800300f 	.word	0x0800300f
 8002f7c:	08003091 	.word	0x08003091
 8002f80:	08003091 	.word	0x08003091
 8002f84:	08003091 	.word	0x08003091
 8002f88:	0800304f 	.word	0x0800304f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f9f8 	bl	8003388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0208 	orr.w	r2, r2, #8
 8002fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0204 	bic.w	r2, r2, #4
 8002fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6999      	ldr	r1, [r3, #24]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	619a      	str	r2, [r3, #24]
      break;
 8002fca:	e064      	b.n	8003096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fa3e 	bl	8003454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6999      	ldr	r1, [r3, #24]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	021a      	lsls	r2, r3, #8
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	619a      	str	r2, [r3, #24]
      break;
 800300c:	e043      	b.n	8003096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fa89 	bl	800352c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0208 	orr.w	r2, r2, #8
 8003028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0204 	bic.w	r2, r2, #4
 8003038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69d9      	ldr	r1, [r3, #28]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	61da      	str	r2, [r3, #28]
      break;
 800304c:	e023      	b.n	8003096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fad3 	bl	8003600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69d9      	ldr	r1, [r3, #28]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	021a      	lsls	r2, r3, #8
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	61da      	str	r2, [r3, #28]
      break;
 800308e:	e002      	b.n	8003096 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
      break;
 8003094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800309e:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_TIM_ConfigClockSource+0x1c>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e0b4      	b.n	800322e <HAL_TIM_ConfigClockSource+0x186>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fc:	d03e      	beq.n	800317c <HAL_TIM_ConfigClockSource+0xd4>
 80030fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003102:	f200 8087 	bhi.w	8003214 <HAL_TIM_ConfigClockSource+0x16c>
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	f000 8086 	beq.w	800321a <HAL_TIM_ConfigClockSource+0x172>
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003112:	d87f      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b70      	cmp	r3, #112	; 0x70
 8003116:	d01a      	beq.n	800314e <HAL_TIM_ConfigClockSource+0xa6>
 8003118:	2b70      	cmp	r3, #112	; 0x70
 800311a:	d87b      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b60      	cmp	r3, #96	; 0x60
 800311e:	d050      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003120:	2b60      	cmp	r3, #96	; 0x60
 8003122:	d877      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b50      	cmp	r3, #80	; 0x50
 8003126:	d03c      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003128:	2b50      	cmp	r3, #80	; 0x50
 800312a:	d873      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d058      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d86f      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b30      	cmp	r3, #48	; 0x30
 8003136:	d064      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x15a>
 8003138:	2b30      	cmp	r3, #48	; 0x30
 800313a:	d86b      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d060      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x15a>
 8003140:	2b20      	cmp	r3, #32
 8003142:	d867      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d05c      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x15a>
 8003148:	2b10      	cmp	r3, #16
 800314a:	d05a      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	e062      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6899      	ldr	r1, [r3, #8]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f000 fb19 	bl	8003794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	609a      	str	r2, [r3, #8]
      break;
 800317a:	e04f      	b.n	800321c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6899      	ldr	r1, [r3, #8]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f000 fb02 	bl	8003794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800319e:	609a      	str	r2, [r3, #8]
      break;
 80031a0:	e03c      	b.n	800321c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f000 fa76 	bl	80036a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2150      	movs	r1, #80	; 0x50
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 facf 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 80031c0:	e02c      	b.n	800321c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f000 fa95 	bl	80036fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2160      	movs	r1, #96	; 0x60
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fabf 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 80031e0:	e01c      	b.n	800321c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f000 fa56 	bl	80036a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2140      	movs	r1, #64	; 0x40
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 faaf 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 8003200:	e00c      	b.n	800321c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f000 faa6 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 8003212:	e003      	b.n	800321c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
      break;
 8003218:	e000      	b.n	800321c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800321a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <TIM_Base_SetConfig+0xe4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00f      	beq.n	80032c0 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d00b      	beq.n	80032c0 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a31      	ldr	r2, [pc, #196]	; (8003370 <TIM_Base_SetConfig+0xe8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <TIM_Base_SetConfig+0x38>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a30      	ldr	r2, [pc, #192]	; (8003374 <TIM_Base_SetConfig+0xec>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_Base_SetConfig+0x38>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a2f      	ldr	r2, [pc, #188]	; (8003378 <TIM_Base_SetConfig+0xf0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d108      	bne.n	80032d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <TIM_Base_SetConfig+0xe4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01b      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e0:	d017      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <TIM_Base_SetConfig+0xe8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a21      	ldr	r2, [pc, #132]	; (8003374 <TIM_Base_SetConfig+0xec>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00f      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a20      	ldr	r2, [pc, #128]	; (8003378 <TIM_Base_SetConfig+0xf0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1f      	ldr	r2, [pc, #124]	; (800337c <TIM_Base_SetConfig+0xf4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <TIM_Base_SetConfig+0xf8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <TIM_Base_SetConfig+0xfc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <TIM_Base_SetConfig+0xe4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d103      	bne.n	8003358 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	615a      	str	r2, [r3, #20]
}
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800
 8003378:	40000c00 	.word	0x40000c00
 800337c:	40014000 	.word	0x40014000
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800

08003388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0201 	bic.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 0302 	bic.w	r3, r3, #2
 80033d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <TIM_OC1_SetConfig+0xc8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10c      	bne.n	80033fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0308 	bic.w	r3, r3, #8
 80033ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a13      	ldr	r2, [pc, #76]	; (8003450 <TIM_OC1_SetConfig+0xc8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d111      	bne.n	800342a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800340c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	621a      	str	r2, [r3, #32]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40010000 	.word	0x40010000

08003454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0210 	bic.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0320 	bic.w	r3, r3, #32
 800349e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <TIM_OC2_SetConfig+0xd4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10d      	bne.n	80034d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a15      	ldr	r2, [pc, #84]	; (8003528 <TIM_OC2_SetConfig+0xd4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d113      	bne.n	8003500 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	621a      	str	r2, [r3, #32]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40010000 	.word	0x40010000

0800352c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <TIM_OC3_SetConfig+0xd0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10d      	bne.n	80035a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <TIM_OC3_SetConfig+0xd0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d113      	bne.n	80035d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40010000 	.word	0x40010000

08003600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800364a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	031b      	lsls	r3, r3, #12
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a10      	ldr	r2, [pc, #64]	; (800369c <TIM_OC4_SetConfig+0x9c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d109      	bne.n	8003674 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000

080036a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 030a 	bic.w	r3, r3, #10
 80036dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f023 0210 	bic.w	r2, r3, #16
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	031b      	lsls	r3, r3, #12
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800373a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	f043 0307 	orr.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	021a      	lsls	r2, r3, #8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	2201      	movs	r2, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1a      	ldr	r2, [r3, #32]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003834:	2302      	movs	r3, #2
 8003836:	e050      	b.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003884:	d013      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a18      	ldr	r2, [pc, #96]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10c      	bne.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40014000 	.word	0x40014000

080038fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e03f      	b.n	80039b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd f97c 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fc7b 	bl	8004264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800397c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800398c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800399c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b0ba      	sub	sp, #232	; 0xe8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_UART_IRQHandler+0x66>
 8003a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fb65 	bl	80040ee <UART_Receive_IT>
      return;
 8003a24:	e256      	b.n	8003ed4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80de 	beq.w	8003bec <HAL_UART_IRQHandler+0x22c>
 8003a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80d1 	beq.w	8003bec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_UART_IRQHandler+0xae>
 8003a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_UART_IRQHandler+0xd2>
 8003a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0202 	orr.w	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_UART_IRQHandler+0xf6>
 8003a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0204 	orr.w	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d011      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x126>
 8003ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d105      	bne.n	8003ada <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f043 0208 	orr.w	r2, r3, #8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 81ed 	beq.w	8003eca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_UART_IRQHandler+0x14e>
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 faf0 	bl	80040ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <HAL_UART_IRQHandler+0x17a>
 8003b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d04f      	beq.n	8003bda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9f8 	bl	8003f30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d141      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3314      	adds	r3, #20
 8003b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3314      	adds	r3, #20
 8003b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1d9      	bne.n	8003b4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d013      	beq.n	8003bca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	4a7d      	ldr	r2, [pc, #500]	; (8003d9c <HAL_UART_IRQHandler+0x3dc>)
 8003ba8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe f82a 	bl	8001c08 <HAL_DMA_Abort_IT>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d016      	beq.n	8003be8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e00e      	b.n	8003be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f99a 	bl	8003f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	e00a      	b.n	8003be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f996 	bl	8003f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	e006      	b.n	8003be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f992 	bl	8003f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003be6:	e170      	b.n	8003eca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	bf00      	nop
    return;
 8003bea:	e16e      	b.n	8003eca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	f040 814a 	bne.w	8003e8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8143 	beq.w	8003e8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 813c 	beq.w	8003e8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	f040 80b4 	bne.w	8003da0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8140 	beq.w	8003ece <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c56:	429a      	cmp	r2, r3
 8003c58:	f080 8139 	bcs.w	8003ece <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6e:	f000 8088 	beq.w	8003d82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1d9      	bne.n	8003c72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3314      	adds	r3, #20
 8003cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ce2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e1      	bne.n	8003cbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3314      	adds	r3, #20
 8003d00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3314      	adds	r3, #20
 8003d1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e3      	bne.n	8003cfa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d52:	f023 0310 	bic.w	r3, r3, #16
 8003d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d64:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e3      	bne.n	8003d40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fd fed3 	bl	8001b28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8c0 	bl	8003f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d98:	e099      	b.n	8003ece <HAL_UART_IRQHandler+0x50e>
 8003d9a:	bf00      	nop
 8003d9c:	08003ff7 	.word	0x08003ff7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 808b 	beq.w	8003ed2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8086 	beq.w	8003ed2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dea:	647a      	str	r2, [r7, #68]	; 0x44
 8003dec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e3      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e22:	633a      	str	r2, [r7, #48]	; 0x30
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e3      	bne.n	8003dfe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0310 	bic.w	r3, r3, #16
 8003e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e68:	61fa      	str	r2, [r7, #28]
 8003e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	69b9      	ldr	r1, [r7, #24]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	617b      	str	r3, [r7, #20]
   return(result);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e3      	bne.n	8003e44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f848 	bl	8003f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e88:	e023      	b.n	8003ed2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_UART_IRQHandler+0x4ea>
 8003e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8bb 	bl	800401e <UART_Transmit_IT>
    return;
 8003ea8:	e014      	b.n	8003ed4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x514>
 8003eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8fb 	bl	80040be <UART_EndTransmit_IT>
    return;
 8003ec8:	e004      	b.n	8003ed4 <HAL_UART_IRQHandler+0x514>
    return;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_UART_IRQHandler+0x514>
      return;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_UART_IRQHandler+0x514>
      return;
 8003ed2:	bf00      	nop
  }
}
 8003ed4:	37e8      	adds	r7, #232	; 0xe8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop

08003edc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b095      	sub	sp, #84	; 0x54
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f58:	643a      	str	r2, [r7, #64]	; 0x40
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d119      	bne.n	8003fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fc8:	61ba      	str	r2, [r7, #24]
 8003fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e5      	bne.n	8003fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fea:	bf00      	nop
 8003fec:	3754      	adds	r7, #84	; 0x54
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff ff77 	bl	8003f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b21      	cmp	r3, #33	; 0x21
 8004030:	d13e      	bne.n	80040b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403a:	d114      	bne.n	8004066 <UART_Transmit_IT+0x48>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d110      	bne.n	8004066 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004058:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	1c9a      	adds	r2, r3, #2
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	621a      	str	r2, [r3, #32]
 8004064:	e008      	b.n	8004078 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6211      	str	r1, [r2, #32]
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29b      	uxth	r3, r3
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4619      	mov	r1, r3
 8004086:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800409a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fefc 	bl	8003edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b08c      	sub	sp, #48	; 0x30
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b22      	cmp	r3, #34	; 0x22
 8004100:	f040 80ab 	bne.w	800425a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410c:	d117      	bne.n	800413e <UART_Receive_IT+0x50>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d113      	bne.n	800413e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412c:	b29a      	uxth	r2, r3
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	1c9a      	adds	r2, r3, #2
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
 800413c:	e026      	b.n	800418c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d007      	beq.n	8004162 <UART_Receive_IT+0x74>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <UART_Receive_IT+0x82>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e008      	b.n	8004182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800417c:	b2da      	uxtb	r2, r3
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29b      	uxth	r3, r3
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4619      	mov	r1, r3
 800419a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800419c:	2b00      	cmp	r3, #0
 800419e:	d15a      	bne.n	8004256 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0220 	bic.w	r2, r2, #32
 80041ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d135      	bne.n	800424c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	613b      	str	r3, [r7, #16]
   return(result);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f023 0310 	bic.w	r3, r3, #16
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004206:	623a      	str	r2, [r7, #32]
 8004208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	69f9      	ldr	r1, [r7, #28]
 800420c:	6a3a      	ldr	r2, [r7, #32]
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	61bb      	str	r3, [r7, #24]
   return(result);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b10      	cmp	r3, #16
 8004226:	d10a      	bne.n	800423e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fe67 	bl	8003f18 <HAL_UARTEx_RxEventCallback>
 800424a:	e002      	b.n	8004252 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff fe4f 	bl	8003ef0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e002      	b.n	800425c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e000      	b.n	800425c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
  }
}
 800425c:	4618      	mov	r0, r3
 800425e:	3730      	adds	r7, #48	; 0x30
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b0c0      	sub	sp, #256	; 0x100
 800426a:	af00      	add	r7, sp, #0
 800426c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	ea40 0301 	orr.w	r3, r0, r1
 800428c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	431a      	orrs	r2, r3
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042bc:	f021 010c 	bic.w	r1, r1, #12
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042ca:	430b      	orrs	r3, r1
 80042cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	6999      	ldr	r1, [r3, #24]
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	ea40 0301 	orr.w	r3, r0, r1
 80042ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b8f      	ldr	r3, [pc, #572]	; (8004530 <UART_SetConfig+0x2cc>)
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d005      	beq.n	8004304 <UART_SetConfig+0xa0>
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b8d      	ldr	r3, [pc, #564]	; (8004534 <UART_SetConfig+0x2d0>)
 8004300:	429a      	cmp	r2, r3
 8004302:	d104      	bne.n	800430e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004304:	f7fe fb04 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8004308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800430c:	e003      	b.n	8004316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430e:	f7fe faeb 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8004312:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	f040 810c 	bne.w	800453c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800432e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004336:	4622      	mov	r2, r4
 8004338:	462b      	mov	r3, r5
 800433a:	1891      	adds	r1, r2, r2
 800433c:	65b9      	str	r1, [r7, #88]	; 0x58
 800433e:	415b      	adcs	r3, r3
 8004340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004346:	4621      	mov	r1, r4
 8004348:	eb12 0801 	adds.w	r8, r2, r1
 800434c:	4629      	mov	r1, r5
 800434e:	eb43 0901 	adc.w	r9, r3, r1
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004366:	4690      	mov	r8, r2
 8004368:	4699      	mov	r9, r3
 800436a:	4623      	mov	r3, r4
 800436c:	eb18 0303 	adds.w	r3, r8, r3
 8004370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004374:	462b      	mov	r3, r5
 8004376:	eb49 0303 	adc.w	r3, r9, r3
 800437a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800438a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800438e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004392:	460b      	mov	r3, r1
 8004394:	18db      	adds	r3, r3, r3
 8004396:	653b      	str	r3, [r7, #80]	; 0x50
 8004398:	4613      	mov	r3, r2
 800439a:	eb42 0303 	adc.w	r3, r2, r3
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
 80043a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043a8:	f7fb ff1a 	bl	80001e0 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4b61      	ldr	r3, [pc, #388]	; (8004538 <UART_SetConfig+0x2d4>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011c      	lsls	r4, r3, #4
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043d4:	415b      	adcs	r3, r3
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043dc:	4641      	mov	r1, r8
 80043de:	eb12 0a01 	adds.w	sl, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb43 0b01 	adc.w	fp, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043fc:	4692      	mov	sl, r2
 80043fe:	469b      	mov	fp, r3
 8004400:	4643      	mov	r3, r8
 8004402:	eb1a 0303 	adds.w	r3, sl, r3
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800440a:	464b      	mov	r3, r9
 800440c:	eb4b 0303 	adc.w	r3, fp, r3
 8004410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004420:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004428:	460b      	mov	r3, r1
 800442a:	18db      	adds	r3, r3, r3
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
 800442e:	4613      	mov	r3, r2
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	647b      	str	r3, [r7, #68]	; 0x44
 8004436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800443a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800443e:	f7fb fecf 	bl	80001e0 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4611      	mov	r1, r2
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2301 	umull	r2, r3, r3, r1
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2264      	movs	r2, #100	; 0x64
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <UART_SetConfig+0x2d4>)
 8004460:	fba3 2302 	umull	r2, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800446c:	441c      	add	r4, r3
 800446e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004478:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800447c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004480:	4642      	mov	r2, r8
 8004482:	464b      	mov	r3, r9
 8004484:	1891      	adds	r1, r2, r2
 8004486:	63b9      	str	r1, [r7, #56]	; 0x38
 8004488:	415b      	adcs	r3, r3
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800448c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004490:	4641      	mov	r1, r8
 8004492:	1851      	adds	r1, r2, r1
 8004494:	6339      	str	r1, [r7, #48]	; 0x30
 8004496:	4649      	mov	r1, r9
 8004498:	414b      	adcs	r3, r1
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044a8:	4659      	mov	r1, fp
 80044aa:	00cb      	lsls	r3, r1, #3
 80044ac:	4651      	mov	r1, sl
 80044ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b2:	4651      	mov	r1, sl
 80044b4:	00ca      	lsls	r2, r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	4642      	mov	r2, r8
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044c4:	464b      	mov	r3, r9
 80044c6:	460a      	mov	r2, r1
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044e4:	460b      	mov	r3, r1
 80044e6:	18db      	adds	r3, r3, r3
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ea:	4613      	mov	r3, r2
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044fa:	f7fb fe71 	bl	80001e0 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <UART_SetConfig+0x2d4>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	; 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	3332      	adds	r3, #50	; 0x32
 8004516:	4a08      	ldr	r2, [pc, #32]	; (8004538 <UART_SetConfig+0x2d4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 0207 	and.w	r2, r3, #7
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4422      	add	r2, r4
 800452a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800452c:	e105      	b.n	800473a <UART_SetConfig+0x4d6>
 800452e:	bf00      	nop
 8004530:	40011000 	.word	0x40011000
 8004534:	40011400 	.word	0x40011400
 8004538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800453c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004540:	2200      	movs	r2, #0
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800454a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800454e:	4642      	mov	r2, r8
 8004550:	464b      	mov	r3, r9
 8004552:	1891      	adds	r1, r2, r2
 8004554:	6239      	str	r1, [r7, #32]
 8004556:	415b      	adcs	r3, r3
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455e:	4641      	mov	r1, r8
 8004560:	1854      	adds	r4, r2, r1
 8004562:	4649      	mov	r1, r9
 8004564:	eb43 0501 	adc.w	r5, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	00eb      	lsls	r3, r5, #3
 8004572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004576:	00e2      	lsls	r2, r4, #3
 8004578:	4614      	mov	r4, r2
 800457a:	461d      	mov	r5, r3
 800457c:	4643      	mov	r3, r8
 800457e:	18e3      	adds	r3, r4, r3
 8004580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004584:	464b      	mov	r3, r9
 8004586:	eb45 0303 	adc.w	r3, r5, r3
 800458a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800459a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045aa:	4629      	mov	r1, r5
 80045ac:	008b      	lsls	r3, r1, #2
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b4:	4621      	mov	r1, r4
 80045b6:	008a      	lsls	r2, r1, #2
 80045b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045bc:	f7fb fe10 	bl	80001e0 <__aeabi_uldivmod>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4b60      	ldr	r3, [pc, #384]	; (8004748 <UART_SetConfig+0x4e4>)
 80045c6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	011c      	lsls	r4, r3, #4
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	61b9      	str	r1, [r7, #24]
 80045e8:	415b      	adcs	r3, r3
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6139      	str	r1, [r7, #16]
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	67bb      	str	r3, [r7, #120]	; 0x78
 800463a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004648:	4649      	mov	r1, r9
 800464a:	008b      	lsls	r3, r1, #2
 800464c:	4641      	mov	r1, r8
 800464e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004652:	4641      	mov	r1, r8
 8004654:	008a      	lsls	r2, r1, #2
 8004656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800465a:	f7fb fdc1 	bl	80001e0 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b39      	ldr	r3, [pc, #228]	; (8004748 <UART_SetConfig+0x4e4>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a34      	ldr	r2, [pc, #208]	; (8004748 <UART_SetConfig+0x4e4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	441c      	add	r4, r3
 8004684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004688:	2200      	movs	r2, #0
 800468a:	673b      	str	r3, [r7, #112]	; 0x70
 800468c:	677a      	str	r2, [r7, #116]	; 0x74
 800468e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004692:	4642      	mov	r2, r8
 8004694:	464b      	mov	r3, r9
 8004696:	1891      	adds	r1, r2, r2
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	415b      	adcs	r3, r3
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a2:	4641      	mov	r1, r8
 80046a4:	1851      	adds	r1, r2, r1
 80046a6:	6039      	str	r1, [r7, #0]
 80046a8:	4649      	mov	r1, r9
 80046aa:	414b      	adcs	r3, r1
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ba:	4659      	mov	r1, fp
 80046bc:	00cb      	lsls	r3, r1, #3
 80046be:	4651      	mov	r1, sl
 80046c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c4:	4651      	mov	r1, sl
 80046c6:	00ca      	lsls	r2, r1, #3
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	4603      	mov	r3, r0
 80046ce:	4642      	mov	r2, r8
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d4:	464b      	mov	r3, r9
 80046d6:	460a      	mov	r2, r1
 80046d8:	eb42 0303 	adc.w	r3, r2, r3
 80046dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	663b      	str	r3, [r7, #96]	; 0x60
 80046e8:	667a      	str	r2, [r7, #100]	; 0x64
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046f6:	4649      	mov	r1, r9
 80046f8:	008b      	lsls	r3, r1, #2
 80046fa:	4641      	mov	r1, r8
 80046fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004700:	4641      	mov	r1, r8
 8004702:	008a      	lsls	r2, r1, #2
 8004704:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004708:	f7fb fd6a 	bl	80001e0 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <UART_SetConfig+0x4e4>)
 8004712:	fba3 1302 	umull	r1, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2164      	movs	r1, #100	; 0x64
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	3332      	adds	r3, #50	; 0x32
 8004724:	4a08      	ldr	r2, [pc, #32]	; (8004748 <UART_SetConfig+0x4e4>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4422      	add	r2, r4
 8004738:	609a      	str	r2, [r3, #8]
}
 800473a:	bf00      	nop
 800473c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004740:	46bd      	mov	sp, r7
 8004742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004746:	bf00      	nop
 8004748:	51eb851f 	.word	0x51eb851f

0800474c <__NVIC_SetPriority>:
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475c:	2b00      	cmp	r3, #0
 800475e:	db0a      	blt.n	8004776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	490c      	ldr	r1, [pc, #48]	; (8004798 <__NVIC_SetPriority+0x4c>)
 8004766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476a:	0112      	lsls	r2, r2, #4
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	440b      	add	r3, r1
 8004770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004774:	e00a      	b.n	800478c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4908      	ldr	r1, [pc, #32]	; (800479c <__NVIC_SetPriority+0x50>)
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	3b04      	subs	r3, #4
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	440b      	add	r3, r1
 800478a:	761a      	strb	r2, [r3, #24]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000e100 	.word	0xe000e100
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <SysTick_Handler+0x1c>)
 80047a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80047a8:	f001 fd28 	bl	80061fc <xTaskGetSchedulerState>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d001      	beq.n	80047b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80047b2:	f002 fb11 	bl	8006dd8 <xPortSysTickHandler>
  }
}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	e000e010 	.word	0xe000e010

080047c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80047c4:	2100      	movs	r1, #0
 80047c6:	f06f 0004 	mvn.w	r0, #4
 80047ca:	f7ff ffbf 	bl	800474c <__NVIC_SetPriority>
#endif
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047da:	f3ef 8305 	mrs	r3, IPSR
 80047de:	603b      	str	r3, [r7, #0]
  return(result);
 80047e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80047e6:	f06f 0305 	mvn.w	r3, #5
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	e00c      	b.n	8004808 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <osKernelInitialize+0x44>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d105      	bne.n	8004802 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80047f6:	4b08      	ldr	r3, [pc, #32]	; (8004818 <osKernelInitialize+0x44>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	e002      	b.n	8004808 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004808:	687b      	ldr	r3, [r7, #4]
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	200001c4 	.word	0x200001c4

0800481c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004822:	f3ef 8305 	mrs	r3, IPSR
 8004826:	603b      	str	r3, [r7, #0]
  return(result);
 8004828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <osKernelStart+0x1a>
    stat = osErrorISR;
 800482e:	f06f 0305 	mvn.w	r3, #5
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	e010      	b.n	8004858 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <osKernelStart+0x48>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d109      	bne.n	8004852 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800483e:	f7ff ffbf 	bl	80047c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <osKernelStart+0x48>)
 8004844:	2202      	movs	r2, #2
 8004846:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004848:	f001 f87c 	bl	8005944 <vTaskStartScheduler>
      stat = osOK;
 800484c:	2300      	movs	r3, #0
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	e002      	b.n	8004858 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004858:	687b      	ldr	r3, [r7, #4]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	200001c4 	.word	0x200001c4

08004868 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af04      	add	r7, sp, #16
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004878:	f3ef 8305 	mrs	r3, IPSR
 800487c:	617b      	str	r3, [r7, #20]
  return(result);
 800487e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004880:	2b00      	cmp	r3, #0
 8004882:	d17e      	bne.n	8004982 <osThreadNew+0x11a>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d07b      	beq.n	8004982 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800488e:	2318      	movs	r3, #24
 8004890:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800489a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d045      	beq.n	800492e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <osThreadNew+0x48>
        name = attr->name;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <osThreadNew+0x6e>
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b38      	cmp	r3, #56	; 0x38
 80048c8:	d805      	bhi.n	80048d6 <osThreadNew+0x6e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <osThreadNew+0x72>
        return (NULL);
 80048d6:	2300      	movs	r3, #0
 80048d8:	e054      	b.n	8004984 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00e      	beq.n	8004910 <osThreadNew+0xa8>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2bbb      	cmp	r3, #187	; 0xbb
 80048f8:	d90a      	bls.n	8004910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <osThreadNew+0xa8>
        mem = 1;
 800490a:	2301      	movs	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	e010      	b.n	8004932 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10c      	bne.n	8004932 <osThreadNew+0xca>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d108      	bne.n	8004932 <osThreadNew+0xca>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <osThreadNew+0xca>
          mem = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	e001      	b.n	8004932 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d110      	bne.n	800495a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004940:	9202      	str	r2, [sp, #8]
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6a3a      	ldr	r2, [r7, #32]
 800494c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fe0c 	bl	800556c <xTaskCreateStatic>
 8004954:	4603      	mov	r3, r0
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	e013      	b.n	8004982 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d110      	bne.n	8004982 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	b29a      	uxth	r2, r3
 8004964:	f107 0310 	add.w	r3, r7, #16
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fe57 	bl	8005626 <xTaskCreate>
 8004978:	4603      	mov	r3, r0
 800497a:	2b01      	cmp	r3, #1
 800497c:	d001      	beq.n	8004982 <osThreadNew+0x11a>
            hTask = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004982:	693b      	ldr	r3, [r7, #16]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3728      	adds	r7, #40	; 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004994:	f3ef 8305 	mrs	r3, IPSR
 8004998:	60bb      	str	r3, [r7, #8]
  return(result);
 800499a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <osDelay+0x1c>
    stat = osErrorISR;
 80049a0:	f06f 0305 	mvn.w	r3, #5
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e007      	b.n	80049b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 ff92 	bl	80058dc <vTaskDelay>
    }
  }

  return (stat);
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80049d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4a06      	ldr	r2, [pc, #24]	; (80049f4 <vApplicationGetIdleTaskMemory+0x30>)
 80049da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	601a      	str	r2, [r3, #0]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	200001c8 	.word	0x200001c8
 80049f4:	20000284 	.word	0x20000284

080049f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4a06      	ldr	r2, [pc, #24]	; (8004a28 <vApplicationGetTimerTaskMemory+0x30>)
 8004a0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a16:	601a      	str	r2, [r3, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	20000484 	.word	0x20000484
 8004a28:	20000540 	.word	0x20000540

08004a2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f103 0208 	add.w	r2, r3, #8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f103 0208 	add.w	r2, r3, #8
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f103 0208 	add.w	r2, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	601a      	str	r2, [r3, #0]
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae4:	d103      	bne.n	8004aee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e00c      	b.n	8004b08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3308      	adds	r3, #8
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e002      	b.n	8004afc <vListInsert+0x2e>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d2f6      	bcs.n	8004af6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6892      	ldr	r2, [r2, #8]
 8004b56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6852      	ldr	r2, [r2, #4]
 8004b60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d103      	bne.n	8004b74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1e5a      	subs	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bbe:	f002 f879 	bl	8006cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	441a      	add	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	22ff      	movs	r2, #255	; 0xff
 8004c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	22ff      	movs	r2, #255	; 0xff
 8004c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d114      	bne.n	8004c3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01a      	beq.n	8004c52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3310      	adds	r3, #16
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f929 	bl	8005e78 <xTaskRemoveFromEventList>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <xQueueGenericReset+0xcc>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	e009      	b.n	8004c52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3310      	adds	r3, #16
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fef2 	bl	8004a2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3324      	adds	r3, #36	; 0x24
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff feed 	bl	8004a2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c52:	f002 f85f 	bl	8006d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c56:	2301      	movs	r3, #1
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	; 0x38
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c8a:	bf00      	nop
 8004c8c:	e7fe      	b.n	8004c8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <xQueueGenericCreateStatic+0x52>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <xQueueGenericCreateStatic+0x56>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <xQueueGenericCreateStatic+0x58>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	623b      	str	r3, [r7, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <xQueueGenericCreateStatic+0x7e>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <xQueueGenericCreateStatic+0x82>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <xQueueGenericCreateStatic+0x84>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	61fb      	str	r3, [r7, #28]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d02:	2350      	movs	r3, #80	; 0x50
 8004d04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b50      	cmp	r3, #80	; 0x50
 8004d0a:	d00a      	beq.n	8004d22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	61bb      	str	r3, [r7, #24]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f805 	bl	8004d54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3730      	adds	r7, #48	; 0x30
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e002      	b.n	8004d76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d82:	2101      	movs	r1, #1
 8004d84:	69b8      	ldr	r0, [r7, #24]
 8004d86:	f7ff ff05 	bl	8004b94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08e      	sub	sp, #56	; 0x38
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004daa:	2300      	movs	r3, #0
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <xQueueGenericSend+0x32>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d103      	bne.n	8004ddc <xQueueGenericSend+0x40>
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <xQueueGenericSend+0x44>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <xQueueGenericSend+0x46>
 8004de0:	2300      	movs	r3, #0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <xQueueGenericSend+0x60>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004df8:	bf00      	nop
 8004dfa:	e7fe      	b.n	8004dfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d103      	bne.n	8004e0a <xQueueGenericSend+0x6e>
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <xQueueGenericSend+0x72>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <xQueueGenericSend+0x74>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xQueueGenericSend+0x8e>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	623b      	str	r3, [r7, #32]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e2a:	f001 f9e7 	bl	80061fc <xTaskGetSchedulerState>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <xQueueGenericSend+0x9e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <xQueueGenericSend+0xa2>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <xQueueGenericSend+0xa4>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <xQueueGenericSend+0xbe>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	61fb      	str	r3, [r7, #28]
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e5a:	f001 ff2b 	bl	8006cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d302      	bcc.n	8004e70 <xQueueGenericSend+0xd4>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d129      	bne.n	8004ec4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e76:	f000 fa0b 	bl	8005290 <prvCopyDataToQueue>
 8004e7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	3324      	adds	r3, #36	; 0x24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fff5 	bl	8005e78 <xTaskRemoveFromEventList>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d013      	beq.n	8004ebc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e94:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <xQueueGenericSend+0x1f8>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	e00a      	b.n	8004ebc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004eac:	4b39      	ldr	r3, [pc, #228]	; (8004f94 <xQueueGenericSend+0x1f8>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ebc:	f001 ff2a 	bl	8006d14 <vPortExitCritical>
				return pdPASS;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e063      	b.n	8004f8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eca:	f001 ff23 	bl	8006d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e05c      	b.n	8004f8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed8:	f107 0314 	add.w	r3, r7, #20
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 f82f 	bl	8005f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ee6:	f001 ff15 	bl	8006d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004eea:	f000 fd9b 	bl	8005a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eee:	f001 fee1 	bl	8006cb4 <vPortEnterCritical>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004efe:	d103      	bne.n	8004f08 <xQueueGenericSend+0x16c>
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f14:	d103      	bne.n	8004f1e <xQueueGenericSend+0x182>
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f1e:	f001 fef9 	bl	8006d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f22:	1d3a      	adds	r2, r7, #4
 8004f24:	f107 0314 	add.w	r3, r7, #20
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 f81e 	bl	8005f6c <xTaskCheckForTimeOut>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d124      	bne.n	8004f80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f38:	f000 faa2 	bl	8005480 <prvIsQueueFull>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	3310      	adds	r3, #16
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 ff44 	bl	8005dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f52:	f000 fa2d 	bl	80053b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f56:	f000 fd73 	bl	8005a40 <xTaskResumeAll>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f47f af7c 	bne.w	8004e5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f62:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <xQueueGenericSend+0x1f8>)
 8004f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	e772      	b.n	8004e5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f76:	f000 fa1b 	bl	80053b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f7a:	f000 fd61 	bl	8005a40 <xTaskResumeAll>
 8004f7e:	e76c      	b.n	8004e5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f82:	f000 fa15 	bl	80053b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f86:	f000 fd5b 	bl	8005a40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3738      	adds	r7, #56	; 0x38
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	e000ed04 	.word	0xe000ed04

08004f98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b090      	sub	sp, #64	; 0x40
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fc2:	bf00      	nop
 8004fc4:	e7fe      	b.n	8004fc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d103      	bne.n	8004fd4 <xQueueGenericSendFromISR+0x3c>
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <xQueueGenericSendFromISR+0x40>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <xQueueGenericSendFromISR+0x42>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d103      	bne.n	8005002 <xQueueGenericSendFromISR+0x6a>
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <xQueueGenericSendFromISR+0x6e>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <xQueueGenericSendFromISR+0x70>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	623b      	str	r3, [r7, #32]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005022:	f001 ff29 	bl	8006e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005026:	f3ef 8211 	mrs	r2, BASEPRI
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	61fa      	str	r2, [r7, #28]
 800503c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800503e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504a:	429a      	cmp	r2, r3
 800504c:	d302      	bcc.n	8005054 <xQueueGenericSendFromISR+0xbc>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d12f      	bne.n	80050b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800505a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800506a:	f000 f911 	bl	8005290 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800506e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005076:	d112      	bne.n	800509e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d016      	beq.n	80050ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	3324      	adds	r3, #36	; 0x24
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fef7 	bl	8005e78 <xTaskRemoveFromEventList>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00e      	beq.n	80050ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	e007      	b.n	80050ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800509e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050a2:	3301      	adds	r3, #1
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	b25a      	sxtb	r2, r3
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050ae:	2301      	movs	r3, #1
 80050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80050b2:	e001      	b.n	80050b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3740      	adds	r7, #64	; 0x40
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08c      	sub	sp, #48	; 0x30
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050dc:	2300      	movs	r3, #0
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10a      	bne.n	8005100 <xQueueReceive+0x30>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	623b      	str	r3, [r7, #32]
}
 80050fc:	bf00      	nop
 80050fe:	e7fe      	b.n	80050fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <xQueueReceive+0x3e>
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <xQueueReceive+0x42>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <xQueueReceive+0x44>
 8005112:	2300      	movs	r3, #0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <xQueueReceive+0x5e>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	61fb      	str	r3, [r7, #28]
}
 800512a:	bf00      	nop
 800512c:	e7fe      	b.n	800512c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800512e:	f001 f865 	bl	80061fc <xTaskGetSchedulerState>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <xQueueReceive+0x6e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <xQueueReceive+0x72>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <xQueueReceive+0x74>
 8005142:	2300      	movs	r3, #0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xQueueReceive+0x8e>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	61bb      	str	r3, [r7, #24]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800515e:	f001 fda9 	bl	8006cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01f      	beq.n	80051ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005172:	f000 f8f7 	bl	8005364 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	1e5a      	subs	r2, r3, #1
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00f      	beq.n	80051a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	3310      	adds	r3, #16
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fe74 	bl	8005e78 <xTaskRemoveFromEventList>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005196:	4b3d      	ldr	r3, [pc, #244]	; (800528c <xQueueReceive+0x1bc>)
 8005198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051a6:	f001 fdb5 	bl	8006d14 <vPortExitCritical>
				return pdPASS;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e069      	b.n	8005282 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d103      	bne.n	80051bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051b4:	f001 fdae 	bl	8006d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e062      	b.n	8005282 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051c2:	f107 0310 	add.w	r3, r7, #16
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 feba 	bl	8005f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051d0:	f001 fda0 	bl	8006d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051d4:	f000 fc26 	bl	8005a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051d8:	f001 fd6c 	bl	8006cb4 <vPortEnterCritical>
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051e2:	b25b      	sxtb	r3, r3
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e8:	d103      	bne.n	80051f2 <xQueueReceive+0x122>
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f8:	b25b      	sxtb	r3, r3
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051fe:	d103      	bne.n	8005208 <xQueueReceive+0x138>
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005208:	f001 fd84 	bl	8006d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800520c:	1d3a      	adds	r2, r7, #4
 800520e:	f107 0310 	add.w	r3, r7, #16
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fea9 	bl	8005f6c <xTaskCheckForTimeOut>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d123      	bne.n	8005268 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005222:	f000 f917 	bl	8005454 <prvIsQueueEmpty>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d017      	beq.n	800525c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	3324      	adds	r3, #36	; 0x24
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4611      	mov	r1, r2
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fdcf 	bl	8005dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800523a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523c:	f000 f8b8 	bl	80053b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005240:	f000 fbfe 	bl	8005a40 <xTaskResumeAll>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d189      	bne.n	800515e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800524a:	4b10      	ldr	r3, [pc, #64]	; (800528c <xQueueReceive+0x1bc>)
 800524c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	e780      	b.n	800515e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800525c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800525e:	f000 f8a7 	bl	80053b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005262:	f000 fbed 	bl	8005a40 <xTaskResumeAll>
 8005266:	e77a      	b.n	800515e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526a:	f000 f8a1 	bl	80053b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800526e:	f000 fbe7 	bl	8005a40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005274:	f000 f8ee 	bl	8005454 <prvIsQueueEmpty>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	f43f af6f 	beq.w	800515e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005280:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005282:	4618      	mov	r0, r3
 8005284:	3730      	adds	r7, #48	; 0x30
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	e000ed04 	.word	0xe000ed04

08005290 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10d      	bne.n	80052ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d14d      	bne.n	8005352 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 ffbc 	bl	8006238 <xTaskPriorityDisinherit>
 80052c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	e043      	b.n	8005352 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d119      	bne.n	8005304 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6858      	ldr	r0, [r3, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	461a      	mov	r2, r3
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	f002 f81c 	bl	8007318 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	441a      	add	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d32b      	bcc.n	8005352 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	e026      	b.n	8005352 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68d8      	ldr	r0, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	461a      	mov	r2, r3
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	f002 f802 	bl	8007318 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	425b      	negs	r3, r3
 800531e:	441a      	add	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d207      	bcs.n	8005340 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	425b      	negs	r3, r3
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d105      	bne.n	8005352 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	3b01      	subs	r3, #1
 8005350:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800535a:	697b      	ldr	r3, [r7, #20]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	441a      	add	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d303      	bcc.n	8005398 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68d9      	ldr	r1, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	461a      	mov	r2, r3
 80053a2:	6838      	ldr	r0, [r7, #0]
 80053a4:	f001 ffb8 	bl	8007318 <memcpy>
	}
}
 80053a8:	bf00      	nop
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053b8:	f001 fc7c 	bl	8006cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053c4:	e011      	b.n	80053ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d012      	beq.n	80053f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3324      	adds	r3, #36	; 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fd50 	bl	8005e78 <xTaskRemoveFromEventList>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053de:	f000 fe27 	bl	8006030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	dce9      	bgt.n	80053c6 <prvUnlockQueue+0x16>
 80053f2:	e000      	b.n	80053f6 <prvUnlockQueue+0x46>
					break;
 80053f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	22ff      	movs	r2, #255	; 0xff
 80053fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053fe:	f001 fc89 	bl	8006d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005402:	f001 fc57 	bl	8006cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800540c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800540e:	e011      	b.n	8005434 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d012      	beq.n	800543e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3310      	adds	r3, #16
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fd2b 	bl	8005e78 <xTaskRemoveFromEventList>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005428:	f000 fe02 	bl	8006030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	3b01      	subs	r3, #1
 8005430:	b2db      	uxtb	r3, r3
 8005432:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005438:	2b00      	cmp	r3, #0
 800543a:	dce9      	bgt.n	8005410 <prvUnlockQueue+0x60>
 800543c:	e000      	b.n	8005440 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800543e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	22ff      	movs	r2, #255	; 0xff
 8005444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005448:	f001 fc64 	bl	8006d14 <vPortExitCritical>
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800545c:	f001 fc2a 	bl	8006cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e001      	b.n	8005472 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005472:	f001 fc4f 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005488:	f001 fc14 	bl	8006cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	429a      	cmp	r2, r3
 8005496:	d102      	bne.n	800549e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e001      	b.n	80054a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054a2:	f001 fc37 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e014      	b.n	80054ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054c0:	4a0f      	ldr	r2, [pc, #60]	; (8005500 <vQueueAddToRegistry+0x50>)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054cc:	490c      	ldr	r1, [pc, #48]	; (8005500 <vQueueAddToRegistry+0x50>)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054d6:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <vQueueAddToRegistry+0x50>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4413      	add	r3, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054e2:	e006      	b.n	80054f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b07      	cmp	r3, #7
 80054ee:	d9e7      	bls.n	80054c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000940 	.word	0x20000940

08005504 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005514:	f001 fbce 	bl	8006cb4 <vPortEnterCritical>
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800551e:	b25b      	sxtb	r3, r3
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005524:	d103      	bne.n	800552e <vQueueWaitForMessageRestricted+0x2a>
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005534:	b25b      	sxtb	r3, r3
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800553a:	d103      	bne.n	8005544 <vQueueWaitForMessageRestricted+0x40>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005544:	f001 fbe6 	bl	8006d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fc61 	bl	8005e20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f7ff ff26 	bl	80053b0 <prvUnlockQueue>
	}
 8005564:	bf00      	nop
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08e      	sub	sp, #56	; 0x38
 8005570:	af04      	add	r7, sp, #16
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	623b      	str	r3, [r7, #32]
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	61fb      	str	r3, [r7, #28]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055b2:	23bc      	movs	r3, #188	; 0xbc
 80055b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2bbc      	cmp	r3, #188	; 0xbc
 80055ba:	d00a      	beq.n	80055d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	61bb      	str	r3, [r7, #24]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01e      	beq.n	8005618 <xTaskCreateStatic+0xac>
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01b      	beq.n	8005618 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055f2:	2300      	movs	r3, #0
 80055f4:	9303      	str	r3, [sp, #12]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	9302      	str	r3, [sp, #8]
 80055fa:	f107 0314 	add.w	r3, r7, #20
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f850 	bl	80056b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005612:	f000 f8f3 	bl	80057fc <prvAddNewTaskToReadyList>
 8005616:	e001      	b.n	800561c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800561c:	697b      	ldr	r3, [r7, #20]
	}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	; 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005626:	b580      	push	{r7, lr}
 8005628:	b08c      	sub	sp, #48	; 0x30
 800562a:	af04      	add	r7, sp, #16
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fc5c 	bl	8006ef8 <pvPortMalloc>
 8005640:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00e      	beq.n	8005666 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005648:	20bc      	movs	r0, #188	; 0xbc
 800564a:	f001 fc55 	bl	8006ef8 <pvPortMalloc>
 800564e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
 800565c:	e005      	b.n	800566a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800565e:	6978      	ldr	r0, [r7, #20]
 8005660:	f001 fd16 	bl	8007090 <vPortFree>
 8005664:	e001      	b.n	800566a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d017      	beq.n	80056a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	2300      	movs	r3, #0
 800567c:	9303      	str	r3, [sp, #12]
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	9302      	str	r3, [sp, #8]
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f80e 	bl	80056b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005694:	69f8      	ldr	r0, [r7, #28]
 8005696:	f000 f8b1 	bl	80057fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800569a:	2301      	movs	r3, #1
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e002      	b.n	80056a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056a6:	69bb      	ldr	r3, [r7, #24]
	}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	461a      	mov	r2, r3
 80056c8:	21a5      	movs	r1, #165	; 0xa5
 80056ca:	f001 fe33 	bl	8007334 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056d8:	3b01      	subs	r3, #1
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	f023 0307 	bic.w	r3, r3, #7
 80056e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <prvInitialiseNewTask+0x58>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	617b      	str	r3, [r7, #20]
}
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01f      	beq.n	800574e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	e012      	b.n	800573a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	7819      	ldrb	r1, [r3, #0]
 800571c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	3334      	adds	r3, #52	; 0x34
 8005724:	460a      	mov	r2, r1
 8005726:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	4413      	add	r3, r2
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d006      	beq.n	8005742 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	3301      	adds	r3, #1
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	2b0f      	cmp	r3, #15
 800573e:	d9e9      	bls.n	8005714 <prvInitialiseNewTask+0x64>
 8005740:	e000      	b.n	8005744 <prvInitialiseNewTask+0x94>
			{
				break;
 8005742:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800574c:	e003      	b.n	8005756 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	2b37      	cmp	r3, #55	; 0x37
 800575a:	d901      	bls.n	8005760 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800575c:	2337      	movs	r3, #55	; 0x37
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005764:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	2200      	movs	r2, #0
 8005770:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	3304      	adds	r3, #4
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff f978 	bl	8004a6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	3318      	adds	r3, #24
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff f973 	bl	8004a6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800579a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	3354      	adds	r3, #84	; 0x54
 80057b0:	2260      	movs	r2, #96	; 0x60
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 fdbd 	bl	8007334 <memset>
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <prvInitialiseNewTask+0x140>)
 80057be:	659a      	str	r2, [r3, #88]	; 0x58
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <prvInitialiseNewTask+0x144>)
 80057c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	4a0b      	ldr	r2, [pc, #44]	; (80057f8 <prvInitialiseNewTask+0x148>)
 80057ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	69b8      	ldr	r0, [r7, #24]
 80057d2:	f001 f941 	bl	8006a58 <pxPortInitialiseStack>
 80057d6:	4602      	mov	r2, r0
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e8:	bf00      	nop
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	080075fc 	.word	0x080075fc
 80057f4:	0800761c 	.word	0x0800761c
 80057f8:	080075dc 	.word	0x080075dc

080057fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005804:	f001 fa56 	bl	8006cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005808:	4b2d      	ldr	r3, [pc, #180]	; (80058c0 <prvAddNewTaskToReadyList+0xc4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	4a2c      	ldr	r2, [pc, #176]	; (80058c0 <prvAddNewTaskToReadyList+0xc4>)
 8005810:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005812:	4b2c      	ldr	r3, [pc, #176]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800581a:	4a2a      	ldr	r2, [pc, #168]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005820:	4b27      	ldr	r3, [pc, #156]	; (80058c0 <prvAddNewTaskToReadyList+0xc4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d110      	bne.n	800584a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005828:	f000 fc26 	bl	8006078 <prvInitialiseTaskLists>
 800582c:	e00d      	b.n	800584a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800582e:	4b26      	ldr	r3, [pc, #152]	; (80058c8 <prvAddNewTaskToReadyList+0xcc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005836:	4b23      	ldr	r3, [pc, #140]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d802      	bhi.n	800584a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005844:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800584a:	4b20      	ldr	r3, [pc, #128]	; (80058cc <prvAddNewTaskToReadyList+0xd0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <prvAddNewTaskToReadyList+0xd0>)
 8005852:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005854:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <prvAddNewTaskToReadyList+0xd0>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <prvAddNewTaskToReadyList+0xd4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d903      	bls.n	8005870 <prvAddNewTaskToReadyList+0x74>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <prvAddNewTaskToReadyList+0xd4>)
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <prvAddNewTaskToReadyList+0xd8>)
 800587e:	441a      	add	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f7ff f8fd 	bl	8004a86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800588c:	f001 fa42 	bl	8006d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <prvAddNewTaskToReadyList+0xcc>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00e      	beq.n	80058b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d207      	bcs.n	80058b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <prvAddNewTaskToReadyList+0xdc>)
 80058a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000e54 	.word	0x20000e54
 80058c4:	20000980 	.word	0x20000980
 80058c8:	20000e60 	.word	0x20000e60
 80058cc:	20000e70 	.word	0x20000e70
 80058d0:	20000e5c 	.word	0x20000e5c
 80058d4:	20000984 	.word	0x20000984
 80058d8:	e000ed04 	.word	0xe000ed04

080058dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d017      	beq.n	800591e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <vTaskDelay+0x60>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <vTaskDelay+0x30>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	60bb      	str	r3, [r7, #8]
}
 8005908:	bf00      	nop
 800590a:	e7fe      	b.n	800590a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800590c:	f000 f88a 	bl	8005a24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005910:	2100      	movs	r1, #0
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fcfe 	bl	8006314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005918:	f000 f892 	bl	8005a40 <xTaskResumeAll>
 800591c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d107      	bne.n	8005934 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <vTaskDelay+0x64>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000e7c 	.word	0x20000e7c
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800594a:	2300      	movs	r3, #0
 800594c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005952:	463a      	mov	r2, r7
 8005954:	1d39      	adds	r1, r7, #4
 8005956:	f107 0308 	add.w	r3, r7, #8
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff f832 	bl	80049c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	9202      	str	r2, [sp, #8]
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	2300      	movs	r3, #0
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	2300      	movs	r3, #0
 8005970:	460a      	mov	r2, r1
 8005972:	4924      	ldr	r1, [pc, #144]	; (8005a04 <vTaskStartScheduler+0xc0>)
 8005974:	4824      	ldr	r0, [pc, #144]	; (8005a08 <vTaskStartScheduler+0xc4>)
 8005976:	f7ff fdf9 	bl	800556c <xTaskCreateStatic>
 800597a:	4603      	mov	r3, r0
 800597c:	4a23      	ldr	r2, [pc, #140]	; (8005a0c <vTaskStartScheduler+0xc8>)
 800597e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005980:	4b22      	ldr	r3, [pc, #136]	; (8005a0c <vTaskStartScheduler+0xc8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e001      	b.n	8005992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d102      	bne.n	800599e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005998:	f000 fd10 	bl	80063bc <xTimerCreateTimerTask>
 800599c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d11b      	bne.n	80059dc <vTaskStartScheduler+0x98>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	613b      	str	r3, [r7, #16]
}
 80059b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059b8:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <vTaskStartScheduler+0xcc>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3354      	adds	r3, #84	; 0x54
 80059be:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <vTaskStartScheduler+0xd0>)
 80059c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <vTaskStartScheduler+0xd4>)
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059ca:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <vTaskStartScheduler+0xd8>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <vTaskStartScheduler+0xdc>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059d6:	f001 f8cb 	bl	8006b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059da:	e00e      	b.n	80059fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e2:	d10a      	bne.n	80059fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	60fb      	str	r3, [r7, #12]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <vTaskStartScheduler+0xb4>
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	0800751c 	.word	0x0800751c
 8005a08:	08006049 	.word	0x08006049
 8005a0c:	20000e78 	.word	0x20000e78
 8005a10:	20000980 	.word	0x20000980
 8005a14:	20000010 	.word	0x20000010
 8005a18:	20000e74 	.word	0x20000e74
 8005a1c:	20000e60 	.word	0x20000e60
 8005a20:	20000e58 	.word	0x20000e58

08005a24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a28:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <vTaskSuspendAll+0x18>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	4a03      	ldr	r2, [pc, #12]	; (8005a3c <vTaskSuspendAll+0x18>)
 8005a30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a32:	bf00      	nop
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	20000e7c 	.word	0x20000e7c

08005a40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a4e:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <xTaskResumeAll+0x118>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10a      	bne.n	8005a6c <xTaskResumeAll+0x2c>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	603b      	str	r3, [r7, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	e7fe      	b.n	8005a6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a6c:	f001 f922 	bl	8006cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a70:	4b39      	ldr	r3, [pc, #228]	; (8005b58 <xTaskResumeAll+0x118>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	4a38      	ldr	r2, [pc, #224]	; (8005b58 <xTaskResumeAll+0x118>)
 8005a78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a7a:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <xTaskResumeAll+0x118>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d162      	bne.n	8005b48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <xTaskResumeAll+0x11c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d05e      	beq.n	8005b48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a8a:	e02f      	b.n	8005aec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8c:	4b34      	ldr	r3, [pc, #208]	; (8005b60 <xTaskResumeAll+0x120>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3318      	adds	r3, #24
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff f851 	bl	8004b40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff f84c 	bl	8004b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aac:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <xTaskResumeAll+0x124>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d903      	bls.n	8005abc <xTaskResumeAll+0x7c>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <xTaskResumeAll+0x124>)
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4a27      	ldr	r2, [pc, #156]	; (8005b68 <xTaskResumeAll+0x128>)
 8005aca:	441a      	add	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f7fe ffd7 	bl	8004a86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	4b23      	ldr	r3, [pc, #140]	; (8005b6c <xTaskResumeAll+0x12c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ae6:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <xTaskResumeAll+0x130>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aec:	4b1c      	ldr	r3, [pc, #112]	; (8005b60 <xTaskResumeAll+0x120>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1cb      	bne.n	8005a8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005afa:	f000 fb5f 	bl	80061bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005afe:	4b1d      	ldr	r3, [pc, #116]	; (8005b74 <xTaskResumeAll+0x134>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d010      	beq.n	8005b2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b0a:	f000 f847 	bl	8005b9c <xTaskIncrementTick>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b14:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <xTaskResumeAll+0x130>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f1      	bne.n	8005b0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005b26:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <xTaskResumeAll+0x134>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b2c:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <xTaskResumeAll+0x130>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d009      	beq.n	8005b48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b34:	2301      	movs	r3, #1
 8005b36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <xTaskResumeAll+0x138>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b48:	f001 f8e4 	bl	8006d14 <vPortExitCritical>

	return xAlreadyYielded;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000e7c 	.word	0x20000e7c
 8005b5c:	20000e54 	.word	0x20000e54
 8005b60:	20000e14 	.word	0x20000e14
 8005b64:	20000e5c 	.word	0x20000e5c
 8005b68:	20000984 	.word	0x20000984
 8005b6c:	20000980 	.word	0x20000980
 8005b70:	20000e68 	.word	0x20000e68
 8005b74:	20000e64 	.word	0x20000e64
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <xTaskGetTickCount+0x1c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b88:	687b      	ldr	r3, [r7, #4]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000e58 	.word	0x20000e58

08005b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba6:	4b4f      	ldr	r3, [pc, #316]	; (8005ce4 <xTaskIncrementTick+0x148>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 808f 	bne.w	8005cce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bb0:	4b4d      	ldr	r3, [pc, #308]	; (8005ce8 <xTaskIncrementTick+0x14c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bb8:	4a4b      	ldr	r2, [pc, #300]	; (8005ce8 <xTaskIncrementTick+0x14c>)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d120      	bne.n	8005c06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bc4:	4b49      	ldr	r3, [pc, #292]	; (8005cec <xTaskIncrementTick+0x150>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	603b      	str	r3, [r7, #0]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <xTaskIncrementTick+0x46>
 8005be4:	4b41      	ldr	r3, [pc, #260]	; (8005cec <xTaskIncrementTick+0x150>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	4b41      	ldr	r3, [pc, #260]	; (8005cf0 <xTaskIncrementTick+0x154>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a3f      	ldr	r2, [pc, #252]	; (8005cec <xTaskIncrementTick+0x150>)
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	4a3f      	ldr	r2, [pc, #252]	; (8005cf0 <xTaskIncrementTick+0x154>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	4b3e      	ldr	r3, [pc, #248]	; (8005cf4 <xTaskIncrementTick+0x158>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	4a3d      	ldr	r2, [pc, #244]	; (8005cf4 <xTaskIncrementTick+0x158>)
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	f000 fadb 	bl	80061bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c06:	4b3c      	ldr	r3, [pc, #240]	; (8005cf8 <xTaskIncrementTick+0x15c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d349      	bcc.n	8005ca4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c10:	4b36      	ldr	r3, [pc, #216]	; (8005cec <xTaskIncrementTick+0x150>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1a:	4b37      	ldr	r3, [pc, #220]	; (8005cf8 <xTaskIncrementTick+0x15c>)
 8005c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c20:	601a      	str	r2, [r3, #0]
					break;
 8005c22:	e03f      	b.n	8005ca4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c24:	4b31      	ldr	r3, [pc, #196]	; (8005cec <xTaskIncrementTick+0x150>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d203      	bcs.n	8005c44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c3c:	4a2e      	ldr	r2, [pc, #184]	; (8005cf8 <xTaskIncrementTick+0x15c>)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c42:	e02f      	b.n	8005ca4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe ff79 	bl	8004b40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d004      	beq.n	8005c60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	3318      	adds	r3, #24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe ff70 	bl	8004b40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c64:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <xTaskIncrementTick+0x160>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d903      	bls.n	8005c74 <xTaskIncrementTick+0xd8>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	4a22      	ldr	r2, [pc, #136]	; (8005cfc <xTaskIncrementTick+0x160>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <xTaskIncrementTick+0x164>)
 8005c82:	441a      	add	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7fe fefb 	bl	8004a86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <xTaskIncrementTick+0x168>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d3b8      	bcc.n	8005c10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ca2:	e7b5      	b.n	8005c10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ca4:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <xTaskIncrementTick+0x168>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	4915      	ldr	r1, [pc, #84]	; (8005d00 <xTaskIncrementTick+0x164>)
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d901      	bls.n	8005cc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005cc0:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <xTaskIncrementTick+0x16c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	e004      	b.n	8005cd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <xTaskIncrementTick+0x170>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	4a0d      	ldr	r2, [pc, #52]	; (8005d0c <xTaskIncrementTick+0x170>)
 8005cd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005cd8:	697b      	ldr	r3, [r7, #20]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000e7c 	.word	0x20000e7c
 8005ce8:	20000e58 	.word	0x20000e58
 8005cec:	20000e0c 	.word	0x20000e0c
 8005cf0:	20000e10 	.word	0x20000e10
 8005cf4:	20000e6c 	.word	0x20000e6c
 8005cf8:	20000e74 	.word	0x20000e74
 8005cfc:	20000e5c 	.word	0x20000e5c
 8005d00:	20000984 	.word	0x20000984
 8005d04:	20000980 	.word	0x20000980
 8005d08:	20000e68 	.word	0x20000e68
 8005d0c:	20000e64 	.word	0x20000e64

08005d10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d16:	4b2a      	ldr	r3, [pc, #168]	; (8005dc0 <vTaskSwitchContext+0xb0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d1e:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <vTaskSwitchContext+0xb4>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d24:	e046      	b.n	8005db4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005d26:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <vTaskSwitchContext+0xb4>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2c:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <vTaskSwitchContext+0xb8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e010      	b.n	8005d56 <vTaskSwitchContext+0x46>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <vTaskSwitchContext+0x40>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	607b      	str	r3, [r7, #4]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <vTaskSwitchContext+0x3e>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	491d      	ldr	r1, [pc, #116]	; (8005dcc <vTaskSwitchContext+0xbc>)
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0e4      	beq.n	8005d34 <vTaskSwitchContext+0x24>
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4a15      	ldr	r2, [pc, #84]	; (8005dcc <vTaskSwitchContext+0xbc>)
 8005d76:	4413      	add	r3, r2
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	605a      	str	r2, [r3, #4]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d104      	bne.n	8005d9a <vTaskSwitchContext+0x8a>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	605a      	str	r2, [r3, #4]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4a0b      	ldr	r2, [pc, #44]	; (8005dd0 <vTaskSwitchContext+0xc0>)
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <vTaskSwitchContext+0xb8>)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <vTaskSwitchContext+0xc0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3354      	adds	r3, #84	; 0x54
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <vTaskSwitchContext+0xc4>)
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	20000e7c 	.word	0x20000e7c
 8005dc4:	20000e68 	.word	0x20000e68
 8005dc8:	20000e5c 	.word	0x20000e5c
 8005dcc:	20000984 	.word	0x20000984
 8005dd0:	20000980 	.word	0x20000980
 8005dd4:	20000010 	.word	0x20000010

08005dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60fb      	str	r3, [r7, #12]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <vTaskPlaceOnEventList+0x44>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3318      	adds	r3, #24
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fe fe61 	bl	8004ace <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	6838      	ldr	r0, [r7, #0]
 8005e10:	f000 fa80 	bl	8006314 <prvAddCurrentTaskToDelayedList>
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20000980 	.word	0x20000980

08005e20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	617b      	str	r3, [r7, #20]
}
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3318      	adds	r3, #24
 8005e4e:	4619      	mov	r1, r3
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7fe fe18 	bl	8004a86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	68b8      	ldr	r0, [r7, #8]
 8005e66:	f000 fa55 	bl	8006314 <prvAddCurrentTaskToDelayedList>
	}
 8005e6a:	bf00      	nop
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000980 	.word	0x20000980

08005e78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	60fb      	str	r3, [r7, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	e7fe      	b.n	8005ea2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	3318      	adds	r3, #24
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe fe49 	bl	8004b40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eae:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <xTaskRemoveFromEventList+0xb0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d11d      	bne.n	8005ef2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fe40 	bl	8004b40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec4:	4b19      	ldr	r3, [pc, #100]	; (8005f2c <xTaskRemoveFromEventList+0xb4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d903      	bls.n	8005ed4 <xTaskRemoveFromEventList+0x5c>
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <xTaskRemoveFromEventList+0xb4>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <xTaskRemoveFromEventList+0xb8>)
 8005ee2:	441a      	add	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7fe fdcb 	bl	8004a86 <vListInsertEnd>
 8005ef0:	e005      	b.n	8005efe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	3318      	adds	r3, #24
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	480e      	ldr	r0, [pc, #56]	; (8005f34 <xTaskRemoveFromEventList+0xbc>)
 8005efa:	f7fe fdc4 	bl	8004a86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <xTaskRemoveFromEventList+0xc0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d905      	bls.n	8005f18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <xTaskRemoveFromEventList+0xc4>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	e001      	b.n	8005f1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f1c:	697b      	ldr	r3, [r7, #20]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000e7c 	.word	0x20000e7c
 8005f2c:	20000e5c 	.word	0x20000e5c
 8005f30:	20000984 	.word	0x20000984
 8005f34:	20000e14 	.word	0x20000e14
 8005f38:	20000980 	.word	0x20000980
 8005f3c:	20000e68 	.word	0x20000e68

08005f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <vTaskInternalSetTimeOutState+0x24>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <vTaskInternalSetTimeOutState+0x28>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	605a      	str	r2, [r3, #4]
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	20000e6c 	.word	0x20000e6c
 8005f68:	20000e58 	.word	0x20000e58

08005f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	613b      	str	r3, [r7, #16]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	60fb      	str	r3, [r7, #12]
}
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005fae:	f000 fe81 	bl	8006cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fb2:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <xTaskCheckForTimeOut+0xbc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fca:	d102      	bne.n	8005fd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61fb      	str	r3, [r7, #28]
 8005fd0:	e023      	b.n	800601a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4b15      	ldr	r3, [pc, #84]	; (800602c <xTaskCheckForTimeOut+0xc0>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d007      	beq.n	8005fee <xTaskCheckForTimeOut+0x82>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d302      	bcc.n	8005fee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	e015      	b.n	800601a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d20b      	bcs.n	8006010 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1ad2      	subs	r2, r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ff9b 	bl	8005f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	e004      	b.n	800601a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800601a:	f000 fe7b 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 800601e:	69fb      	ldr	r3, [r7, #28]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000e58 	.word	0x20000e58
 800602c:	20000e6c 	.word	0x20000e6c

08006030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006034:	4b03      	ldr	r3, [pc, #12]	; (8006044 <vTaskMissedYield+0x14>)
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]
}
 800603a:	bf00      	nop
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	20000e68 	.word	0x20000e68

08006048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006050:	f000 f852 	bl	80060f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006054:	4b06      	ldr	r3, [pc, #24]	; (8006070 <prvIdleTask+0x28>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d9f9      	bls.n	8006050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <prvIdleTask+0x2c>)
 800605e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800606c:	e7f0      	b.n	8006050 <prvIdleTask+0x8>
 800606e:	bf00      	nop
 8006070:	20000984 	.word	0x20000984
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800607e:	2300      	movs	r3, #0
 8006080:	607b      	str	r3, [r7, #4]
 8006082:	e00c      	b.n	800609e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4a12      	ldr	r2, [pc, #72]	; (80060d8 <prvInitialiseTaskLists+0x60>)
 8006090:	4413      	add	r3, r2
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fcca 	bl	8004a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3301      	adds	r3, #1
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b37      	cmp	r3, #55	; 0x37
 80060a2:	d9ef      	bls.n	8006084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060a4:	480d      	ldr	r0, [pc, #52]	; (80060dc <prvInitialiseTaskLists+0x64>)
 80060a6:	f7fe fcc1 	bl	8004a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060aa:	480d      	ldr	r0, [pc, #52]	; (80060e0 <prvInitialiseTaskLists+0x68>)
 80060ac:	f7fe fcbe 	bl	8004a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060b0:	480c      	ldr	r0, [pc, #48]	; (80060e4 <prvInitialiseTaskLists+0x6c>)
 80060b2:	f7fe fcbb 	bl	8004a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060b6:	480c      	ldr	r0, [pc, #48]	; (80060e8 <prvInitialiseTaskLists+0x70>)
 80060b8:	f7fe fcb8 	bl	8004a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060bc:	480b      	ldr	r0, [pc, #44]	; (80060ec <prvInitialiseTaskLists+0x74>)
 80060be:	f7fe fcb5 	bl	8004a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <prvInitialiseTaskLists+0x78>)
 80060c4:	4a05      	ldr	r2, [pc, #20]	; (80060dc <prvInitialiseTaskLists+0x64>)
 80060c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060c8:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <prvInitialiseTaskLists+0x7c>)
 80060ca:	4a05      	ldr	r2, [pc, #20]	; (80060e0 <prvInitialiseTaskLists+0x68>)
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000984 	.word	0x20000984
 80060dc:	20000de4 	.word	0x20000de4
 80060e0:	20000df8 	.word	0x20000df8
 80060e4:	20000e14 	.word	0x20000e14
 80060e8:	20000e28 	.word	0x20000e28
 80060ec:	20000e40 	.word	0x20000e40
 80060f0:	20000e0c 	.word	0x20000e0c
 80060f4:	20000e10 	.word	0x20000e10

080060f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060fe:	e019      	b.n	8006134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006100:	f000 fdd8 	bl	8006cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006104:	4b10      	ldr	r3, [pc, #64]	; (8006148 <prvCheckTasksWaitingTermination+0x50>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	4618      	mov	r0, r3
 8006112:	f7fe fd15 	bl	8004b40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006116:	4b0d      	ldr	r3, [pc, #52]	; (800614c <prvCheckTasksWaitingTermination+0x54>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3b01      	subs	r3, #1
 800611c:	4a0b      	ldr	r2, [pc, #44]	; (800614c <prvCheckTasksWaitingTermination+0x54>)
 800611e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <prvCheckTasksWaitingTermination+0x58>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3b01      	subs	r3, #1
 8006126:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <prvCheckTasksWaitingTermination+0x58>)
 8006128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800612a:	f000 fdf3 	bl	8006d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f810 	bl	8006154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <prvCheckTasksWaitingTermination+0x58>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e1      	bne.n	8006100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000e28 	.word	0x20000e28
 800614c:	20000e54 	.word	0x20000e54
 8006150:	20000e3c 	.word	0x20000e3c

08006154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3354      	adds	r3, #84	; 0x54
 8006160:	4618      	mov	r0, r3
 8006162:	f001 f8fd 	bl	8007360 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800616c:	2b00      	cmp	r3, #0
 800616e:	d108      	bne.n	8006182 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	4618      	mov	r0, r3
 8006176:	f000 ff8b 	bl	8007090 <vPortFree>
				vPortFree( pxTCB );
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 ff88 	bl	8007090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006180:	e018      	b.n	80061b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006188:	2b01      	cmp	r3, #1
 800618a:	d103      	bne.n	8006194 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 ff7f 	bl	8007090 <vPortFree>
	}
 8006192:	e00f      	b.n	80061b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800619a:	2b02      	cmp	r3, #2
 800619c:	d00a      	beq.n	80061b4 <prvDeleteTCB+0x60>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60fb      	str	r3, [r7, #12]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <prvDeleteTCB+0x5e>
	}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c2:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <prvResetNextTaskUnblockTime+0x38>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <prvResetNextTaskUnblockTime+0x3c>)
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061d4:	e008      	b.n	80061e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d6:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <prvResetNextTaskUnblockTime+0x38>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <prvResetNextTaskUnblockTime+0x3c>)
 80061e6:	6013      	str	r3, [r2, #0]
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	20000e0c 	.word	0x20000e0c
 80061f8:	20000e74 	.word	0x20000e74

080061fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006202:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <xTaskGetSchedulerState+0x34>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800620a:	2301      	movs	r3, #1
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	e008      	b.n	8006222 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <xTaskGetSchedulerState+0x38>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006218:	2302      	movs	r3, #2
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	e001      	b.n	8006222 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006222:	687b      	ldr	r3, [r7, #4]
	}
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	20000e60 	.word	0x20000e60
 8006234:	20000e7c 	.word	0x20000e7c

08006238 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d056      	beq.n	80062fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800624e:	4b2e      	ldr	r3, [pc, #184]	; (8006308 <xTaskPriorityDisinherit+0xd0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d00a      	beq.n	800626e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	60fb      	str	r3, [r7, #12]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	60bb      	str	r3, [r7, #8]
}
 8006288:	bf00      	nop
 800628a:	e7fe      	b.n	800628a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006290:	1e5a      	subs	r2, r3, #1
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629e:	429a      	cmp	r2, r3
 80062a0:	d02c      	beq.n	80062fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d128      	bne.n	80062fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fc46 	bl	8004b40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <xTaskPriorityDisinherit+0xd4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d903      	bls.n	80062dc <xTaskPriorityDisinherit+0xa4>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4a0c      	ldr	r2, [pc, #48]	; (800630c <xTaskPriorityDisinherit+0xd4>)
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4a09      	ldr	r2, [pc, #36]	; (8006310 <xTaskPriorityDisinherit+0xd8>)
 80062ea:	441a      	add	r2, r3
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fe fbc7 	bl	8004a86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80062f8:	2301      	movs	r3, #1
 80062fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062fc:	697b      	ldr	r3, [r7, #20]
	}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000980 	.word	0x20000980
 800630c:	20000e5c 	.word	0x20000e5c
 8006310:	20000984 	.word	0x20000984

08006314 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800631e:	4b21      	ldr	r3, [pc, #132]	; (80063a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006324:	4b20      	ldr	r3, [pc, #128]	; (80063a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3304      	adds	r3, #4
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe fc08 	bl	8004b40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006336:	d10a      	bne.n	800634e <prvAddCurrentTaskToDelayedList+0x3a>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800633e:	4b1a      	ldr	r3, [pc, #104]	; (80063a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3304      	adds	r3, #4
 8006344:	4619      	mov	r1, r3
 8006346:	4819      	ldr	r0, [pc, #100]	; (80063ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006348:	f7fe fb9d 	bl	8004a86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800634c:	e026      	b.n	800639c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4413      	add	r3, r2
 8006354:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	429a      	cmp	r2, r3
 8006364:	d209      	bcs.n	800637a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fe fbab 	bl	8004ace <vListInsert>
}
 8006378:	e010      	b.n	800639c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800637a:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f7fe fba1 	bl	8004ace <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	429a      	cmp	r2, r3
 8006394:	d202      	bcs.n	800639c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006396:	4a08      	ldr	r2, [pc, #32]	; (80063b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6013      	str	r3, [r2, #0]
}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000e58 	.word	0x20000e58
 80063a8:	20000980 	.word	0x20000980
 80063ac:	20000e40 	.word	0x20000e40
 80063b0:	20000e10 	.word	0x20000e10
 80063b4:	20000e0c 	.word	0x20000e0c
 80063b8:	20000e74 	.word	0x20000e74

080063bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80063c6:	f000 fb07 	bl	80069d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80063ca:	4b1c      	ldr	r3, [pc, #112]	; (800643c <xTimerCreateTimerTask+0x80>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d021      	beq.n	8006416 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80063da:	1d3a      	adds	r2, r7, #4
 80063dc:	f107 0108 	add.w	r1, r7, #8
 80063e0:	f107 030c 	add.w	r3, r7, #12
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe fb07 	bl	80049f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	9202      	str	r2, [sp, #8]
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	2302      	movs	r3, #2
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2300      	movs	r3, #0
 80063fa:	460a      	mov	r2, r1
 80063fc:	4910      	ldr	r1, [pc, #64]	; (8006440 <xTimerCreateTimerTask+0x84>)
 80063fe:	4811      	ldr	r0, [pc, #68]	; (8006444 <xTimerCreateTimerTask+0x88>)
 8006400:	f7ff f8b4 	bl	800556c <xTaskCreateStatic>
 8006404:	4603      	mov	r3, r0
 8006406:	4a10      	ldr	r2, [pc, #64]	; (8006448 <xTimerCreateTimerTask+0x8c>)
 8006408:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800640a:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <xTimerCreateTimerTask+0x8c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006412:	2301      	movs	r3, #1
 8006414:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	613b      	str	r3, [r7, #16]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006432:	697b      	ldr	r3, [r7, #20]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20000eb0 	.word	0x20000eb0
 8006440:	08007524 	.word	0x08007524
 8006444:	08006581 	.word	0x08006581
 8006448:	20000eb4 	.word	0x20000eb4

0800644c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800645a:	2300      	movs	r3, #0
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	623b      	str	r3, [r7, #32]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800647a:	4b1a      	ldr	r3, [pc, #104]	; (80064e4 <xTimerGenericCommand+0x98>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d02a      	beq.n	80064d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b05      	cmp	r3, #5
 8006492:	dc18      	bgt.n	80064c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006494:	f7ff feb2 	bl	80061fc <xTaskGetSchedulerState>
 8006498:	4603      	mov	r3, r0
 800649a:	2b02      	cmp	r3, #2
 800649c:	d109      	bne.n	80064b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800649e:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <xTimerGenericCommand+0x98>)
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	f107 0110 	add.w	r1, r7, #16
 80064a6:	2300      	movs	r3, #0
 80064a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064aa:	f7fe fc77 	bl	8004d9c <xQueueGenericSend>
 80064ae:	6278      	str	r0, [r7, #36]	; 0x24
 80064b0:	e012      	b.n	80064d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80064b2:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <xTimerGenericCommand+0x98>)
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	f107 0110 	add.w	r1, r7, #16
 80064ba:	2300      	movs	r3, #0
 80064bc:	2200      	movs	r2, #0
 80064be:	f7fe fc6d 	bl	8004d9c <xQueueGenericSend>
 80064c2:	6278      	str	r0, [r7, #36]	; 0x24
 80064c4:	e008      	b.n	80064d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <xTimerGenericCommand+0x98>)
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	f107 0110 	add.w	r1, r7, #16
 80064ce:	2300      	movs	r3, #0
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	f7fe fd61 	bl	8004f98 <xQueueGenericSendFromISR>
 80064d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3728      	adds	r7, #40	; 0x28
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000eb0 	.word	0x20000eb0

080064e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b088      	sub	sp, #32
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f2:	4b22      	ldr	r3, [pc, #136]	; (800657c <prvProcessExpiredTimer+0x94>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	3304      	adds	r3, #4
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe fb1d 	bl	8004b40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d022      	beq.n	800655a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	699a      	ldr	r2, [r3, #24]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	18d1      	adds	r1, r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	6978      	ldr	r0, [r7, #20]
 8006522:	f000 f8d1 	bl	80066c8 <prvInsertTimerInActiveList>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01f      	beq.n	800656c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800652c:	2300      	movs	r3, #0
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2300      	movs	r3, #0
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	2100      	movs	r1, #0
 8006536:	6978      	ldr	r0, [r7, #20]
 8006538:	f7ff ff88 	bl	800644c <xTimerGenericCommand>
 800653c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d113      	bne.n	800656c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	60fb      	str	r3, [r7, #12]
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	b2da      	uxtb	r2, r3
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	6978      	ldr	r0, [r7, #20]
 8006572:	4798      	blx	r3
}
 8006574:	bf00      	nop
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000ea8 	.word	0x20000ea8

08006580 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006588:	f107 0308 	add.w	r3, r7, #8
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f857 	bl	8006640 <prvGetNextExpireTime>
 8006592:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4619      	mov	r1, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f803 	bl	80065a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800659e:	f000 f8d5 	bl	800674c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065a2:	e7f1      	b.n	8006588 <prvTimerTask+0x8>

080065a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065ae:	f7ff fa39 	bl	8005a24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065b2:	f107 0308 	add.w	r3, r7, #8
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f866 	bl	8006688 <prvSampleTimeNow>
 80065bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d130      	bne.n	8006626 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <prvProcessTimerOrBlockTask+0x3c>
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d806      	bhi.n	80065e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80065d2:	f7ff fa35 	bl	8005a40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff ff85 	bl	80064e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065de:	e024      	b.n	800662a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d008      	beq.n	80065f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065e6:	4b13      	ldr	r3, [pc, #76]	; (8006634 <prvProcessTimerOrBlockTask+0x90>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <prvProcessTimerOrBlockTask+0x50>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <prvProcessTimerOrBlockTask+0x52>
 80065f4:	2300      	movs	r3, #0
 80065f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065f8:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <prvProcessTimerOrBlockTask+0x94>)
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	4619      	mov	r1, r3
 8006606:	f7fe ff7d 	bl	8005504 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800660a:	f7ff fa19 	bl	8005a40 <xTaskResumeAll>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <prvProcessTimerOrBlockTask+0x98>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
}
 8006624:	e001      	b.n	800662a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006626:	f7ff fa0b 	bl	8005a40 <xTaskResumeAll>
}
 800662a:	bf00      	nop
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000eac 	.word	0x20000eac
 8006638:	20000eb0 	.word	0x20000eb0
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <prvGetNextExpireTime+0x44>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <prvGetNextExpireTime+0x16>
 8006652:	2201      	movs	r2, #1
 8006654:	e000      	b.n	8006658 <prvGetNextExpireTime+0x18>
 8006656:	2200      	movs	r2, #0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006664:	4b07      	ldr	r3, [pc, #28]	; (8006684 <prvGetNextExpireTime+0x44>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	e001      	b.n	8006674 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006674:	68fb      	ldr	r3, [r7, #12]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000ea8 	.word	0x20000ea8

08006688 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006690:	f7ff fa74 	bl	8005b7c <xTaskGetTickCount>
 8006694:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <prvSampleTimeNow+0x3c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	429a      	cmp	r2, r3
 800669e:	d205      	bcs.n	80066ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066a0:	f000 f936 	bl	8006910 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	e002      	b.n	80066b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80066b2:	4a04      	ldr	r2, [pc, #16]	; (80066c4 <prvSampleTimeNow+0x3c>)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80066b8:	68fb      	ldr	r3, [r7, #12]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000eb8 	.word	0x20000eb8

080066c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d812      	bhi.n	8006714 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d302      	bcc.n	8006702 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066fc:	2301      	movs	r3, #1
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	e01b      	b.n	800673a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006702:	4b10      	ldr	r3, [pc, #64]	; (8006744 <prvInsertTimerInActiveList+0x7c>)
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3304      	adds	r3, #4
 800670a:	4619      	mov	r1, r3
 800670c:	4610      	mov	r0, r2
 800670e:	f7fe f9de 	bl	8004ace <vListInsert>
 8006712:	e012      	b.n	800673a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d206      	bcs.n	800672a <prvInsertTimerInActiveList+0x62>
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d302      	bcc.n	800672a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006724:	2301      	movs	r3, #1
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e007      	b.n	800673a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800672a:	4b07      	ldr	r3, [pc, #28]	; (8006748 <prvInsertTimerInActiveList+0x80>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3304      	adds	r3, #4
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7fe f9ca 	bl	8004ace <vListInsert>
		}
	}

	return xProcessTimerNow;
 800673a:	697b      	ldr	r3, [r7, #20]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000eac 	.word	0x20000eac
 8006748:	20000ea8 	.word	0x20000ea8

0800674c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08e      	sub	sp, #56	; 0x38
 8006750:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006752:	e0ca      	b.n	80068ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	da18      	bge.n	800678c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	3304      	adds	r3, #4
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	61fb      	str	r3, [r7, #28]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006782:	6850      	ldr	r0, [r2, #4]
 8006784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006786:	6892      	ldr	r2, [r2, #8]
 8006788:	4611      	mov	r1, r2
 800678a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f2c0 80aa 	blt.w	80068e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	3304      	adds	r3, #4
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fe f9cb 	bl	8004b40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067aa:	463b      	mov	r3, r7
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff ff6b 	bl	8006688 <prvSampleTimeNow>
 80067b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b09      	cmp	r3, #9
 80067b8:	f200 8097 	bhi.w	80068ea <prvProcessReceivedCommands+0x19e>
 80067bc:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <prvProcessReceivedCommands+0x78>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080067ed 	.word	0x080067ed
 80067c8:	080067ed 	.word	0x080067ed
 80067cc:	080067ed 	.word	0x080067ed
 80067d0:	08006861 	.word	0x08006861
 80067d4:	08006875 	.word	0x08006875
 80067d8:	080068bf 	.word	0x080068bf
 80067dc:	080067ed 	.word	0x080067ed
 80067e0:	080067ed 	.word	0x080067ed
 80067e4:	08006861 	.word	0x08006861
 80067e8:	08006875 	.word	0x08006875
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	18d1      	adds	r1, r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800680c:	f7ff ff5c 	bl	80066c8 <prvInsertTimerInActiveList>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d069      	beq.n	80068ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800681c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d05e      	beq.n	80068ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	441a      	add	r2, r3
 8006834:	2300      	movs	r3, #0
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2300      	movs	r3, #0
 800683a:	2100      	movs	r1, #0
 800683c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800683e:	f7ff fe05 	bl	800644c <xTimerGenericCommand>
 8006842:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d14f      	bne.n	80068ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	61bb      	str	r3, [r7, #24]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006872:	e03a      	b.n	80068ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	617b      	str	r3, [r7, #20]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	18d1      	adds	r1, r2, r3
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068b8:	f7ff ff06 	bl	80066c8 <prvInsertTimerInActiveList>
					break;
 80068bc:	e015      	b.n	80068ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80068cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ce:	f000 fbdf 	bl	8007090 <vPortFree>
 80068d2:	e00a      	b.n	80068ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068e6:	e000      	b.n	80068ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80068e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068ea:	4b08      	ldr	r3, [pc, #32]	; (800690c <prvProcessReceivedCommands+0x1c0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	1d39      	adds	r1, r7, #4
 80068f0:	2200      	movs	r2, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fbec 	bl	80050d0 <xQueueReceive>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f47f af2a 	bne.w	8006754 <prvProcessReceivedCommands+0x8>
	}
}
 8006900:	bf00      	nop
 8006902:	bf00      	nop
 8006904:	3730      	adds	r7, #48	; 0x30
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000eb0 	.word	0x20000eb0

08006910 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006916:	e048      	b.n	80069aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006918:	4b2d      	ldr	r3, [pc, #180]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006922:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe f905 	bl	8004b40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d02e      	beq.n	80069aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	429a      	cmp	r2, r3
 800695c:	d90e      	bls.n	800697c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800696a:	4b19      	ldr	r3, [pc, #100]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fe f8aa 	bl	8004ace <vListInsert>
 800697a:	e016      	b.n	80069aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800697c:	2300      	movs	r3, #0
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	2100      	movs	r1, #0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fd60 	bl	800644c <xTimerGenericCommand>
 800698c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	603b      	str	r3, [r7, #0]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069aa:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1b1      	bne.n	8006918 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069ba:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <prvSwitchTimerLists+0xc4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 80069c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069c2:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <prvSwitchTimerLists+0xc4>)
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	6013      	str	r3, [r2, #0]
}
 80069c8:	bf00      	nop
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20000ea8 	.word	0x20000ea8
 80069d4:	20000eac 	.word	0x20000eac

080069d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069de:	f000 f969 	bl	8006cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d120      	bne.n	8006a2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069ea:	4814      	ldr	r0, [pc, #80]	; (8006a3c <prvCheckForValidListAndQueue+0x64>)
 80069ec:	f7fe f81e 	bl	8004a2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069f0:	4813      	ldr	r0, [pc, #76]	; (8006a40 <prvCheckForValidListAndQueue+0x68>)
 80069f2:	f7fe f81b 	bl	8004a2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069f6:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <prvCheckForValidListAndQueue+0x6c>)
 80069f8:	4a10      	ldr	r2, [pc, #64]	; (8006a3c <prvCheckForValidListAndQueue+0x64>)
 80069fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069fc:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <prvCheckForValidListAndQueue+0x70>)
 80069fe:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <prvCheckForValidListAndQueue+0x68>)
 8006a00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a02:	2300      	movs	r3, #0
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <prvCheckForValidListAndQueue+0x74>)
 8006a08:	4a11      	ldr	r2, [pc, #68]	; (8006a50 <prvCheckForValidListAndQueue+0x78>)
 8006a0a:	2110      	movs	r1, #16
 8006a0c:	200a      	movs	r0, #10
 8006a0e:	f7fe f929 	bl	8004c64 <xQueueGenericCreateStatic>
 8006a12:	4603      	mov	r3, r0
 8006a14:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 8006a16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a18:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	490b      	ldr	r1, [pc, #44]	; (8006a54 <prvCheckForValidListAndQueue+0x7c>)
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fd42 	bl	80054b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a2c:	f000 f972 	bl	8006d14 <vPortExitCritical>
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000eb0 	.word	0x20000eb0
 8006a3c:	20000e80 	.word	0x20000e80
 8006a40:	20000e94 	.word	0x20000e94
 8006a44:	20000ea8 	.word	0x20000ea8
 8006a48:	20000eac 	.word	0x20000eac
 8006a4c:	20000f5c 	.word	0x20000f5c
 8006a50:	20000ebc 	.word	0x20000ebc
 8006a54:	0800752c 	.word	0x0800752c

08006a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3b04      	subs	r3, #4
 8006a68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3b04      	subs	r3, #4
 8006a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3b04      	subs	r3, #4
 8006a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a88:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <pxPortInitialiseStack+0x64>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3b14      	subs	r3, #20
 8006a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f06f 0202 	mvn.w	r2, #2
 8006aa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3b20      	subs	r3, #32
 8006aac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	08006ac1 	.word	0x08006ac1

08006ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006aca:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <prvTaskExitError+0x54>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad2:	d00a      	beq.n	8006aea <prvTaskExitError+0x2a>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <prvTaskExitError+0x28>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	60bb      	str	r3, [r7, #8]
}
 8006afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006afe:	bf00      	nop
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0fc      	beq.n	8006b00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	2000000c 	.word	0x2000000c
	...

08006b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <pxCurrentTCBConst2>)
 8006b22:	6819      	ldr	r1, [r3, #0]
 8006b24:	6808      	ldr	r0, [r1, #0]
 8006b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	f380 8809 	msr	PSP, r0
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f380 8811 	msr	BASEPRI, r0
 8006b3a:	4770      	bx	lr
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst2>:
 8006b40:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b48:	4808      	ldr	r0, [pc, #32]	; (8006b6c <prvPortStartFirstTask+0x24>)
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	6800      	ldr	r0, [r0, #0]
 8006b4e:	f380 8808 	msr	MSP, r0
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f380 8814 	msr	CONTROL, r0
 8006b5a:	b662      	cpsie	i
 8006b5c:	b661      	cpsie	f
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	df00      	svc	0
 8006b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b6a:	bf00      	nop
 8006b6c:	e000ed08 	.word	0xe000ed08

08006b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b76:	4b46      	ldr	r3, [pc, #280]	; (8006c90 <xPortStartScheduler+0x120>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a46      	ldr	r2, [pc, #280]	; (8006c94 <xPortStartScheduler+0x124>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d10a      	bne.n	8006b96 <xPortStartScheduler+0x26>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b96:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <xPortStartScheduler+0x120>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3f      	ldr	r2, [pc, #252]	; (8006c98 <xPortStartScheduler+0x128>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d10a      	bne.n	8006bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	22ff      	movs	r2, #255	; 0xff
 8006bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bde:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006be0:	2207      	movs	r2, #7
 8006be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006be4:	e009      	b.n	8006bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006be6:	4b2f      	ldr	r3, [pc, #188]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	4a2d      	ldr	r2, [pc, #180]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c02:	2b80      	cmp	r3, #128	; 0x80
 8006c04:	d0ef      	beq.n	8006be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c06:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1c3 0307 	rsb	r3, r3, #7
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d00a      	beq.n	8006c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	60bb      	str	r3, [r7, #8]
}
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c28:	4b1e      	ldr	r3, [pc, #120]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c32:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c46:	4b18      	ldr	r3, [pc, #96]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c5e:	f000 f8dd 	bl	8006e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c62:	4b12      	ldr	r3, [pc, #72]	; (8006cac <xPortStartScheduler+0x13c>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c68:	f000 f8fc 	bl	8006e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <xPortStartScheduler+0x140>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a0f      	ldr	r2, [pc, #60]	; (8006cb0 <xPortStartScheduler+0x140>)
 8006c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c78:	f7ff ff66 	bl	8006b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c7c:	f7ff f848 	bl	8005d10 <vTaskSwitchContext>
	prvTaskExitError();
 8006c80:	f7ff ff1e 	bl	8006ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	e000ed00 	.word	0xe000ed00
 8006c94:	410fc271 	.word	0x410fc271
 8006c98:	410fc270 	.word	0x410fc270
 8006c9c:	e000e400 	.word	0xe000e400
 8006ca0:	20000fac 	.word	0x20000fac
 8006ca4:	20000fb0 	.word	0x20000fb0
 8006ca8:	e000ed20 	.word	0xe000ed20
 8006cac:	2000000c 	.word	0x2000000c
 8006cb0:	e000ef34 	.word	0xe000ef34

08006cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	607b      	str	r3, [r7, #4]
}
 8006ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cce:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <vPortEnterCritical+0x58>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a0d      	ldr	r2, [pc, #52]	; (8006d0c <vPortEnterCritical+0x58>)
 8006cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <vPortEnterCritical+0x58>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10f      	bne.n	8006d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <vPortEnterCritical+0x5c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	603b      	str	r3, [r7, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <vPortEnterCritical+0x4a>
	}
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	2000000c 	.word	0x2000000c
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d1a:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <vPortExitCritical+0x50>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <vPortExitCritical+0x24>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	607b      	str	r3, [r7, #4]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d38:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <vPortExitCritical+0x50>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	4a09      	ldr	r2, [pc, #36]	; (8006d64 <vPortExitCritical+0x50>)
 8006d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d42:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <vPortExitCritical+0x50>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d105      	bne.n	8006d56 <vPortExitCritical+0x42>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	f383 8811 	msr	BASEPRI, r3
}
 8006d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	2000000c 	.word	0x2000000c
	...

08006d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d70:	f3ef 8009 	mrs	r0, PSP
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	4b15      	ldr	r3, [pc, #84]	; (8006dd0 <pxCurrentTCBConst>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	f01e 0f10 	tst.w	lr, #16
 8006d80:	bf08      	it	eq
 8006d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	6010      	str	r0, [r2, #0]
 8006d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d94:	f380 8811 	msr	BASEPRI, r0
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f7fe ffb6 	bl	8005d10 <vTaskSwitchContext>
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	f380 8811 	msr	BASEPRI, r0
 8006dac:	bc09      	pop	{r0, r3}
 8006dae:	6819      	ldr	r1, [r3, #0]
 8006db0:	6808      	ldr	r0, [r1, #0]
 8006db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db6:	f01e 0f10 	tst.w	lr, #16
 8006dba:	bf08      	it	eq
 8006dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006dc0:	f380 8809 	msr	PSP, r0
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	f3af 8000 	nop.w

08006dd0 <pxCurrentTCBConst>:
 8006dd0:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop

08006dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	607b      	str	r3, [r7, #4]
}
 8006df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006df2:	f7fe fed3 	bl	8005b9c <xTaskIncrementTick>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <xPortSysTickHandler+0x40>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	2300      	movs	r3, #0
 8006e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f383 8811 	msr	BASEPRI, r3
}
 8006e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <vPortSetupTimerInterrupt+0x38>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <vPortSetupTimerInterrupt+0x3c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <vPortSetupTimerInterrupt+0x40>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <vPortSetupTimerInterrupt+0x44>)
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e3e:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000e010 	.word	0xe000e010
 8006e54:	e000e018 	.word	0xe000e018
 8006e58:	20000000 	.word	0x20000000
 8006e5c:	10624dd3 	.word	0x10624dd3
 8006e60:	e000e014 	.word	0xe000e014

08006e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e74 <vPortEnableVFP+0x10>
 8006e68:	6801      	ldr	r1, [r0, #0]
 8006e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e6e:	6001      	str	r1, [r0, #0]
 8006e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e72:	bf00      	nop
 8006e74:	e000ed88 	.word	0xe000ed88

08006e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e7e:	f3ef 8305 	mrs	r3, IPSR
 8006e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b0f      	cmp	r3, #15
 8006e88:	d914      	bls.n	8006eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e8a:	4a17      	ldr	r2, [pc, #92]	; (8006ee8 <vPortValidateInterruptPriority+0x70>)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e94:	4b15      	ldr	r3, [pc, #84]	; (8006eec <vPortValidateInterruptPriority+0x74>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	7afa      	ldrb	r2, [r7, #11]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d20a      	bcs.n	8006eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <vPortValidateInterruptPriority+0x78>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <vPortValidateInterruptPriority+0x7c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d90a      	bls.n	8006eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	603b      	str	r3, [r7, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <vPortValidateInterruptPriority+0x60>
	}
 8006eda:	bf00      	nop
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	e000e3f0 	.word	0xe000e3f0
 8006eec:	20000fac 	.word	0x20000fac
 8006ef0:	e000ed0c 	.word	0xe000ed0c
 8006ef4:	20000fb0 	.word	0x20000fb0

08006ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f04:	f7fe fd8e 	bl	8005a24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f08:	4b5b      	ldr	r3, [pc, #364]	; (8007078 <pvPortMalloc+0x180>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f10:	f000 f920 	bl	8007154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f14:	4b59      	ldr	r3, [pc, #356]	; (800707c <pvPortMalloc+0x184>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8093 	bne.w	8007048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01d      	beq.n	8006f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f28:	2208      	movs	r2, #8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d014      	beq.n	8006f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	3308      	adds	r3, #8
 8006f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <pvPortMalloc+0x6c>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	617b      	str	r3, [r7, #20]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d06e      	beq.n	8007048 <pvPortMalloc+0x150>
 8006f6a:	4b45      	ldr	r3, [pc, #276]	; (8007080 <pvPortMalloc+0x188>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d869      	bhi.n	8007048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f74:	4b43      	ldr	r3, [pc, #268]	; (8007084 <pvPortMalloc+0x18c>)
 8006f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f78:	4b42      	ldr	r3, [pc, #264]	; (8007084 <pvPortMalloc+0x18c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f7e:	e004      	b.n	8006f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d903      	bls.n	8006f9c <pvPortMalloc+0xa4>
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1f1      	bne.n	8006f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f9c:	4b36      	ldr	r3, [pc, #216]	; (8007078 <pvPortMalloc+0x180>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d050      	beq.n	8007048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2208      	movs	r2, #8
 8006fac:	4413      	add	r3, r2
 8006fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	1ad2      	subs	r2, r2, r3
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d91f      	bls.n	8007008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	613b      	str	r3, [r7, #16]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	1ad2      	subs	r2, r2, r3
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007002:	69b8      	ldr	r0, [r7, #24]
 8007004:	f000 f908 	bl	8007218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007008:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <pvPortMalloc+0x188>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <pvPortMalloc+0x188>)
 8007014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007016:	4b1a      	ldr	r3, [pc, #104]	; (8007080 <pvPortMalloc+0x188>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4b1b      	ldr	r3, [pc, #108]	; (8007088 <pvPortMalloc+0x190>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d203      	bcs.n	800702a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007022:	4b17      	ldr	r3, [pc, #92]	; (8007080 <pvPortMalloc+0x188>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a18      	ldr	r2, [pc, #96]	; (8007088 <pvPortMalloc+0x190>)
 8007028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <pvPortMalloc+0x184>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	431a      	orrs	r2, r3
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800703e:	4b13      	ldr	r3, [pc, #76]	; (800708c <pvPortMalloc+0x194>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3301      	adds	r3, #1
 8007044:	4a11      	ldr	r2, [pc, #68]	; (800708c <pvPortMalloc+0x194>)
 8007046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007048:	f7fe fcfa 	bl	8005a40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <pvPortMalloc+0x174>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60fb      	str	r3, [r7, #12]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <pvPortMalloc+0x172>
	return pvReturn;
 800706c:	69fb      	ldr	r3, [r7, #28]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3728      	adds	r7, #40	; 0x28
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20004bbc 	.word	0x20004bbc
 800707c:	20004bd0 	.word	0x20004bd0
 8007080:	20004bc0 	.word	0x20004bc0
 8007084:	20004bb4 	.word	0x20004bb4
 8007088:	20004bc4 	.word	0x20004bc4
 800708c:	20004bc8 	.word	0x20004bc8

08007090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d04d      	beq.n	800713e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070a2:	2308      	movs	r3, #8
 80070a4:	425b      	negs	r3, r3
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	4b24      	ldr	r3, [pc, #144]	; (8007148 <vPortFree+0xb8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4013      	ands	r3, r2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <vPortFree+0x44>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	60fb      	str	r3, [r7, #12]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <vPortFree+0x62>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60bb      	str	r3, [r7, #8]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <vPortFree+0xb8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4013      	ands	r3, r2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01e      	beq.n	800713e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11a      	bne.n	800713e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <vPortFree+0xb8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	43db      	mvns	r3, r3
 8007112:	401a      	ands	r2, r3
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007118:	f7fe fc84 	bl	8005a24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	4b0a      	ldr	r3, [pc, #40]	; (800714c <vPortFree+0xbc>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4413      	add	r3, r2
 8007126:	4a09      	ldr	r2, [pc, #36]	; (800714c <vPortFree+0xbc>)
 8007128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800712a:	6938      	ldr	r0, [r7, #16]
 800712c:	f000 f874 	bl	8007218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <vPortFree+0xc0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	4a06      	ldr	r2, [pc, #24]	; (8007150 <vPortFree+0xc0>)
 8007138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800713a:	f7fe fc81 	bl	8005a40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800713e:	bf00      	nop
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20004bd0 	.word	0x20004bd0
 800714c:	20004bc0 	.word	0x20004bc0
 8007150:	20004bcc 	.word	0x20004bcc

08007154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800715a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800715e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007160:	4b27      	ldr	r3, [pc, #156]	; (8007200 <prvHeapInit+0xac>)
 8007162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3307      	adds	r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0307 	bic.w	r3, r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <prvHeapInit+0xac>)
 8007184:	4413      	add	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800718c:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <prvHeapInit+0xb0>)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007192:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <prvHeapInit+0xb0>)
 8007194:	2200      	movs	r2, #0
 8007196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071a0:	2208      	movs	r2, #8
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0307 	bic.w	r3, r3, #7
 80071ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4a15      	ldr	r2, [pc, #84]	; (8007208 <prvHeapInit+0xb4>)
 80071b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <prvHeapInit+0xb4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071be:	4b12      	ldr	r3, [pc, #72]	; (8007208 <prvHeapInit+0xb4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	1ad2      	subs	r2, r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071d4:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <prvHeapInit+0xb4>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4a0a      	ldr	r2, [pc, #40]	; (800720c <prvHeapInit+0xb8>)
 80071e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a09      	ldr	r2, [pc, #36]	; (8007210 <prvHeapInit+0xbc>)
 80071ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <prvHeapInit+0xc0>)
 80071ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071f2:	601a      	str	r2, [r3, #0]
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	20000fb4 	.word	0x20000fb4
 8007204:	20004bb4 	.word	0x20004bb4
 8007208:	20004bbc 	.word	0x20004bbc
 800720c:	20004bc4 	.word	0x20004bc4
 8007210:	20004bc0 	.word	0x20004bc0
 8007214:	20004bd0 	.word	0x20004bd0

08007218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007220:	4b28      	ldr	r3, [pc, #160]	; (80072c4 <prvInsertBlockIntoFreeList+0xac>)
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e002      	b.n	800722c <prvInsertBlockIntoFreeList+0x14>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d8f7      	bhi.n	8007226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d108      	bne.n	800725a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	441a      	add	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	441a      	add	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d118      	bne.n	80072a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d00d      	beq.n	8007296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	441a      	add	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e008      	b.n	80072a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e003      	b.n	80072a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d002      	beq.n	80072b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072b6:	bf00      	nop
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20004bb4 	.word	0x20004bb4
 80072c8:	20004bbc 	.word	0x20004bbc

080072cc <__libc_init_array>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4d0d      	ldr	r5, [pc, #52]	; (8007304 <__libc_init_array+0x38>)
 80072d0:	4c0d      	ldr	r4, [pc, #52]	; (8007308 <__libc_init_array+0x3c>)
 80072d2:	1b64      	subs	r4, r4, r5
 80072d4:	10a4      	asrs	r4, r4, #2
 80072d6:	2600      	movs	r6, #0
 80072d8:	42a6      	cmp	r6, r4
 80072da:	d109      	bne.n	80072f0 <__libc_init_array+0x24>
 80072dc:	4d0b      	ldr	r5, [pc, #44]	; (800730c <__libc_init_array+0x40>)
 80072de:	4c0c      	ldr	r4, [pc, #48]	; (8007310 <__libc_init_array+0x44>)
 80072e0:	f000 f8f2 	bl	80074c8 <_init>
 80072e4:	1b64      	subs	r4, r4, r5
 80072e6:	10a4      	asrs	r4, r4, #2
 80072e8:	2600      	movs	r6, #0
 80072ea:	42a6      	cmp	r6, r4
 80072ec:	d105      	bne.n	80072fa <__libc_init_array+0x2e>
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f4:	4798      	blx	r3
 80072f6:	3601      	adds	r6, #1
 80072f8:	e7ee      	b.n	80072d8 <__libc_init_array+0xc>
 80072fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fe:	4798      	blx	r3
 8007300:	3601      	adds	r6, #1
 8007302:	e7f2      	b.n	80072ea <__libc_init_array+0x1e>
 8007304:	08007644 	.word	0x08007644
 8007308:	08007644 	.word	0x08007644
 800730c:	08007644 	.word	0x08007644
 8007310:	08007648 	.word	0x08007648

08007314 <__retarget_lock_acquire_recursive>:
 8007314:	4770      	bx	lr

08007316 <__retarget_lock_release_recursive>:
 8007316:	4770      	bx	lr

08007318 <memcpy>:
 8007318:	440a      	add	r2, r1
 800731a:	4291      	cmp	r1, r2
 800731c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007320:	d100      	bne.n	8007324 <memcpy+0xc>
 8007322:	4770      	bx	lr
 8007324:	b510      	push	{r4, lr}
 8007326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800732e:	4291      	cmp	r1, r2
 8007330:	d1f9      	bne.n	8007326 <memcpy+0xe>
 8007332:	bd10      	pop	{r4, pc}

08007334 <memset>:
 8007334:	4402      	add	r2, r0
 8007336:	4603      	mov	r3, r0
 8007338:	4293      	cmp	r3, r2
 800733a:	d100      	bne.n	800733e <memset+0xa>
 800733c:	4770      	bx	lr
 800733e:	f803 1b01 	strb.w	r1, [r3], #1
 8007342:	e7f9      	b.n	8007338 <memset+0x4>

08007344 <cleanup_glue>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	460c      	mov	r4, r1
 8007348:	6809      	ldr	r1, [r1, #0]
 800734a:	4605      	mov	r5, r0
 800734c:	b109      	cbz	r1, 8007352 <cleanup_glue+0xe>
 800734e:	f7ff fff9 	bl	8007344 <cleanup_glue>
 8007352:	4621      	mov	r1, r4
 8007354:	4628      	mov	r0, r5
 8007356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800735a:	f000 b869 	b.w	8007430 <_free_r>
	...

08007360 <_reclaim_reent>:
 8007360:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <_reclaim_reent+0xb4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4283      	cmp	r3, r0
 8007366:	b570      	push	{r4, r5, r6, lr}
 8007368:	4604      	mov	r4, r0
 800736a:	d051      	beq.n	8007410 <_reclaim_reent+0xb0>
 800736c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800736e:	b143      	cbz	r3, 8007382 <_reclaim_reent+0x22>
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d14a      	bne.n	800740c <_reclaim_reent+0xac>
 8007376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007378:	6819      	ldr	r1, [r3, #0]
 800737a:	b111      	cbz	r1, 8007382 <_reclaim_reent+0x22>
 800737c:	4620      	mov	r0, r4
 800737e:	f000 f857 	bl	8007430 <_free_r>
 8007382:	6961      	ldr	r1, [r4, #20]
 8007384:	b111      	cbz	r1, 800738c <_reclaim_reent+0x2c>
 8007386:	4620      	mov	r0, r4
 8007388:	f000 f852 	bl	8007430 <_free_r>
 800738c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800738e:	b111      	cbz	r1, 8007396 <_reclaim_reent+0x36>
 8007390:	4620      	mov	r0, r4
 8007392:	f000 f84d 	bl	8007430 <_free_r>
 8007396:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007398:	b111      	cbz	r1, 80073a0 <_reclaim_reent+0x40>
 800739a:	4620      	mov	r0, r4
 800739c:	f000 f848 	bl	8007430 <_free_r>
 80073a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80073a2:	b111      	cbz	r1, 80073aa <_reclaim_reent+0x4a>
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 f843 	bl	8007430 <_free_r>
 80073aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80073ac:	b111      	cbz	r1, 80073b4 <_reclaim_reent+0x54>
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f83e 	bl	8007430 <_free_r>
 80073b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80073b6:	b111      	cbz	r1, 80073be <_reclaim_reent+0x5e>
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 f839 	bl	8007430 <_free_r>
 80073be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80073c0:	b111      	cbz	r1, 80073c8 <_reclaim_reent+0x68>
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 f834 	bl	8007430 <_free_r>
 80073c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ca:	b111      	cbz	r1, 80073d2 <_reclaim_reent+0x72>
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 f82f 	bl	8007430 <_free_r>
 80073d2:	69a3      	ldr	r3, [r4, #24]
 80073d4:	b1e3      	cbz	r3, 8007410 <_reclaim_reent+0xb0>
 80073d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073d8:	4620      	mov	r0, r4
 80073da:	4798      	blx	r3
 80073dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80073de:	b1b9      	cbz	r1, 8007410 <_reclaim_reent+0xb0>
 80073e0:	4620      	mov	r0, r4
 80073e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073e6:	f7ff bfad 	b.w	8007344 <cleanup_glue>
 80073ea:	5949      	ldr	r1, [r1, r5]
 80073ec:	b941      	cbnz	r1, 8007400 <_reclaim_reent+0xa0>
 80073ee:	3504      	adds	r5, #4
 80073f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073f2:	2d80      	cmp	r5, #128	; 0x80
 80073f4:	68d9      	ldr	r1, [r3, #12]
 80073f6:	d1f8      	bne.n	80073ea <_reclaim_reent+0x8a>
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 f819 	bl	8007430 <_free_r>
 80073fe:	e7ba      	b.n	8007376 <_reclaim_reent+0x16>
 8007400:	680e      	ldr	r6, [r1, #0]
 8007402:	4620      	mov	r0, r4
 8007404:	f000 f814 	bl	8007430 <_free_r>
 8007408:	4631      	mov	r1, r6
 800740a:	e7ef      	b.n	80073ec <_reclaim_reent+0x8c>
 800740c:	2500      	movs	r5, #0
 800740e:	e7ef      	b.n	80073f0 <_reclaim_reent+0x90>
 8007410:	bd70      	pop	{r4, r5, r6, pc}
 8007412:	bf00      	nop
 8007414:	20000010 	.word	0x20000010

08007418 <__malloc_lock>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__malloc_lock+0x8>)
 800741a:	f7ff bf7b 	b.w	8007314 <__retarget_lock_acquire_recursive>
 800741e:	bf00      	nop
 8007420:	20004bd4 	.word	0x20004bd4

08007424 <__malloc_unlock>:
 8007424:	4801      	ldr	r0, [pc, #4]	; (800742c <__malloc_unlock+0x8>)
 8007426:	f7ff bf76 	b.w	8007316 <__retarget_lock_release_recursive>
 800742a:	bf00      	nop
 800742c:	20004bd4 	.word	0x20004bd4

08007430 <_free_r>:
 8007430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007432:	2900      	cmp	r1, #0
 8007434:	d044      	beq.n	80074c0 <_free_r+0x90>
 8007436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800743a:	9001      	str	r0, [sp, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f1a1 0404 	sub.w	r4, r1, #4
 8007442:	bfb8      	it	lt
 8007444:	18e4      	addlt	r4, r4, r3
 8007446:	f7ff ffe7 	bl	8007418 <__malloc_lock>
 800744a:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <_free_r+0x94>)
 800744c:	9801      	ldr	r0, [sp, #4]
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	b933      	cbnz	r3, 8007460 <_free_r+0x30>
 8007452:	6063      	str	r3, [r4, #4]
 8007454:	6014      	str	r4, [r2, #0]
 8007456:	b003      	add	sp, #12
 8007458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800745c:	f7ff bfe2 	b.w	8007424 <__malloc_unlock>
 8007460:	42a3      	cmp	r3, r4
 8007462:	d908      	bls.n	8007476 <_free_r+0x46>
 8007464:	6825      	ldr	r5, [r4, #0]
 8007466:	1961      	adds	r1, r4, r5
 8007468:	428b      	cmp	r3, r1
 800746a:	bf01      	itttt	eq
 800746c:	6819      	ldreq	r1, [r3, #0]
 800746e:	685b      	ldreq	r3, [r3, #4]
 8007470:	1949      	addeq	r1, r1, r5
 8007472:	6021      	streq	r1, [r4, #0]
 8007474:	e7ed      	b.n	8007452 <_free_r+0x22>
 8007476:	461a      	mov	r2, r3
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	b10b      	cbz	r3, 8007480 <_free_r+0x50>
 800747c:	42a3      	cmp	r3, r4
 800747e:	d9fa      	bls.n	8007476 <_free_r+0x46>
 8007480:	6811      	ldr	r1, [r2, #0]
 8007482:	1855      	adds	r5, r2, r1
 8007484:	42a5      	cmp	r5, r4
 8007486:	d10b      	bne.n	80074a0 <_free_r+0x70>
 8007488:	6824      	ldr	r4, [r4, #0]
 800748a:	4421      	add	r1, r4
 800748c:	1854      	adds	r4, r2, r1
 800748e:	42a3      	cmp	r3, r4
 8007490:	6011      	str	r1, [r2, #0]
 8007492:	d1e0      	bne.n	8007456 <_free_r+0x26>
 8007494:	681c      	ldr	r4, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	6053      	str	r3, [r2, #4]
 800749a:	4421      	add	r1, r4
 800749c:	6011      	str	r1, [r2, #0]
 800749e:	e7da      	b.n	8007456 <_free_r+0x26>
 80074a0:	d902      	bls.n	80074a8 <_free_r+0x78>
 80074a2:	230c      	movs	r3, #12
 80074a4:	6003      	str	r3, [r0, #0]
 80074a6:	e7d6      	b.n	8007456 <_free_r+0x26>
 80074a8:	6825      	ldr	r5, [r4, #0]
 80074aa:	1961      	adds	r1, r4, r5
 80074ac:	428b      	cmp	r3, r1
 80074ae:	bf04      	itt	eq
 80074b0:	6819      	ldreq	r1, [r3, #0]
 80074b2:	685b      	ldreq	r3, [r3, #4]
 80074b4:	6063      	str	r3, [r4, #4]
 80074b6:	bf04      	itt	eq
 80074b8:	1949      	addeq	r1, r1, r5
 80074ba:	6021      	streq	r1, [r4, #0]
 80074bc:	6054      	str	r4, [r2, #4]
 80074be:	e7ca      	b.n	8007456 <_free_r+0x26>
 80074c0:	b003      	add	sp, #12
 80074c2:	bd30      	pop	{r4, r5, pc}
 80074c4:	20004bd8 	.word	0x20004bd8

080074c8 <_init>:
 80074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ca:	bf00      	nop
 80074cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ce:	bc08      	pop	{r3}
 80074d0:	469e      	mov	lr, r3
 80074d2:	4770      	bx	lr

080074d4 <_fini>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	bf00      	nop
 80074d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074da:	bc08      	pop	{r3}
 80074dc:	469e      	mov	lr, r3
 80074de:	4770      	bx	lr
