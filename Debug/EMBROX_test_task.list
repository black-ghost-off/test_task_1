
EMBROX_test_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008698  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080089f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b7c  20000074  08008a64  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bf0  08008a64  00024bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be6d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003858  00000000  00000000  0003bf11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003f770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00040d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a87  00000000  00000000  00042258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d4b  00000000  00000000  00045cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3294  00000000  00000000  0005ea2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101cbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006370  00000000  00000000  00101d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008820 	.word	0x08008820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008820 	.word	0x08008820

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba4:	f000 fd82 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba8:	f000 f84c 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bac:	f000 f9ac 	bl	8000f08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bb0:	f000 f90a 	bl	8000dc8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000bb4:	f000 f8b6 	bl	8000d24 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000bb8:	f000 f97c 	bl	8000eb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  defaultTaskHandle 		= osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <main+0x70>)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4814      	ldr	r0, [pc, #80]	; (8000c14 <main+0x74>)
 8000bc2:	f004 fbf3 	bl	80053ac <osThreadNew>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <main+0x78>)
 8000bca:	6013      	str	r3, [r2, #0]
  motorControllerHandle 	= osThreadNew(StartTaskMotorController, NULL, &motorController_attributes);
 8000bcc:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <main+0x7c>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4813      	ldr	r0, [pc, #76]	; (8000c20 <main+0x80>)
 8000bd2:	f004 fbeb 	bl	80053ac <osThreadNew>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <main+0x84>)
 8000bda:	6013      	str	r3, [r2, #0]
  UARTControllerHandle 		= osThreadNew(StartTaskUARTController, NULL, &UARTController_attributes);
 8000bdc:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <main+0x88>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <main+0x8c>)
 8000be2:	f004 fbe3 	bl	80053ac <osThreadNew>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <main+0x90>)
 8000bea:	6013      	str	r3, [r2, #0]
  buttonControlleHandle 		= osThreadNew(StartTaskButtonController, NULL, &buttonControlle_attributes);
 8000bec:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <main+0x94>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <main+0x98>)
 8000bf2:	f004 fbdb 	bl	80053ac <osThreadNew>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <main+0x9c>)
 8000bfa:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOA, direction_pin, GPIO_PIN_SET);		// set direction
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2110      	movs	r1, #16
 8000c00:	480f      	ldr	r0, [pc, #60]	; (8000c40 <main+0xa0>)
 8000c02:	f001 fdbf 	bl	8002784 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c06:	f004 fb87 	bl	8005318 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000c0a:	f004 fba9 	bl	8005360 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <main+0x6e>
 8000c10:	080088a4 	.word	0x080088a4
 8000c14:	08001021 	.word	0x08001021
 8000c18:	20000164 	.word	0x20000164
 8000c1c:	080088c8 	.word	0x080088c8
 8000c20:	08001031 	.word	0x08001031
 8000c24:	20000168 	.word	0x20000168
 8000c28:	080088ec 	.word	0x080088ec
 8000c2c:	080010c9 	.word	0x080010c9
 8000c30:	2000016c 	.word	0x2000016c
 8000c34:	08008910 	.word	0x08008910
 8000c38:	080011bd 	.word	0x080011bd
 8000c3c:	20000170 	.word	0x20000170
 8000c40:	40020000 	.word	0x40020000

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	; 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2230      	movs	r2, #48	; 0x30
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f007 f914 	bl	8007e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <SystemClock_Config+0xd8>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a2a      	ldr	r2, [pc, #168]	; (8000d1c <SystemClock_Config+0xd8>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <SystemClock_Config+0xd8>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <SystemClock_Config+0xdc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c90:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <SystemClock_Config+0xdc>)
 8000c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <SystemClock_Config+0xdc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cac:	2310      	movs	r3, #16
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000cbc:	2348      	movs	r3, #72	; 0x48
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fd73 	bl	80027b8 <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cd8:	f000 faaa 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
 8000cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 ffd5 	bl	8002ca8 <HAL_RCC_ClockConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d04:	f000 fa94 	bl	8001230 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f002 f8b1 	bl	8002e74 <HAL_RCC_MCOConfig>
}
 8000d12:	bf00      	nop
 8000d14:	3750      	adds	r7, #80	; 0x50
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40007000 	.word	0x40007000

08000d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <MX_ADC1_Init+0xa0>)
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d84:	f000 fcd4 	bl	8001730 <HAL_ADC_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 fa4f 	bl	8001230 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d92:	2307      	movs	r3, #7
 8000d94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000da4:	f000 ffb6 	bl	8001d14 <HAL_ADC_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dae:	f000 fa3f 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000090 	.word	0x20000090
 8000dc0:	40012000 	.word	0x40012000
 8000dc4:	0f000001 	.word	0x0f000001

08000dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08e      	sub	sp, #56	; 0x38
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000dfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e20:	4823      	ldr	r0, [pc, #140]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e22:	f002 f9bb 	bl	800319c <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e2c:	f000 fa00 	bl	8001230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481c      	ldr	r0, [pc, #112]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e3e:	f002 fd33 	bl	80038a8 <HAL_TIM_ConfigClockSource>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e48:	f000 f9f2 	bl	8001230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e4e:	f002 fa57 	bl	8003300 <HAL_TIM_PWM_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e58:	f000 f9ea 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e6c:	f003 f8d8 	bl	8004020 <HAL_TIMEx_MasterConfigSynchronization>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e76:	f000 f9db 	bl	8001230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2360      	movs	r3, #96	; 0x60
 8000e7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000e92:	f002 fc47 	bl	8003724 <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e9c:	f000 f9c8 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM2_Init+0xe8>)
 8000ea2:	f000 fa63 	bl	800136c <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3738      	adds	r7, #56	; 0x38
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000d8 	.word	0x200000d8

08000eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_USART2_UART_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eec:	f003 f91a 	bl	8004124 <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f99b 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000120 	.word	0x20000120
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a2d      	ldr	r2, [pc, #180]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2110      	movs	r1, #16
 8000f76:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <MX_GPIO_Init+0xd8>)
 8000f78:	f001 fc04 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <MX_GPIO_Init+0xd8>)
 8000f94:	f001 fa5a 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <MX_GPIO_Init+0xd8>)
 8000fb6:	f001 fa49 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fba:	2340      	movs	r3, #64	; 0x40
 8000fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_GPIO_Init+0xdc>)
 8000fce:	f001 fa3d 	bl	800244c <HAL_GPIO_Init>

}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <map>:

/* USER CODE BEGIN 4 */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	69b9      	ldr	r1, [r7, #24]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	1a8a      	subs	r2, r1, r2
 8001002:	fb03 f202 	mul.w	r2, r3, r2
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1acb      	subs	r3, r1, r3
 800100c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	4413      	add	r3, r2
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f004 fa51 	bl	80054d0 <osDelay>
 800102e:	e7fb      	b.n	8001028 <StartDefaultTask+0x8>

08001030 <StartTaskMotorController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorController */
void StartTaskMotorController(void *argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorController */
  /* Infinite loop */
	for(;;)
	{
		HAL_ADC_Start(&hadc1); // start the adc
 8001038:	481e      	ldr	r0, [pc, #120]	; (80010b4 <StartTaskMotorController+0x84>)
 800103a:	f000 fbbd 	bl	80017b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 800103e:	2164      	movs	r1, #100	; 0x64
 8001040:	481c      	ldr	r0, [pc, #112]	; (80010b4 <StartTaskMotorController+0x84>)
 8001042:	f000 fca0 	bl	8001986 <HAL_ADC_PollForConversion>

		uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001046:	481b      	ldr	r0, [pc, #108]	; (80010b4 <StartTaskMotorController+0x84>)
 8001048:	f000 fe38 	bl	8001cbc <HAL_ADC_GetValue>
 800104c:	4603      	mov	r3, r0
 800104e:	81fb      	strh	r3, [r7, #14]

		HAL_ADC_Stop(&hadc1); // stop adc
 8001050:	4818      	ldr	r0, [pc, #96]	; (80010b4 <StartTaskMotorController+0x84>)
 8001052:	f000 fc65 	bl	8001920 <HAL_ADC_Stop>
		if(buttonStatus == GPIO_PIN_SET){
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <StartTaskMotorController+0x88>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d110      	bne.n	8001080 <StartTaskMotorController+0x50>
		  if(adc_val >= motorSpeed) motorSpeed++;
 800105e:	89fa      	ldrh	r2, [r7, #14]
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <StartTaskMotorController+0x8c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	429a      	cmp	r2, r3
 8001066:	db05      	blt.n	8001074 <StartTaskMotorController+0x44>
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <StartTaskMotorController+0x8c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <StartTaskMotorController+0x8c>)
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e011      	b.n	8001098 <StartTaskMotorController+0x68>
		  else motorSpeed--;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <StartTaskMotorController+0x8c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <StartTaskMotorController+0x8c>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e00b      	b.n	8001098 <StartTaskMotorController+0x68>
		}
		else{
		  motorSpeed--;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <StartTaskMotorController+0x8c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <StartTaskMotorController+0x8c>)
 8001088:	6013      	str	r3, [r2, #0]
		  if(motorSpeed < 0) motorSpeed = 0;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <StartTaskMotorController+0x8c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	da02      	bge.n	8001098 <StartTaskMotorController+0x68>
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <StartTaskMotorController+0x8c>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
		}
		TIM2->CCR1 = motorSpeed;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <StartTaskMotorController+0x8c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010a2:	2100      	movs	r1, #0
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <StartTaskMotorController+0x90>)
 80010a6:	f002 f985 	bl	80033b4 <HAL_TIM_PWM_Start>
		osDelay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f004 fa10 	bl	80054d0 <osDelay>
	{
 80010b0:	e7c2      	b.n	8001038 <StartTaskMotorController+0x8>
 80010b2:	bf00      	nop
 80010b4:	20000090 	.word	0x20000090
 80010b8:	20000174 	.word	0x20000174
 80010bc:	20000178 	.word	0x20000178
 80010c0:	200000d8 	.word	0x200000d8
 80010c4:	00000000 	.word	0x00000000

080010c8 <StartTaskUARTController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUARTController */
void StartTaskUARTController(void *argument)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUARTController */
  /* Infinite loop */
  uint8_t RX_data[1];
  for(;;)
  {
    osDelay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f004 f9fd 	bl	80054d0 <osDelay>
    HAL_StatusTypeDef status_receive = HAL_UART_Receive(&huart2, RX_data, 1, 100);
 80010d6:	f107 011c 	add.w	r1, r7, #28
 80010da:	2364      	movs	r3, #100	; 0x64
 80010dc:	2201      	movs	r2, #1
 80010de:	4832      	ldr	r0, [pc, #200]	; (80011a8 <StartTaskUARTController+0xe0>)
 80010e0:	f003 f8ff 	bl	80042e2 <HAL_UART_Receive>
 80010e4:	4603      	mov	r3, r0
 80010e6:	77fb      	strb	r3, [r7, #31]
    if(status_receive == HAL_OK){
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10c      	bne.n	8001108 <StartTaskUARTController+0x40>
    	if(RX_data[0] == '0') speedFormat = MILES_PER_HOUR;
 80010ee:	7f3b      	ldrb	r3, [r7, #28]
 80010f0:	2b30      	cmp	r3, #48	; 0x30
 80010f2:	d103      	bne.n	80010fc <StartTaskUARTController+0x34>
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <StartTaskUARTController+0xe4>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e005      	b.n	8001108 <StartTaskUARTController+0x40>
    	else if(RX_data[0] == '1') speedFormat = KM_PER_HOUR;
 80010fc:	7f3b      	ldrb	r3, [r7, #28]
 80010fe:	2b31      	cmp	r3, #49	; 0x31
 8001100:	d102      	bne.n	8001108 <StartTaskUARTController+0x40>
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <StartTaskUARTController+0xe4>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
    	else;

    }
    char output_buffer[15]; //Data to send
    memset(output_buffer, 0, sizeof(output_buffer));
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	220f      	movs	r2, #15
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f006 feb5 	bl	8007e80 <memset>
    if(speedFormat == KM_PER_HOUR) 				sprintf(output_buffer, "%d km/h\n\r", (int) (map(motorSpeed, 0, 4095, 0, 120)));
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <StartTaskUARTController+0xe4>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d111      	bne.n	8001142 <StartTaskUARTController+0x7a>
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <StartTaskUARTController+0xe8>)
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	2378      	movs	r3, #120	; 0x78
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	f640 72ff 	movw	r2, #4095	; 0xfff
 800112c:	2100      	movs	r1, #0
 800112e:	f7ff ff5b 	bl	8000fe8 <map>
 8001132:	4602      	mov	r2, r0
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	491e      	ldr	r1, [pc, #120]	; (80011b4 <StartTaskUARTController+0xec>)
 800113a:	4618      	mov	r0, r3
 800113c:	f006 ffb6 	bl	80080ac <siprintf>
 8001140:	e023      	b.n	800118a <StartTaskUARTController+0xc2>
    else if(speedFormat == MILES_PER_HOUR)		sprintf(output_buffer, "%d mph\n\r",  (int) (map(motorSpeed, 0, 4095, 0, 120) * 0.62) );
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <StartTaskUARTController+0xe4>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d11f      	bne.n	800118a <StartTaskUARTController+0xc2>
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <StartTaskUARTController+0xe8>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	2378      	movs	r3, #120	; 0x78
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001158:	2100      	movs	r1, #0
 800115a:	f7ff ff45 	bl	8000fe8 <map>
 800115e:	4603      	mov	r3, r0
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fb09 	bl	8000778 <__aeabi_i2d>
 8001166:	a30e      	add	r3, pc, #56	; (adr r3, 80011a0 <StartTaskUARTController+0xd8>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff f888 	bl	8000280 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fb68 	bl	800084c <__aeabi_d2iz>
 800117c:	4602      	mov	r2, r0
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <StartTaskUARTController+0xf0>)
 8001184:	4618      	mov	r0, r3
 8001186:	f006 ff91 	bl	80080ac <siprintf>
    HAL_UART_Transmit(&huart2,output_buffer,sizeof(output_buffer),10);// Sending in normal mode
 800118a:	f107 010c 	add.w	r1, r7, #12
 800118e:	230a      	movs	r3, #10
 8001190:	220f      	movs	r2, #15
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <StartTaskUARTController+0xe0>)
 8001194:	f003 f813 	bl	80041be <HAL_UART_Transmit>
  {
 8001198:	e79a      	b.n	80010d0 <StartTaskUARTController+0x8>
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	3d70a3d7 	.word	0x3d70a3d7
 80011a4:	3fe3d70a 	.word	0x3fe3d70a
 80011a8:	20000120 	.word	0x20000120
 80011ac:	2000017c 	.word	0x2000017c
 80011b0:	20000178 	.word	0x20000178
 80011b4:	08008874 	.word	0x08008874
 80011b8:	08008880 	.word	0x08008880

080011bc <StartTaskButtonController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskButtonController */
void StartTaskButtonController(void *argument)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskButtonController */
  /* Infinite loop */
	uint32_t timestamp_button_pressed;
	for(;;)
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 80011c4:	2140      	movs	r1, #64	; 0x40
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <StartTaskButtonController+0x48>)
 80011c8:	f001 fac4 	bl	8002754 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d110      	bne.n	80011f4 <StartTaskButtonController+0x38>
		{
			timestamp_button_pressed = HAL_GetTick();
 80011d2:	f000 faa1 	bl	8001718 <HAL_GetTick>
 80011d6:	60f8      	str	r0, [r7, #12]
			osDelay(50);
 80011d8:	2032      	movs	r0, #50	; 0x32
 80011da:	f004 f979 	bl	80054d0 <osDelay>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <StartTaskButtonController+0x48>)
 80011e2:	f001 fab7 	bl	8002754 <HAL_GPIO_ReadPin>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d106      	bne.n	80011fa <StartTaskButtonController+0x3e>
				buttonStatus = GPIO_PIN_SET;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <StartTaskButtonController+0x4c>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e002      	b.n	80011fa <StartTaskButtonController+0x3e>
			}
		}
		else{
			buttonStatus = GPIO_PIN_RESET;
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <StartTaskButtonController+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
		}

		osDelay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f004 f968 	bl	80054d0 <osDelay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 8001200:	e7e0      	b.n	80011c4 <StartTaskButtonController+0x8>
 8001202:	bf00      	nop
 8001204:	40020400 	.word	0x40020400
 8001208:	20000174 	.word	0x20000174

0800120c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800121e:	f000 fa67 	bl	80016f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40010000 	.word	0x40010000

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	e7fe      	b.n	8001238 <Error_Handler+0x8>
	...

0800123c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_MspInit+0x54>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_MspInit+0x54>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_MspInit+0x54>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_MspInit+0x54>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_MspInit+0x54>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_MspInit+0x54>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	210f      	movs	r1, #15
 800127e:	f06f 0001 	mvn.w	r0, #1
 8001282:	f001 f827 	bl	80022d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_ADC_MspInit+0x8c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d12f      	bne.n	8001316 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_ADC_MspInit+0x90>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a19      	ldr	r2, [pc, #100]	; (8001324 <HAL_ADC_MspInit+0x90>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_ADC_MspInit+0x90>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_ADC_MspInit+0x90>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_ADC_MspInit+0x90>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_ADC_MspInit+0x90>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f2:	2303      	movs	r3, #3
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <HAL_ADC_MspInit+0x94>)
 8001302:	f001 f8a3 	bl	800244c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2105      	movs	r1, #5
 800130a:	2012      	movs	r0, #18
 800130c:	f000 ffe2 	bl	80022d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001310:	2012      	movs	r0, #18
 8001312:	f000 fffb 	bl	800230c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40012000 	.word	0x40012000
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133c:	d10d      	bne.n	800135a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800138c:	d11d      	bne.n	80013ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_TIM_MspPostInit+0x68>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_TIM_MspPostInit+0x68>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_TIM_MspPostInit+0x68>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013aa:	2320      	movs	r3, #32
 80013ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <HAL_TIM_MspPostInit+0x6c>)
 80013c6:	f001 f841 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <HAL_UART_MspInit+0x94>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d133      	bne.n	8001466 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <HAL_UART_MspInit+0x98>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_UART_MspInit+0x98>)
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_UART_MspInit+0x98>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_UART_MspInit+0x98>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <HAL_UART_MspInit+0x98>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_UART_MspInit+0x98>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001436:	230c      	movs	r3, #12
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001446:	2307      	movs	r3, #7
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <HAL_UART_MspInit+0x9c>)
 8001452:	f000 fffb 	bl	800244c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2105      	movs	r1, #5
 800145a:	2026      	movs	r0, #38	; 0x26
 800145c:	f000 ff3a 	bl	80022d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001460:	2026      	movs	r0, #38	; 0x26
 8001462:	f000 ff53 	bl	800230c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004400 	.word	0x40004400
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000

0800147c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_InitTick+0xd0>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	4a2d      	ldr	r2, [pc, #180]	; (800154c <HAL_InitTick+0xd0>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6453      	str	r3, [r2, #68]	; 0x44
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <HAL_InitTick+0xd0>)
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a8:	f107 020c 	add.w	r2, r7, #12
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 fe40 	bl	8003138 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014b8:	f001 fe2a 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 80014bc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <HAL_InitTick+0xd4>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0c9b      	lsrs	r3, r3, #18
 80014c8:	3b01      	subs	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_InitTick+0xd8>)
 80014ce:	4a22      	ldr	r2, [pc, #136]	; (8001558 <HAL_InitTick+0xdc>)
 80014d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_InitTick+0xd8>)
 80014d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_InitTick+0xd8>)
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_InitTick+0xd8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_InitTick+0xd8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_InitTick+0xd8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014f2:	4818      	ldr	r0, [pc, #96]	; (8001554 <HAL_InitTick+0xd8>)
 80014f4:	f001 fe52 	bl	800319c <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11b      	bne.n	800153e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001506:	4813      	ldr	r0, [pc, #76]	; (8001554 <HAL_InitTick+0xd8>)
 8001508:	f001 fe98 	bl	800323c <HAL_TIM_Base_Start_IT>
 800150c:	4603      	mov	r3, r0
 800150e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001516:	2b00      	cmp	r3, #0
 8001518:	d111      	bne.n	800153e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800151a:	2019      	movs	r0, #25
 800151c:	f000 fef6 	bl	800230c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d808      	bhi.n	8001538 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001526:	2200      	movs	r2, #0
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	2019      	movs	r0, #25
 800152c:	f000 fed2 	bl	80022d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_InitTick+0xe0>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e002      	b.n	800153e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800153e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001542:	4618      	mov	r0, r3
 8001544:	3730      	adds	r7, #48	; 0x30
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	431bde83 	.word	0x431bde83
 8001554:	20000180 	.word	0x20000180
 8001558:	40010000 	.word	0x40010000
 800155c:	20000004 	.word	0x20000004

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <ADC_IRQHandler+0x10>)
 8001592:	f000 fa83 	bl	8001a9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000090 	.word	0x20000090

080015a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015a6:	f001 ffb5 	bl	8003514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000180 	.word	0x20000180

080015b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <USART2_IRQHandler+0x10>)
 80015ba:	f002 ff35 	bl	8004428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000120 	.word	0x20000120

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f006 fc08 	bl	8007e0c <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20010000 	.word	0x20010000
 8001628:	00000400 	.word	0x00000400
 800162c:	200001c8 	.word	0x200001c8
 8001630:	20004bf0 	.word	0x20004bf0

08001634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <SystemInit+0x20>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <SystemInit+0x20>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165e:	490e      	ldr	r1, [pc, #56]	; (8001698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001674:	4c0b      	ldr	r4, [pc, #44]	; (80016a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001682:	f7ff ffd7 	bl	8001634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f006 fbc7 	bl	8007e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168a:	f7ff fa89 	bl	8000ba0 <main>
  bx  lr    
 800168e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001690:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800169c:	080089f0 	.word	0x080089f0
  ldr r2, =_sbss
 80016a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016a4:	20004bf0 	.word	0x20004bf0

080016a8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <DMA1_Stream0_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_Init+0x40>)
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_Init+0x40>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_Init+0x40>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 fdf2 	bl	80022be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	200f      	movs	r0, #15
 80016dc:	f7ff fece 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fdac 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x20>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x24>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_IncTick+0x24>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000008 	.word	0x20000008
 8001714:	200001cc 	.word	0x200001cc

08001718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_GetTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200001cc 	.word	0x200001cc

08001730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e033      	b.n	80017ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fda0 	bl	8001294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001776:	f023 0302 	bic.w	r3, r3, #2
 800177a:	f043 0202 	orr.w	r2, r3, #2
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fbe8 	bl	8001f58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
 800179e:	e001      	b.n	80017a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Start+0x1a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e097      	b.n	8001902 <HAL_ADC_Start+0x14a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d018      	beq.n	800181a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017f8:	4b45      	ldr	r3, [pc, #276]	; (8001910 <HAL_ADC_Start+0x158>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a45      	ldr	r2, [pc, #276]	; (8001914 <HAL_ADC_Start+0x15c>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	0c9a      	lsrs	r2, r3, #18
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800180c:	e002      	b.n	8001814 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3b01      	subs	r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f9      	bne.n	800180e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d15f      	bne.n	80018e8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001852:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001866:	d106      	bne.n	8001876 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	f023 0206 	bic.w	r2, r3, #6
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
 8001874:	e002      	b.n	800187c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_ADC_Start+0x160>)
 8001886:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001890:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d129      	bne.n	8001900 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	e020      	b.n	8001900 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a16      	ldr	r2, [pc, #88]	; (800191c <HAL_ADC_Start+0x164>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d11b      	bne.n	8001900 <HAL_ADC_Start+0x148>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d114      	bne.n	8001900 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	e00b      	b.n	8001900 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f043 0210 	orr.w	r2, r3, #16
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000000 	.word	0x20000000
 8001914:	431bde83 	.word	0x431bde83
 8001918:	40012300 	.word	0x40012300
 800191c:	40012000 	.word	0x40012000

08001920 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Stop+0x16>
 8001932:	2302      	movs	r3, #2
 8001934:	e021      	b.n	800197a <HAL_ADC_Stop+0x5a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d109      	bne.n	8001970 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a2:	d113      	bne.n	80019cc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b2:	d10b      	bne.n	80019cc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f043 0220 	orr.w	r2, r3, #32
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e063      	b.n	8001a94 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019cc:	f7ff fea4 	bl	8001718 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019d2:	e021      	b.n	8001a18 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019da:	d01d      	beq.n	8001a18 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x6c>
 80019e2:	f7ff fe99 	bl	8001718 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d212      	bcs.n	8001a18 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d00b      	beq.n	8001a18 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f043 0204 	orr.w	r2, r3, #4
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e03d      	b.n	8001a94 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d1d6      	bne.n	80019d4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f06f 0212 	mvn.w	r2, #18
 8001a2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d123      	bne.n	8001a92 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d11f      	bne.n	8001a92 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d111      	bne.n	8001a92 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f043 0201 	orr.w	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d049      	beq.n	8001b66 <HAL_ADC_IRQHandler+0xca>
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d046      	beq.n	8001b66 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d12b      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d127      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d119      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0220 	bic.w	r2, r2, #32
 8001b30:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8bd 	bl	8001cd6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0212 	mvn.w	r2, #18
 8001b64:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b74:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d057      	beq.n	8001c2c <HAL_ADC_IRQHandler+0x190>
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d054      	beq.n	8001c2c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d139      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d12b      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d124      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d11d      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d119      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa97 	bl	8002150 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f06f 020c 	mvn.w	r2, #12
 8001c2a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d017      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x1d6>
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d014      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10d      	bne.n	8001c72 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f841 	bl	8001cea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0201 	mvn.w	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c80:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x218>
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f06f 0220 	mvn.w	r2, #32
 8001ca2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f82a 	bl	8001cfe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f06f 0220 	mvn.w	r2, #32
 8001cb2:	601a      	str	r2, [r3, #0]
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1c>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e105      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x228>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	d925      	bls.n	8001d8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68d9      	ldr	r1, [r3, #12]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	2207      	movs	r2, #7
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	400a      	ands	r2, r1
 8001d64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68d9      	ldr	r1, [r3, #12]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	4603      	mov	r3, r0
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4403      	add	r3, r0
 8001d7e:	3b1e      	subs	r3, #30
 8001d80:	409a      	lsls	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	e022      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6919      	ldr	r1, [r3, #16]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	2207      	movs	r2, #7
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	400a      	ands	r2, r1
 8001dae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6919      	ldr	r1, [r3, #16]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4403      	add	r3, r0
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d824      	bhi.n	8001e24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b05      	subs	r3, #5
 8001dec:	221f      	movs	r2, #31
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	400a      	ands	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b05      	subs	r3, #5
 8001e16:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
 8001e22:	e04c      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d824      	bhi.n	8001e76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b23      	subs	r3, #35	; 0x23
 8001e3e:	221f      	movs	r2, #31
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43da      	mvns	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b23      	subs	r3, #35	; 0x23
 8001e68:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
 8001e74:	e023      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b41      	subs	r3, #65	; 0x41
 8001e88:	221f      	movs	r2, #31
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	400a      	ands	r2, r1
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b41      	subs	r3, #65	; 0x41
 8001eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_ADC_ConfigChannel+0x234>)
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_ADC_ConfigChannel+0x238>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1cc>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b12      	cmp	r3, #18
 8001ed2:	d105      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <HAL_ADC_ConfigChannel+0x238>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d123      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x21e>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d003      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x1e6>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b11      	cmp	r3, #17
 8001ef8:	d11b      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d111      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_ADC_ConfigChannel+0x23c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <HAL_ADC_ConfigChannel+0x240>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	0c9a      	lsrs	r2, r3, #18
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f24:	e002      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f9      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40012300 	.word	0x40012300
 8001f4c:	40012000 	.word	0x40012000
 8001f50:	20000000 	.word	0x20000000
 8001f54:	431bde83 	.word	0x431bde83

08001f58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f60:	4b79      	ldr	r3, [pc, #484]	; (8002148 <ADC_Init+0x1f0>)
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	4a58      	ldr	r2, [pc, #352]	; (800214c <ADC_Init+0x1f4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d022      	beq.n	8002036 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ffe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6899      	ldr	r1, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002020:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6899      	ldr	r1, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	e00f      	b.n	8002056 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002054:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0202 	bic.w	r2, r2, #2
 8002064:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7e1b      	ldrb	r3, [r3, #24]
 8002070:	005a      	lsls	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01b      	beq.n	80020bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002092:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	3b01      	subs	r3, #1
 80020b0:	035a      	lsls	r2, r3, #13
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	e007      	b.n	80020cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	051a      	lsls	r2, r3, #20
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800210e:	025a      	lsls	r2, r3, #9
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6899      	ldr	r1, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	029a      	lsls	r2, r3, #10
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40012300 	.word	0x40012300
 800214c:	0f000001 	.word	0x0f000001

08002150 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4907      	ldr	r1, [pc, #28]	; (8002200 <__NVIC_EnableIRQ+0x38>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2001      	movs	r0, #1
 80021ea:	fa00 f202 	lsl.w	r2, r0, r2
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ff4c 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e6:	f7ff ff61 	bl	80021ac <__NVIC_GetPriorityGrouping>
 80022ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	6978      	ldr	r0, [r7, #20]
 80022f2:	f7ff ffb1 	bl	8002258 <NVIC_EncodePriority>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff80 	bl	8002204 <__NVIC_SetPriority>
}
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff54 	bl	80021c8 <__NVIC_EnableIRQ>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002336:	f7ff f9ef 	bl	8001718 <HAL_GetTick>
 800233a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d008      	beq.n	800235a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e052      	b.n	8002400 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0216 	bic.w	r2, r2, #22
 8002368:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002378:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_DMA_Abort+0x62>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0208 	bic.w	r2, r2, #8
 8002398:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023aa:	e013      	b.n	80023d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ac:	f7ff f9b4 	bl	8001718 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b05      	cmp	r3, #5
 80023b8:	d90c      	bls.n	80023d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2203      	movs	r2, #3
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e015      	b.n	8002400 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e4      	bne.n	80023ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	223f      	movs	r2, #63	; 0x3f
 80023e8:	409a      	lsls	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d004      	beq.n	8002426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e00c      	b.n	8002440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2205      	movs	r2, #5
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e159      	b.n	800271c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 8148 	bne.w	8002716 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d005      	beq.n	800249e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	2b02      	cmp	r3, #2
 800249c:	d130      	bne.n	8002500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 0201 	and.w	r2, r3, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b03      	cmp	r3, #3
 800250a:	d017      	beq.n	800253c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d123      	bne.n	8002590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a2 	beq.w	8002716 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b57      	ldr	r3, [pc, #348]	; (8002734 <HAL_GPIO_Init+0x2e8>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_GPIO_Init+0x2e8>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b54      	ldr	r3, [pc, #336]	; (8002734 <HAL_GPIO_Init+0x2e8>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ee:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_GPIO_Init+0x2ec>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a49      	ldr	r2, [pc, #292]	; (800273c <HAL_GPIO_Init+0x2f0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x202>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a48      	ldr	r2, [pc, #288]	; (8002740 <HAL_GPIO_Init+0x2f4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x1fe>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_GPIO_Init+0x2f8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x1fa>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a46      	ldr	r2, [pc, #280]	; (8002748 <HAL_GPIO_Init+0x2fc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x1f6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a45      	ldr	r2, [pc, #276]	; (800274c <HAL_GPIO_Init+0x300>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x1f2>
 800263a:	2304      	movs	r3, #4
 800263c:	e008      	b.n	8002650 <HAL_GPIO_Init+0x204>
 800263e:	2307      	movs	r3, #7
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x204>
 8002642:	2303      	movs	r3, #3
 8002644:	e004      	b.n	8002650 <HAL_GPIO_Init+0x204>
 8002646:	2302      	movs	r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x204>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x204>
 800264e:	2300      	movs	r3, #0
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4093      	lsls	r3, r2
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002660:	4935      	ldr	r1, [pc, #212]	; (8002738 <HAL_GPIO_Init+0x2ec>)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <HAL_GPIO_Init+0x304>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002692:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <HAL_GPIO_Init+0x304>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_GPIO_Init+0x304>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026bc:	4a24      	ldr	r2, [pc, #144]	; (8002750 <HAL_GPIO_Init+0x304>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_GPIO_Init+0x304>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e6:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <HAL_GPIO_Init+0x304>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ec:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_GPIO_Init+0x304>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_GPIO_Init+0x304>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b0f      	cmp	r3, #15
 8002720:	f67f aea2 	bls.w	8002468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	40013800 	.word	0x40013800
 800273c:	40020000 	.word	0x40020000
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40021000 	.word	0x40021000
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e001      	b.n	8002776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e267      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d075      	beq.n	80028c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00c      	beq.n	80027fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e2:	4b85      	ldr	r3, [pc, #532]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b82      	ldr	r3, [pc, #520]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x108>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d157      	bne.n	80028c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e242      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x74>
 800281e:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a75      	ldr	r2, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x98>
 8002836:	4b70      	ldr	r3, [pc, #448]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a6f      	ldr	r2, [pc, #444]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6c      	ldr	r2, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 8002850:	4b69      	ldr	r3, [pc, #420]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a68      	ldr	r2, [pc, #416]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b66      	ldr	r3, [pc, #408]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe ff52 	bl	8001718 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe ff4e 	bl	8001718 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e207      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xc0>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe ff3e 	bl	8001718 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe ff3a 	bl	8001718 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e1f3      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b51      	ldr	r3, [pc, #324]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0xe8>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ce:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028da:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11c      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e6:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1c7      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4937      	ldr	r1, [pc, #220]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e03a      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	4b34      	ldr	r3, [pc, #208]	; (80029fc <HAL_RCC_OscConfig+0x244>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fef3 	bl	8001718 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002936:	f7fe feef 	bl	8001718 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1a8      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4925      	ldr	r1, [pc, #148]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b24      	ldr	r3, [pc, #144]	; (80029fc <HAL_RCC_OscConfig+0x244>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fed2 	bl	8001718 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002978:	f7fe fece 	bl	8001718 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e187      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d036      	beq.n	8002a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe feb2 	bl	8001718 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b8:	f7fe feae 	bl	8001718 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e167      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x200>
 80029d6:	e01b      	b.n	8002a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7fe fe9b 	bl	8001718 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	e00e      	b.n	8002a04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe fe97 	bl	8001718 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d907      	bls.n	8002a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e150      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470000 	.word	0x42470000
 8002a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ea      	bne.n	80029e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8097 	beq.w	8002b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	4b7d      	ldr	r3, [pc, #500]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a7c      	ldr	r2, [pc, #496]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b77      	ldr	r3, [pc, #476]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	4b74      	ldr	r3, [pc, #464]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a73      	ldr	r2, [pc, #460]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7fe fe57 	bl	8001718 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe fe53 	bl	8001718 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e10c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2ea>
 8002a94:	4b64      	ldr	r3, [pc, #400]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a63      	ldr	r2, [pc, #396]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	e01c      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x30c>
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a5e      	ldr	r2, [pc, #376]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	4b5c      	ldr	r3, [pc, #368]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a5b      	ldr	r2, [pc, #364]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002ac4:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a57      	ldr	r2, [pc, #348]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	4b55      	ldr	r3, [pc, #340]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	4a54      	ldr	r2, [pc, #336]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	f023 0304 	bic.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fe18 	bl	8001718 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe fe14 	bl	8001718 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0cb      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ee      	beq.n	8002aec <HAL_RCC_OscConfig+0x334>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fe02 	bl	8001718 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe fdfe 	bl	8001718 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0b5      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ee      	bne.n	8002b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	4a38      	ldr	r2, [pc, #224]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a1 	beq.w	8002c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b56:	4b34      	ldr	r3, [pc, #208]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d05c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d141      	bne.n	8002bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fdd2 	bl	8001718 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fdce 	bl	8001718 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e087      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	491b      	ldr	r1, [pc, #108]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fda7 	bl	8001718 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe fda3 	bl	8001718 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e05c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x416>
 8002bec:	e054      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fd90 	bl	8001718 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fd8c 	bl	8001718 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e045      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x444>
 8002c1a:	e03d      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e038      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x4ec>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d028      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d121      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d11a      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d111      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0cc      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d90c      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b8      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	494d      	ldr	r1, [pc, #308]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d044      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d119      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e067      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fe fcbe 	bl	8001718 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe fcba 	bl	8001718 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e04f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d20c      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e032      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4916      	ldr	r1, [pc, #88]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2e:	f000 f889 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	490a      	ldr	r1, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	5ccb      	ldrb	r3, [r1, r3]
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fb14 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00
 8002e64:	40023800 	.word	0x40023800
 8002e68:	08008934 	.word	0x08008934
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	20000004 	.word	0x20000004

08002e74 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08c      	sub	sp, #48	; 0x30
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d129      	bne.n	8002eda <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eac:	2303      	movs	r3, #3
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	481f      	ldr	r0, [pc, #124]	; (8002f3c <HAL_RCC_MCOConfig+0xc8>)
 8002ec0:	f7ff fac4 	bl	800244c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	4919      	ldr	r1, [pc, #100]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002ed8:	e029      	b.n	8002f2e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	4619      	mov	r1, r3
 8002f12:	480b      	ldr	r0, [pc, #44]	; (8002f40 <HAL_RCC_MCOConfig+0xcc>)
 8002f14:	f7ff fa9a 	bl	800244c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002f18:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	00d9      	lsls	r1, r3, #3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	430b      	orrs	r3, r1
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_MCOConfig+0xc4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
}
 8002f2e:	bf00      	nop
 8002f30:	3730      	adds	r7, #48	; 0x30
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	40020800 	.word	0x40020800

08002f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f48:	b090      	sub	sp, #64	; 0x40
 8002f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f50:	2300      	movs	r3, #0
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f54:	2300      	movs	r3, #0
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d00d      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x40>
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	f200 80a1 	bhi.w	80030b0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x34>
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f76:	e09b      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f7c:	e09b      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f7e:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002f80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f82:	e098      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f84:	4b4f      	ldr	r3, [pc, #316]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8e:	4b4d      	ldr	r3, [pc, #308]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d028      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	627a      	str	r2, [r7, #36]	; 0x24
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fac:	2100      	movs	r1, #0
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb0:	fb03 f201 	mul.w	r2, r3, r1
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a43      	ldr	r2, [pc, #268]	; (80030cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fbe:	fba0 1202 	umull	r1, r2, r0, r2
 8002fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	4413      	add	r3, r2
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	61fa      	str	r2, [r7, #28]
 8002fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fde:	f7fd fc5d 	bl	800089c <__aeabi_uldivmod>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fea:	e053      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fec:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	617a      	str	r2, [r7, #20]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ffe:	f04f 0b00 	mov.w	fp, #0
 8003002:	4652      	mov	r2, sl
 8003004:	465b      	mov	r3, fp
 8003006:	f04f 0000 	mov.w	r0, #0
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	0159      	lsls	r1, r3, #5
 8003010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003014:	0150      	lsls	r0, r2, #5
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	ebb2 080a 	subs.w	r8, r2, sl
 800301e:	eb63 090b 	sbc.w	r9, r3, fp
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800302e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003032:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003036:	ebb2 0408 	subs.w	r4, r2, r8
 800303a:	eb63 0509 	sbc.w	r5, r3, r9
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	00eb      	lsls	r3, r5, #3
 8003048:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304c:	00e2      	lsls	r2, r4, #3
 800304e:	4614      	mov	r4, r2
 8003050:	461d      	mov	r5, r3
 8003052:	eb14 030a 	adds.w	r3, r4, sl
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	eb45 030b 	adc.w	r3, r5, fp
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	2200      	movs	r2, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	60fa      	str	r2, [r7, #12]
 8003084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003088:	f7fd fc08 	bl	800089c <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	3301      	adds	r3, #1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3740      	adds	r7, #64	; 0x40
 80030bc:	46bd      	mov	sp, r7
 80030be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	017d7840 	.word	0x017d7840

080030d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000000 	.word	0x20000000

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030ec:	f7ff fff0 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	08008944 	.word	0x08008944

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003114:	f7ff ffdc 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0b5b      	lsrs	r3, r3, #13
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	08008944 	.word	0x08008944

08003138 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	220f      	movs	r2, #15
 8003146:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_RCC_GetClockConfig+0x5c>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_RCC_GetClockConfig+0x5c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <HAL_RCC_GetClockConfig+0x5c>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_GetClockConfig+0x5c>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	08db      	lsrs	r3, r3, #3
 8003172:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <HAL_RCC_GetClockConfig+0x60>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0207 	and.w	r2, r3, #7
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	601a      	str	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	40023c00 	.word	0x40023c00

0800319c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e041      	b.n	8003232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe f8b2 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 fc54 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d001      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e044      	b.n	80032de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <HAL_TIM_Base_Start_IT+0xb0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d013      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x6c>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x6c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_TIM_Base_Start_IT+0xc0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d111      	bne.n	80032cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d010      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	e007      	b.n	80032dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40014000 	.word	0x40014000

08003300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e041      	b.n	8003396 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f839 	bl	800339e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 fba2 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_TIM_PWM_Start+0x24>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e022      	b.n	800341e <HAL_TIM_PWM_Start+0x6a>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d109      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x3e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	e015      	b.n	800341e <HAL_TIM_PWM_Start+0x6a>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d109      	bne.n	800340c <HAL_TIM_PWM_Start+0x58>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e008      	b.n	800341e <HAL_TIM_PWM_Start+0x6a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e068      	b.n	80034f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <HAL_TIM_PWM_Start+0x82>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	e013      	b.n	800345e <HAL_TIM_PWM_Start+0xaa>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d104      	bne.n	8003446 <HAL_TIM_PWM_Start+0x92>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003444:	e00b      	b.n	800345e <HAL_TIM_PWM_Start+0xaa>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d104      	bne.n	8003456 <HAL_TIM_PWM_Start+0xa2>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003454:	e003      	b.n	800345e <HAL_TIM_PWM_Start+0xaa>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2201      	movs	r2, #1
 8003464:	6839      	ldr	r1, [r7, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fdb4 	bl	8003fd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_TIM_PWM_Start+0x14c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d107      	bne.n	8003486 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_TIM_PWM_Start+0x14c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_TIM_PWM_Start+0x10e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d013      	beq.n	80034c2 <HAL_TIM_PWM_Start+0x10e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_TIM_PWM_Start+0x150>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_TIM_PWM_Start+0x10e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_TIM_PWM_Start+0x154>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_TIM_PWM_Start+0x10e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a16      	ldr	r2, [pc, #88]	; (800350c <HAL_TIM_PWM_Start+0x158>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_TIM_PWM_Start+0x10e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <HAL_TIM_PWM_Start+0x15c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d111      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b06      	cmp	r3, #6
 80034d2:	d010      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e4:	e007      	b.n	80034f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40010000 	.word	0x40010000
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	40000c00 	.word	0x40000c00
 8003510:	40014000 	.word	0x40014000

08003514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d122      	bne.n	8003570 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b02      	cmp	r3, #2
 8003536:	d11b      	bne.n	8003570 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0202 	mvn.w	r2, #2
 8003540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa77 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa69 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fa7a 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b04      	cmp	r3, #4
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0204 	mvn.w	r2, #4
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fa4d 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa3f 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fa50 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d122      	bne.n	8003618 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0208 	mvn.w	r2, #8
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fa23 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fa15 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fa26 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b10      	cmp	r3, #16
 8003624:	d122      	bne.n	800366c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b10      	cmp	r3, #16
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0210 	mvn.w	r2, #16
 800363c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2208      	movs	r2, #8
 8003642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f9f9 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 8003658:	e005      	b.n	8003666 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9eb 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f9fc 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0201 	mvn.w	r2, #1
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fdba 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d10e      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b80      	cmp	r3, #128	; 0x80
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fd26 	bl	8004110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d10e      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d107      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9c1 	bl	8003a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d10e      	bne.n	800371c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b20      	cmp	r3, #32
 800370a:	d107      	bne.n	800371c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0220 	mvn.w	r2, #32
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fcf0 	bl	80040fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800373e:	2302      	movs	r3, #2
 8003740:	e0ae      	b.n	80038a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	f200 809f 	bhi.w	8003890 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003752:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	0800378d 	.word	0x0800378d
 800375c:	08003891 	.word	0x08003891
 8003760:	08003891 	.word	0x08003891
 8003764:	08003891 	.word	0x08003891
 8003768:	080037cd 	.word	0x080037cd
 800376c:	08003891 	.word	0x08003891
 8003770:	08003891 	.word	0x08003891
 8003774:	08003891 	.word	0x08003891
 8003778:	0800380f 	.word	0x0800380f
 800377c:	08003891 	.word	0x08003891
 8003780:	08003891 	.word	0x08003891
 8003784:	08003891 	.word	0x08003891
 8003788:	0800384f 	.word	0x0800384f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f9f8 	bl	8003b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0208 	orr.w	r2, r2, #8
 80037a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0204 	bic.w	r2, r2, #4
 80037b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6999      	ldr	r1, [r3, #24]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	619a      	str	r2, [r3, #24]
      break;
 80037ca:	e064      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fa3e 	bl	8003c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6999      	ldr	r1, [r3, #24]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	021a      	lsls	r2, r3, #8
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	619a      	str	r2, [r3, #24]
      break;
 800380c:	e043      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fa89 	bl	8003d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0208 	orr.w	r2, r2, #8
 8003828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0204 	bic.w	r2, r2, #4
 8003838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69d9      	ldr	r1, [r3, #28]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	61da      	str	r2, [r3, #28]
      break;
 800384c:	e023      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fad3 	bl	8003e00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69d9      	ldr	r1, [r3, #28]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	021a      	lsls	r2, r3, #8
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	61da      	str	r2, [r3, #28]
      break;
 800388e:	e002      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	75fb      	strb	r3, [r7, #23]
      break;
 8003894:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_TIM_ConfigClockSource+0x1c>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e0b4      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x186>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fc:	d03e      	beq.n	800397c <HAL_TIM_ConfigClockSource+0xd4>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	f200 8087 	bhi.w	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390a:	f000 8086 	beq.w	8003a1a <HAL_TIM_ConfigClockSource+0x172>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d87f      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b70      	cmp	r3, #112	; 0x70
 8003916:	d01a      	beq.n	800394e <HAL_TIM_ConfigClockSource+0xa6>
 8003918:	2b70      	cmp	r3, #112	; 0x70
 800391a:	d87b      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b60      	cmp	r3, #96	; 0x60
 800391e:	d050      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003920:	2b60      	cmp	r3, #96	; 0x60
 8003922:	d877      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b50      	cmp	r3, #80	; 0x50
 8003926:	d03c      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003928:	2b50      	cmp	r3, #80	; 0x50
 800392a:	d873      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d058      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d86f      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b30      	cmp	r3, #48	; 0x30
 8003936:	d064      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	2b30      	cmp	r3, #48	; 0x30
 800393a:	d86b      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b20      	cmp	r3, #32
 800393e:	d060      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15a>
 8003940:	2b20      	cmp	r3, #32
 8003942:	d867      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05c      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15a>
 8003948:	2b10      	cmp	r3, #16
 800394a:	d05a      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15a>
 800394c:	e062      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f000 fb19 	bl	8003f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	609a      	str	r2, [r3, #8]
      break;
 800397a:	e04f      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6899      	ldr	r1, [r3, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f000 fb02 	bl	8003f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800399e:	609a      	str	r2, [r3, #8]
      break;
 80039a0:	e03c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f000 fa76 	bl	8003ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2150      	movs	r1, #80	; 0x50
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 facf 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 80039c0:	e02c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 fa95 	bl	8003efe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2160      	movs	r1, #96	; 0x60
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fabf 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 80039e0:	e01c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 fa56 	bl	8003ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2140      	movs	r1, #64	; 0x40
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 faaf 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 8003a00:	e00c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f000 faa6 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 8003a12:	e003      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      break;
 8003a18:	e000      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a34      	ldr	r2, [pc, #208]	; (8003b6c <TIM_Base_SetConfig+0xe4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00f      	beq.n	8003ac0 <TIM_Base_SetConfig+0x38>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d00b      	beq.n	8003ac0 <TIM_Base_SetConfig+0x38>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a31      	ldr	r2, [pc, #196]	; (8003b70 <TIM_Base_SetConfig+0xe8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <TIM_Base_SetConfig+0x38>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <TIM_Base_SetConfig+0xec>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_Base_SetConfig+0x38>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a2f      	ldr	r2, [pc, #188]	; (8003b78 <TIM_Base_SetConfig+0xf0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d108      	bne.n	8003ad2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <TIM_Base_SetConfig+0xe4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01b      	beq.n	8003b12 <TIM_Base_SetConfig+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d017      	beq.n	8003b12 <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <TIM_Base_SetConfig+0xe8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a21      	ldr	r2, [pc, #132]	; (8003b74 <TIM_Base_SetConfig+0xec>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00f      	beq.n	8003b12 <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a20      	ldr	r2, [pc, #128]	; (8003b78 <TIM_Base_SetConfig+0xf0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <TIM_Base_SetConfig+0xf4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_Base_SetConfig+0x8a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <TIM_Base_SetConfig+0xf8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_Base_SetConfig+0x8a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <TIM_Base_SetConfig+0xfc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <TIM_Base_SetConfig+0xe4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d103      	bne.n	8003b58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	615a      	str	r2, [r3, #20]
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800

08003b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0201 	bic.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f023 0302 	bic.w	r3, r3, #2
 8003bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <TIM_OC1_SetConfig+0xc8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10c      	bne.n	8003bfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0308 	bic.w	r3, r3, #8
 8003bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f023 0304 	bic.w	r3, r3, #4
 8003bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <TIM_OC1_SetConfig+0xc8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d111      	bne.n	8003c2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40010000 	.word	0x40010000

08003c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f023 0210 	bic.w	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0320 	bic.w	r3, r3, #32
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <TIM_OC2_SetConfig+0xd4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10d      	bne.n	8003cd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <TIM_OC2_SetConfig+0xd4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d113      	bne.n	8003d00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40010000 	.word	0x40010000

08003d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <TIM_OC3_SetConfig+0xd0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10d      	bne.n	8003da6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <TIM_OC3_SetConfig+0xd0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d113      	bne.n	8003dd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40010000 	.word	0x40010000

08003e00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	031b      	lsls	r3, r3, #12
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a10      	ldr	r2, [pc, #64]	; (8003e9c <TIM_OC4_SetConfig+0x9c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d109      	bne.n	8003e74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	019b      	lsls	r3, r3, #6
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000

08003ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f023 0201 	bic.w	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f023 030a 	bic.w	r3, r3, #10
 8003edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	621a      	str	r2, [r3, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b087      	sub	sp, #28
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0210 	bic.w	r2, r3, #16
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	031b      	lsls	r3, r3, #12
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	621a      	str	r2, [r3, #32]
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f043 0307 	orr.w	r3, r3, #7
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	609a      	str	r2, [r3, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	021a      	lsls	r2, r3, #8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	609a      	str	r2, [r3, #8]
}
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004034:	2302      	movs	r3, #2
 8004036:	e050      	b.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d018      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004084:	d013      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d10c      	bne.n	80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40014000 	.word	0x40014000

080040fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e03f      	b.n	80041b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd f946 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2224      	movs	r2, #36	; 0x24
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fe1d 	bl	8004da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800417c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800418c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800419c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b08a      	sub	sp, #40	; 0x28
 80041c2:	af02      	add	r7, sp, #8
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d17c      	bne.n	80042d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_UART_Transmit+0x2c>
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e075      	b.n	80042da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_UART_Transmit+0x3e>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e06e      	b.n	80042da <HAL_UART_Transmit+0x11c>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2221      	movs	r2, #33	; 0x21
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004212:	f7fd fa81 	bl	8001718 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422c:	d108      	bne.n	8004240 <HAL_UART_Transmit+0x82>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e003      	b.n	8004248 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004250:	e02a      	b.n	80042a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2200      	movs	r2, #0
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fb9b 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e036      	b.n	80042da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004280:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	3302      	adds	r3, #2
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e007      	b.n	800429a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	3301      	adds	r3, #1
 8004298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1cf      	bne.n	8004252 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2140      	movs	r1, #64	; 0x40
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fb6b 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e006      	b.n	80042da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e000      	b.n	80042da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b08a      	sub	sp, #40	; 0x28
 80042e6:	af02      	add	r7, sp, #8
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	603b      	str	r3, [r7, #0]
 80042ee:	4613      	mov	r3, r2
 80042f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b20      	cmp	r3, #32
 8004300:	f040 808c 	bne.w	800441c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Receive+0x2e>
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e084      	b.n	800441e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_UART_Receive+0x40>
 800431e:	2302      	movs	r3, #2
 8004320:	e07d      	b.n	800441e <HAL_UART_Receive+0x13c>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2222      	movs	r2, #34	; 0x22
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800433e:	f7fd f9eb 	bl	8001718 <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d108      	bne.n	800436c <HAL_UART_Receive+0x8a>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e003      	b.n	8004374 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800437c:	e043      	b.n	8004406 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2120      	movs	r1, #32
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fb05 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e042      	b.n	800441e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10c      	bne.n	80043b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	3302      	adds	r3, #2
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e01f      	b.n	80043f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c0:	d007      	beq.n	80043d2 <HAL_UART_Receive+0xf0>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <HAL_UART_Receive+0xfe>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e008      	b.n	80043f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3301      	adds	r3, #1
 80043f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1b6      	bne.n	800437e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b0ba      	sub	sp, #232	; 0xe8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800444e:	2300      	movs	r3, #0
 8004450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800445a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_UART_IRQHandler+0x66>
 800447a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fbd3 	bl	8004c32 <UART_Receive_IT>
      return;
 800448c:	e256      	b.n	800493c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800448e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80de 	beq.w	8004654 <HAL_UART_IRQHandler+0x22c>
 8004498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80d1 	beq.w	8004654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_UART_IRQHandler+0xae>
 80044be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f043 0201 	orr.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_UART_IRQHandler+0xd2>
 80044e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f043 0202 	orr.w	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_UART_IRQHandler+0xf6>
 8004506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f043 0204 	orr.w	r2, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d011      	beq.n	800454e <HAL_UART_IRQHandler+0x126>
 800452a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f043 0208 	orr.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 81ed 	beq.w	8004932 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_UART_IRQHandler+0x14e>
 8004564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fb5e 	bl	8004c32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <HAL_UART_IRQHandler+0x17a>
 800459a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d04f      	beq.n	8004642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fa66 	bl	8004a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d141      	bne.n	800463a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3314      	adds	r3, #20
 80045bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3314      	adds	r3, #20
 80045de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1d9      	bne.n	80045b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	2b00      	cmp	r3, #0
 8004608:	d013      	beq.n	8004632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	4a7d      	ldr	r2, [pc, #500]	; (8004804 <HAL_UART_IRQHandler+0x3dc>)
 8004610:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	4618      	mov	r0, r3
 8004618:	f7fd fef6 	bl	8002408 <HAL_DMA_Abort_IT>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d016      	beq.n	8004650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800462c:	4610      	mov	r0, r2
 800462e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004630:	e00e      	b.n	8004650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f99a 	bl	800496c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	e00a      	b.n	8004650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f996 	bl	800496c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	e006      	b.n	8004650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f992 	bl	800496c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800464e:	e170      	b.n	8004932 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	bf00      	nop
    return;
 8004652:	e16e      	b.n	8004932 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	2b01      	cmp	r3, #1
 800465a:	f040 814a 	bne.w	80048f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8143 	beq.w	80048f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 813c 	beq.w	80048f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	f040 80b4 	bne.w	8004808 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8140 	beq.w	8004936 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046be:	429a      	cmp	r2, r3
 80046c0:	f080 8139 	bcs.w	8004936 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d6:	f000 8088 	beq.w	80047ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004706:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800470a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004712:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800471e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1d9      	bne.n	80046da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3314      	adds	r3, #20
 800472c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3314      	adds	r3, #20
 8004746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800474a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800474e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004752:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800475c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e1      	bne.n	8004726 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3314      	adds	r3, #20
 8004782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004786:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004788:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800478c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e3      	bne.n	8004762 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ba:	f023 0310 	bic.w	r3, r3, #16
 80047be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80047ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e3      	bne.n	80047a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fd fd9f 	bl	8002328 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	4619      	mov	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8c0 	bl	8004980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004800:	e099      	b.n	8004936 <HAL_UART_IRQHandler+0x50e>
 8004802:	bf00      	nop
 8004804:	08004b3b 	.word	0x08004b3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004810:	b29b      	uxth	r3, r3
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 808b 	beq.w	800493a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8086 	beq.w	800493a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004852:	647a      	str	r2, [r7, #68]	; 0x44
 8004854:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e3      	bne.n	800482e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3314      	adds	r3, #20
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	623b      	str	r3, [r7, #32]
   return(result);
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800488a:	633a      	str	r2, [r7, #48]	; 0x30
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e3      	bne.n	8004866 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0310 	bic.w	r3, r3, #16
 80048c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048d0:	61fa      	str	r2, [r7, #28]
 80048d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	617b      	str	r3, [r7, #20]
   return(result);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e3      	bne.n	80048ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e8:	4619      	mov	r1, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f848 	bl	8004980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048f0:	e023      	b.n	800493a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_UART_IRQHandler+0x4ea>
 80048fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f929 	bl	8004b62 <UART_Transmit_IT>
    return;
 8004910:	e014      	b.n	800493c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00e      	beq.n	800493c <HAL_UART_IRQHandler+0x514>
 800491e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f969 	bl	8004c02 <UART_EndTransmit_IT>
    return;
 8004930:	e004      	b.n	800493c <HAL_UART_IRQHandler+0x514>
    return;
 8004932:	bf00      	nop
 8004934:	e002      	b.n	800493c <HAL_UART_IRQHandler+0x514>
      return;
 8004936:	bf00      	nop
 8004938:	e000      	b.n	800493c <HAL_UART_IRQHandler+0x514>
      return;
 800493a:	bf00      	nop
  }
}
 800493c:	37e8      	adds	r7, #232	; 0xe8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop

08004944 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b090      	sub	sp, #64	; 0x40
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	4613      	mov	r3, r2
 80049a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a8:	e050      	b.n	8004a4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b0:	d04c      	beq.n	8004a4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049b8:	f7fc feae 	bl	8001718 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d241      	bcs.n	8004a4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049e8:	637a      	str	r2, [r7, #52]	; 0x34
 80049ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e5      	bne.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3314      	adds	r3, #20
 8004a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a1c:	623a      	str	r2, [r7, #32]
 8004a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	69f9      	ldr	r1, [r7, #28]
 8004a22:	6a3a      	ldr	r2, [r7, #32]
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e5      	bne.n	80049fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e00f      	b.n	8004a6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d09f      	beq.n	80049aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3740      	adds	r7, #64	; 0x40
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b095      	sub	sp, #84	; 0x54
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a9c:	643a      	str	r2, [r7, #64]	; 0x40
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e5      	bne.n	8004a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3314      	adds	r3, #20
 8004ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e5      	bne.n	8004ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d119      	bne.n	8004b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f023 0310 	bic.w	r3, r3, #16
 8004b02:	647b      	str	r3, [r7, #68]	; 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b0c:	61ba      	str	r2, [r7, #24]
 8004b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6979      	ldr	r1, [r7, #20]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b2e:	bf00      	nop
 8004b30:	3754      	adds	r7, #84	; 0x54
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff ff09 	bl	800496c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b21      	cmp	r3, #33	; 0x21
 8004b74:	d13e      	bne.n	8004bf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7e:	d114      	bne.n	8004baa <UART_Transmit_IT+0x48>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d110      	bne.n	8004baa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	1c9a      	adds	r2, r3, #2
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	621a      	str	r2, [r3, #32]
 8004ba8:	e008      	b.n	8004bbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	1c59      	adds	r1, r3, #1
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6211      	str	r1, [r2, #32]
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10f      	bne.n	8004bf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e000      	b.n	8004bf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bf4:	2302      	movs	r3, #2
  }
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fe8e 	bl	8004944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b08c      	sub	sp, #48	; 0x30
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b22      	cmp	r3, #34	; 0x22
 8004c44:	f040 80ab 	bne.w	8004d9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c50:	d117      	bne.n	8004c82 <UART_Receive_IT+0x50>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d113      	bne.n	8004c82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c80:	e026      	b.n	8004cd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c94:	d007      	beq.n	8004ca6 <UART_Receive_IT+0x74>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <UART_Receive_IT+0x82>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e008      	b.n	8004cc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d15a      	bne.n	8004d9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0220 	bic.w	r2, r2, #32
 8004cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d135      	bne.n	8004d90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	330c      	adds	r3, #12
 8004d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f023 0310 	bic.w	r3, r3, #16
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4a:	623a      	str	r2, [r7, #32]
 8004d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e5      	bne.n	8004d2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d10a      	bne.n	8004d82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d86:	4619      	mov	r1, r3
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff fdf9 	bl	8004980 <HAL_UARTEx_RxEventCallback>
 8004d8e:	e002      	b.n	8004d96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fde1 	bl	8004958 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e002      	b.n	8004da0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3730      	adds	r7, #48	; 0x30
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b0c0      	sub	sp, #256	; 0x100
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	68d9      	ldr	r1, [r3, #12]
 8004dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	ea40 0301 	orr.w	r3, r0, r1
 8004dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e00:	f021 010c 	bic.w	r1, r1, #12
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e22:	6999      	ldr	r1, [r3, #24]
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	ea40 0301 	orr.w	r3, r0, r1
 8004e2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b8f      	ldr	r3, [pc, #572]	; (8005074 <UART_SetConfig+0x2cc>)
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d005      	beq.n	8004e48 <UART_SetConfig+0xa0>
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b8d      	ldr	r3, [pc, #564]	; (8005078 <UART_SetConfig+0x2d0>)
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d104      	bne.n	8004e52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7fe f962 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8004e4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e50:	e003      	b.n	8004e5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e52:	f7fe f949 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8004e56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e64:	f040 810c 	bne.w	8005080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	1891      	adds	r1, r2, r2
 8004e80:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e82:	415b      	adcs	r3, r3
 8004e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	eb12 0801 	adds.w	r8, r2, r1
 8004e90:	4629      	mov	r1, r5
 8004e92:	eb43 0901 	adc.w	r9, r3, r1
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eaa:	4690      	mov	r8, r2
 8004eac:	4699      	mov	r9, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	eb18 0303 	adds.w	r3, r8, r3
 8004eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004eb8:	462b      	mov	r3, r5
 8004eba:	eb49 0303 	adc.w	r3, r9, r3
 8004ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ece:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	18db      	adds	r3, r3, r3
 8004eda:	653b      	str	r3, [r7, #80]	; 0x50
 8004edc:	4613      	mov	r3, r2
 8004ede:	eb42 0303 	adc.w	r3, r2, r3
 8004ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004eec:	f7fb fcd6 	bl	800089c <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4b61      	ldr	r3, [pc, #388]	; (800507c <UART_SetConfig+0x2d4>)
 8004ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	011c      	lsls	r4, r3, #4
 8004efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	1891      	adds	r1, r2, r2
 8004f16:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f18:	415b      	adcs	r3, r3
 8004f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f20:	4641      	mov	r1, r8
 8004f22:	eb12 0a01 	adds.w	sl, r2, r1
 8004f26:	4649      	mov	r1, r9
 8004f28:	eb43 0b01 	adc.w	fp, r3, r1
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f40:	4692      	mov	sl, r2
 8004f42:	469b      	mov	fp, r3
 8004f44:	4643      	mov	r3, r8
 8004f46:	eb1a 0303 	adds.w	r3, sl, r3
 8004f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	eb4b 0303 	adc.w	r3, fp, r3
 8004f54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	18db      	adds	r3, r3, r3
 8004f70:	643b      	str	r3, [r7, #64]	; 0x40
 8004f72:	4613      	mov	r3, r2
 8004f74:	eb42 0303 	adc.w	r3, r2, r3
 8004f78:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f82:	f7fb fc8b 	bl	800089c <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4b3b      	ldr	r3, [pc, #236]	; (800507c <UART_SetConfig+0x2d4>)
 8004f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2264      	movs	r2, #100	; 0x64
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	1acb      	subs	r3, r1, r3
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fa2:	4b36      	ldr	r3, [pc, #216]	; (800507c <UART_SetConfig+0x2d4>)
 8004fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fb0:	441c      	add	r4, r3
 8004fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	1891      	adds	r1, r2, r2
 8004fca:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fcc:	415b      	adcs	r3, r3
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	1851      	adds	r1, r2, r1
 8004fd8:	6339      	str	r1, [r7, #48]	; 0x30
 8004fda:	4649      	mov	r1, r9
 8004fdc:	414b      	adcs	r3, r1
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fec:	4659      	mov	r1, fp
 8004fee:	00cb      	lsls	r3, r1, #3
 8004ff0:	4651      	mov	r1, sl
 8004ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	00ca      	lsls	r2, r1, #3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	4642      	mov	r2, r8
 8005002:	189b      	adds	r3, r3, r2
 8005004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005008:	464b      	mov	r3, r9
 800500a:	460a      	mov	r2, r1
 800500c:	eb42 0303 	adc.w	r3, r2, r3
 8005010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005020:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005028:	460b      	mov	r3, r1
 800502a:	18db      	adds	r3, r3, r3
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
 800502e:	4613      	mov	r3, r2
 8005030:	eb42 0303 	adc.w	r3, r2, r3
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800503a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800503e:	f7fb fc2d 	bl	800089c <__aeabi_uldivmod>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <UART_SetConfig+0x2d4>)
 8005048:	fba3 1302 	umull	r1, r3, r3, r2
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	2164      	movs	r1, #100	; 0x64
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	3332      	adds	r3, #50	; 0x32
 800505a:	4a08      	ldr	r2, [pc, #32]	; (800507c <UART_SetConfig+0x2d4>)
 800505c:	fba2 2303 	umull	r2, r3, r2, r3
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	f003 0207 	and.w	r2, r3, #7
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4422      	add	r2, r4
 800506e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005070:	e105      	b.n	800527e <UART_SetConfig+0x4d6>
 8005072:	bf00      	nop
 8005074:	40011000 	.word	0x40011000
 8005078:	40011400 	.word	0x40011400
 800507c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005084:	2200      	movs	r2, #0
 8005086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800508a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800508e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005092:	4642      	mov	r2, r8
 8005094:	464b      	mov	r3, r9
 8005096:	1891      	adds	r1, r2, r2
 8005098:	6239      	str	r1, [r7, #32]
 800509a:	415b      	adcs	r3, r3
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
 800509e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050a2:	4641      	mov	r1, r8
 80050a4:	1854      	adds	r4, r2, r1
 80050a6:	4649      	mov	r1, r9
 80050a8:	eb43 0501 	adc.w	r5, r3, r1
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	00eb      	lsls	r3, r5, #3
 80050b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ba:	00e2      	lsls	r2, r4, #3
 80050bc:	4614      	mov	r4, r2
 80050be:	461d      	mov	r5, r3
 80050c0:	4643      	mov	r3, r8
 80050c2:	18e3      	adds	r3, r4, r3
 80050c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050c8:	464b      	mov	r3, r9
 80050ca:	eb45 0303 	adc.w	r3, r5, r3
 80050ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050ee:	4629      	mov	r1, r5
 80050f0:	008b      	lsls	r3, r1, #2
 80050f2:	4621      	mov	r1, r4
 80050f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f8:	4621      	mov	r1, r4
 80050fa:	008a      	lsls	r2, r1, #2
 80050fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005100:	f7fb fbcc 	bl	800089c <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4b60      	ldr	r3, [pc, #384]	; (800528c <UART_SetConfig+0x4e4>)
 800510a:	fba3 2302 	umull	r2, r3, r3, r2
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	011c      	lsls	r4, r3, #4
 8005112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005116:	2200      	movs	r2, #0
 8005118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800511c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	1891      	adds	r1, r2, r2
 800512a:	61b9      	str	r1, [r7, #24]
 800512c:	415b      	adcs	r3, r3
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005134:	4641      	mov	r1, r8
 8005136:	1851      	adds	r1, r2, r1
 8005138:	6139      	str	r1, [r7, #16]
 800513a:	4649      	mov	r1, r9
 800513c:	414b      	adcs	r3, r1
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800514c:	4659      	mov	r1, fp
 800514e:	00cb      	lsls	r3, r1, #3
 8005150:	4651      	mov	r1, sl
 8005152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005156:	4651      	mov	r1, sl
 8005158:	00ca      	lsls	r2, r1, #3
 800515a:	4610      	mov	r0, r2
 800515c:	4619      	mov	r1, r3
 800515e:	4603      	mov	r3, r0
 8005160:	4642      	mov	r2, r8
 8005162:	189b      	adds	r3, r3, r2
 8005164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005168:	464b      	mov	r3, r9
 800516a:	460a      	mov	r2, r1
 800516c:	eb42 0303 	adc.w	r3, r2, r3
 8005170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	67bb      	str	r3, [r7, #120]	; 0x78
 800517e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800518c:	4649      	mov	r1, r9
 800518e:	008b      	lsls	r3, r1, #2
 8005190:	4641      	mov	r1, r8
 8005192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005196:	4641      	mov	r1, r8
 8005198:	008a      	lsls	r2, r1, #2
 800519a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800519e:	f7fb fb7d 	bl	800089c <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4b39      	ldr	r3, [pc, #228]	; (800528c <UART_SetConfig+0x4e4>)
 80051a8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	2164      	movs	r1, #100	; 0x64
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	3332      	adds	r3, #50	; 0x32
 80051ba:	4a34      	ldr	r2, [pc, #208]	; (800528c <UART_SetConfig+0x4e4>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c6:	441c      	add	r4, r3
 80051c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051cc:	2200      	movs	r2, #0
 80051ce:	673b      	str	r3, [r7, #112]	; 0x70
 80051d0:	677a      	str	r2, [r7, #116]	; 0x74
 80051d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051d6:	4642      	mov	r2, r8
 80051d8:	464b      	mov	r3, r9
 80051da:	1891      	adds	r1, r2, r2
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	415b      	adcs	r3, r3
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e6:	4641      	mov	r1, r8
 80051e8:	1851      	adds	r1, r2, r1
 80051ea:	6039      	str	r1, [r7, #0]
 80051ec:	4649      	mov	r1, r9
 80051ee:	414b      	adcs	r3, r1
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051fe:	4659      	mov	r1, fp
 8005200:	00cb      	lsls	r3, r1, #3
 8005202:	4651      	mov	r1, sl
 8005204:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005208:	4651      	mov	r1, sl
 800520a:	00ca      	lsls	r2, r1, #3
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	4603      	mov	r3, r0
 8005212:	4642      	mov	r2, r8
 8005214:	189b      	adds	r3, r3, r2
 8005216:	66bb      	str	r3, [r7, #104]	; 0x68
 8005218:	464b      	mov	r3, r9
 800521a:	460a      	mov	r2, r1
 800521c:	eb42 0303 	adc.w	r3, r2, r3
 8005220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	663b      	str	r3, [r7, #96]	; 0x60
 800522c:	667a      	str	r2, [r7, #100]	; 0x64
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800523a:	4649      	mov	r1, r9
 800523c:	008b      	lsls	r3, r1, #2
 800523e:	4641      	mov	r1, r8
 8005240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005244:	4641      	mov	r1, r8
 8005246:	008a      	lsls	r2, r1, #2
 8005248:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800524c:	f7fb fb26 	bl	800089c <__aeabi_uldivmod>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4b0d      	ldr	r3, [pc, #52]	; (800528c <UART_SetConfig+0x4e4>)
 8005256:	fba3 1302 	umull	r1, r3, r3, r2
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	2164      	movs	r1, #100	; 0x64
 800525e:	fb01 f303 	mul.w	r3, r1, r3
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	3332      	adds	r3, #50	; 0x32
 8005268:	4a08      	ldr	r2, [pc, #32]	; (800528c <UART_SetConfig+0x4e4>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	f003 020f 	and.w	r2, r3, #15
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4422      	add	r2, r4
 800527c:	609a      	str	r2, [r3, #8]
}
 800527e:	bf00      	nop
 8005280:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005284:	46bd      	mov	sp, r7
 8005286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800528a:	bf00      	nop
 800528c:	51eb851f 	.word	0x51eb851f

08005290 <__NVIC_SetPriority>:
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	6039      	str	r1, [r7, #0]
 800529a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800529c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	db0a      	blt.n	80052ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	490c      	ldr	r1, [pc, #48]	; (80052dc <__NVIC_SetPriority+0x4c>)
 80052aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ae:	0112      	lsls	r2, r2, #4
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	440b      	add	r3, r1
 80052b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80052b8:	e00a      	b.n	80052d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	4908      	ldr	r1, [pc, #32]	; (80052e0 <__NVIC_SetPriority+0x50>)
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	3b04      	subs	r3, #4
 80052c8:	0112      	lsls	r2, r2, #4
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	440b      	add	r3, r1
 80052ce:	761a      	strb	r2, [r3, #24]
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	e000e100 	.word	0xe000e100
 80052e0:	e000ed00 	.word	0xe000ed00

080052e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <SysTick_Handler+0x1c>)
 80052ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80052ec:	f001 fd28 	bl	8006d40 <xTaskGetSchedulerState>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d001      	beq.n	80052fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80052f6:	f002 fb0f 	bl	8007918 <xPortSysTickHandler>
  }
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	e000e010 	.word	0xe000e010

08005304 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005308:	2100      	movs	r1, #0
 800530a:	f06f 0004 	mvn.w	r0, #4
 800530e:	f7ff ffbf 	bl	8005290 <__NVIC_SetPriority>
#endif
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800531e:	f3ef 8305 	mrs	r3, IPSR
 8005322:	603b      	str	r3, [r7, #0]
  return(result);
 8005324:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800532a:	f06f 0305 	mvn.w	r3, #5
 800532e:	607b      	str	r3, [r7, #4]
 8005330:	e00c      	b.n	800534c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <osKernelInitialize+0x44>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800533a:	4b08      	ldr	r3, [pc, #32]	; (800535c <osKernelInitialize+0x44>)
 800533c:	2201      	movs	r2, #1
 800533e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005340:	2300      	movs	r3, #0
 8005342:	607b      	str	r3, [r7, #4]
 8005344:	e002      	b.n	800534c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800534a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800534c:	687b      	ldr	r3, [r7, #4]
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	200001d0 	.word	0x200001d0

08005360 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005366:	f3ef 8305 	mrs	r3, IPSR
 800536a:	603b      	str	r3, [r7, #0]
  return(result);
 800536c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005372:	f06f 0305 	mvn.w	r3, #5
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	e010      	b.n	800539c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800537a:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <osKernelStart+0x48>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d109      	bne.n	8005396 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005382:	f7ff ffbf 	bl	8005304 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005386:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <osKernelStart+0x48>)
 8005388:	2202      	movs	r2, #2
 800538a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800538c:	f001 f87c 	bl	8006488 <vTaskStartScheduler>
      stat = osOK;
 8005390:	2300      	movs	r3, #0
 8005392:	607b      	str	r3, [r7, #4]
 8005394:	e002      	b.n	800539c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800539c:	687b      	ldr	r3, [r7, #4]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	200001d0 	.word	0x200001d0

080053ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08e      	sub	sp, #56	; 0x38
 80053b0:	af04      	add	r7, sp, #16
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053bc:	f3ef 8305 	mrs	r3, IPSR
 80053c0:	617b      	str	r3, [r7, #20]
  return(result);
 80053c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d17e      	bne.n	80054c6 <osThreadNew+0x11a>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d07b      	beq.n	80054c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053d2:	2318      	movs	r3, #24
 80053d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d045      	beq.n	8005472 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <osThreadNew+0x48>
        name = attr->name;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <osThreadNew+0x6e>
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b38      	cmp	r3, #56	; 0x38
 800540c:	d805      	bhi.n	800541a <osThreadNew+0x6e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <osThreadNew+0x72>
        return (NULL);
 800541a:	2300      	movs	r3, #0
 800541c:	e054      	b.n	80054c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00e      	beq.n	8005454 <osThreadNew+0xa8>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2bbb      	cmp	r3, #187	; 0xbb
 800543c:	d90a      	bls.n	8005454 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <osThreadNew+0xa8>
        mem = 1;
 800544e:	2301      	movs	r3, #1
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	e010      	b.n	8005476 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10c      	bne.n	8005476 <osThreadNew+0xca>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d108      	bne.n	8005476 <osThreadNew+0xca>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <osThreadNew+0xca>
          mem = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	e001      	b.n	8005476 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d110      	bne.n	800549e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005484:	9202      	str	r2, [sp, #8]
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fe0c 	bl	80060b0 <xTaskCreateStatic>
 8005498:	4603      	mov	r3, r0
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	e013      	b.n	80054c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d110      	bne.n	80054c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f107 0310 	add.w	r3, r7, #16
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fe57 	bl	800616a <xTaskCreate>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d001      	beq.n	80054c6 <osThreadNew+0x11a>
            hTask = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054c6:	693b      	ldr	r3, [r7, #16]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3728      	adds	r7, #40	; 0x28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d8:	f3ef 8305 	mrs	r3, IPSR
 80054dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80054de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <osDelay+0x1c>
    stat = osErrorISR;
 80054e4:	f06f 0305 	mvn.w	r3, #5
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e007      	b.n	80054fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 ff92 	bl	8006420 <vTaskDelay>
    }
  }

  return (stat);
 80054fc:	68fb      	ldr	r3, [r7, #12]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4a07      	ldr	r2, [pc, #28]	; (8005534 <vApplicationGetIdleTaskMemory+0x2c>)
 8005518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4a06      	ldr	r2, [pc, #24]	; (8005538 <vApplicationGetIdleTaskMemory+0x30>)
 800551e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2280      	movs	r2, #128	; 0x80
 8005524:	601a      	str	r2, [r3, #0]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	200001d4 	.word	0x200001d4
 8005538:	20000290 	.word	0x20000290

0800553c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a07      	ldr	r2, [pc, #28]	; (8005568 <vApplicationGetTimerTaskMemory+0x2c>)
 800554c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4a06      	ldr	r2, [pc, #24]	; (800556c <vApplicationGetTimerTaskMemory+0x30>)
 8005552:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	20000490 	.word	0x20000490
 800556c:	2000054c 	.word	0x2000054c

08005570 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f103 0208 	add.w	r2, r3, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005588:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f103 0208 	add.w	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f103 0208 	add.w	r2, r3, #8
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005628:	d103      	bne.n	8005632 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e00c      	b.n	800564c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3308      	adds	r3, #8
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e002      	b.n	8005640 <vListInsert+0x2e>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	d2f6      	bcs.n	800563a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6892      	ldr	r2, [r2, #8]
 800569a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6852      	ldr	r2, [r2, #4]
 80056a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d103      	bne.n	80056b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	1e5a      	subs	r2, r3, #1
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005702:	f002 f877 	bl	80077f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	68f9      	ldr	r1, [r7, #12]
 8005710:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	441a      	add	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	3b01      	subs	r3, #1
 8005734:	68f9      	ldr	r1, [r7, #12]
 8005736:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	441a      	add	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	22ff      	movs	r2, #255	; 0xff
 8005746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	22ff      	movs	r2, #255	; 0xff
 800574e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d114      	bne.n	8005782 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01a      	beq.n	8005796 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3310      	adds	r3, #16
 8005764:	4618      	mov	r0, r3
 8005766:	f001 f929 	bl	80069bc <xTaskRemoveFromEventList>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d012      	beq.n	8005796 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005770:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <xQueueGenericReset+0xcc>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	e009      	b.n	8005796 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3310      	adds	r3, #16
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fef2 	bl	8005570 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3324      	adds	r3, #36	; 0x24
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff feed 	bl	8005570 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005796:	f002 f85d 	bl	8007854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800579a:	2301      	movs	r3, #1
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08e      	sub	sp, #56	; 0x38
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <xQueueGenericCreateStatic+0x52>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <xQueueGenericCreateStatic+0x56>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <xQueueGenericCreateStatic+0x58>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	623b      	str	r3, [r7, #32]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <xQueueGenericCreateStatic+0x7e>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <xQueueGenericCreateStatic+0x82>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xQueueGenericCreateStatic+0x84>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	61fb      	str	r3, [r7, #28]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005846:	2350      	movs	r3, #80	; 0x50
 8005848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b50      	cmp	r3, #80	; 0x50
 800584e:	d00a      	beq.n	8005866 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	61bb      	str	r3, [r7, #24]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005866:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00d      	beq.n	800588e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800587a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	4613      	mov	r3, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f805 	bl	8005898 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005890:	4618      	mov	r0, r3
 8005892:	3730      	adds	r7, #48	; 0x30
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	e002      	b.n	80058ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058c6:	2101      	movs	r1, #1
 80058c8:	69b8      	ldr	r0, [r7, #24]
 80058ca:	f7ff ff05 	bl	80056d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058d6:	bf00      	nop
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	; 0x38
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058ee:	2300      	movs	r3, #0
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueGenericSend+0x32>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <xQueueGenericSend+0x40>
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <xQueueGenericSend+0x44>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <xQueueGenericSend+0x46>
 8005924:	2300      	movs	r3, #0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <xQueueGenericSend+0x60>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d103      	bne.n	800594e <xQueueGenericSend+0x6e>
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <xQueueGenericSend+0x72>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericSend+0x74>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xQueueGenericSend+0x8e>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596e:	f001 f9e7 	bl	8006d40 <xTaskGetSchedulerState>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <xQueueGenericSend+0x9e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <xQueueGenericSend+0xa2>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueGenericSend+0xa4>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xQueueGenericSend+0xbe>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	61fb      	str	r3, [r7, #28]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800599e:	f001 ff29 	bl	80077f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <xQueueGenericSend+0xd4>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d129      	bne.n	8005a08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ba:	f000 fa0b 	bl	8005dd4 <prvCopyDataToQueue>
 80059be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	3324      	adds	r3, #36	; 0x24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fff5 	bl	80069bc <xTaskRemoveFromEventList>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059d8:	4b3f      	ldr	r3, [pc, #252]	; (8005ad8 <xQueueGenericSend+0x1f8>)
 80059da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	e00a      	b.n	8005a00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059f0:	4b39      	ldr	r3, [pc, #228]	; (8005ad8 <xQueueGenericSend+0x1f8>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a00:	f001 ff28 	bl	8007854 <vPortExitCritical>
				return pdPASS;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e063      	b.n	8005ad0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a0e:	f001 ff21 	bl	8007854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e05c      	b.n	8005ad0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 f82f 	bl	8006a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a2a:	f001 ff13 	bl	8007854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a2e:	f000 fd9b 	bl	8006568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a32:	f001 fedf 	bl	80077f4 <vPortEnterCritical>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a42:	d103      	bne.n	8005a4c <xQueueGenericSend+0x16c>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSend+0x182>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a62:	f001 fef7 	bl	8007854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a66:	1d3a      	adds	r2, r7, #4
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 f81e 	bl	8006ab0 <xTaskCheckForTimeOut>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d124      	bne.n	8005ac4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a7c:	f000 faa2 	bl	8005fc4 <prvIsQueueFull>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	3310      	adds	r3, #16
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 ff44 	bl	800691c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a96:	f000 fa2d 	bl	8005ef4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a9a:	f000 fd73 	bl	8006584 <xTaskResumeAll>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f af7c 	bne.w	800599e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <xQueueGenericSend+0x1f8>)
 8005aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	e772      	b.n	800599e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aba:	f000 fa1b 	bl	8005ef4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005abe:	f000 fd61 	bl	8006584 <xTaskResumeAll>
 8005ac2:	e76c      	b.n	800599e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac6:	f000 fa15 	bl	8005ef4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aca:	f000 fd5b 	bl	8006584 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3738      	adds	r7, #56	; 0x38
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b090      	sub	sp, #64	; 0x40
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d103      	bne.n	8005b18 <xQueueGenericSendFromISR+0x3c>
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <xQueueGenericSendFromISR+0x40>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <xQueueGenericSendFromISR+0x42>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d103      	bne.n	8005b46 <xQueueGenericSendFromISR+0x6a>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <xQueueGenericSendFromISR+0x6e>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericSendFromISR+0x70>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b66:	f001 ff27 	bl	80079b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	61fa      	str	r2, [r7, #28]
 8005b80:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d302      	bcc.n	8005b98 <xQueueGenericSendFromISR+0xbc>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d12f      	bne.n	8005bf8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bae:	f000 f911 	bl	8005dd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bba:	d112      	bne.n	8005be2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d016      	beq.n	8005bf2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	3324      	adds	r3, #36	; 0x24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fef7 	bl	80069bc <xTaskRemoveFromEventList>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00e      	beq.n	8005bf2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e007      	b.n	8005bf2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005be2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005be6:	3301      	adds	r3, #1
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	b25a      	sxtb	r2, r3
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005bf6:	e001      	b.n	8005bfc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3740      	adds	r7, #64	; 0x40
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	; 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <xQueueReceive+0x30>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	623b      	str	r3, [r7, #32]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <xQueueReceive+0x3e>
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <xQueueReceive+0x42>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <xQueueReceive+0x44>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <xQueueReceive+0x5e>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	61fb      	str	r3, [r7, #28]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c72:	f001 f865 	bl	8006d40 <xTaskGetSchedulerState>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <xQueueReceive+0x6e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <xQueueReceive+0x72>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <xQueueReceive+0x74>
 8005c86:	2300      	movs	r3, #0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <xQueueReceive+0x8e>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	61bb      	str	r3, [r7, #24]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ca2:	f001 fda7 	bl	80077f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01f      	beq.n	8005cf2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb6:	f000 f8f7 	bl	8005ea8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	1e5a      	subs	r2, r3, #1
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00f      	beq.n	8005cea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	3310      	adds	r3, #16
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fe74 	bl	80069bc <xTaskRemoveFromEventList>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cda:	4b3d      	ldr	r3, [pc, #244]	; (8005dd0 <xQueueReceive+0x1bc>)
 8005cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cea:	f001 fdb3 	bl	8007854 <vPortExitCritical>
				return pdPASS;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e069      	b.n	8005dc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d103      	bne.n	8005d00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cf8:	f001 fdac 	bl	8007854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e062      	b.n	8005dc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d06:	f107 0310 	add.w	r3, r7, #16
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 feba 	bl	8006a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d14:	f001 fd9e 	bl	8007854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d18:	f000 fc26 	bl	8006568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d1c:	f001 fd6a 	bl	80077f4 <vPortEnterCritical>
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d26:	b25b      	sxtb	r3, r3
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d2c:	d103      	bne.n	8005d36 <xQueueReceive+0x122>
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d42:	d103      	bne.n	8005d4c <xQueueReceive+0x138>
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d4c:	f001 fd82 	bl	8007854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d50:	1d3a      	adds	r2, r7, #4
 8005d52:	f107 0310 	add.w	r3, r7, #16
 8005d56:	4611      	mov	r1, r2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fea9 	bl	8006ab0 <xTaskCheckForTimeOut>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d123      	bne.n	8005dac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d66:	f000 f917 	bl	8005f98 <prvIsQueueEmpty>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d017      	beq.n	8005da0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	3324      	adds	r3, #36	; 0x24
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fdcf 	bl	800691c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d80:	f000 f8b8 	bl	8005ef4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d84:	f000 fbfe 	bl	8006584 <xTaskResumeAll>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d189      	bne.n	8005ca2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <xQueueReceive+0x1bc>)
 8005d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	e780      	b.n	8005ca2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da2:	f000 f8a7 	bl	8005ef4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005da6:	f000 fbed 	bl	8006584 <xTaskResumeAll>
 8005daa:	e77a      	b.n	8005ca2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dae:	f000 f8a1 	bl	8005ef4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005db2:	f000 fbe7 	bl	8006584 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db8:	f000 f8ee 	bl	8005f98 <prvIsQueueEmpty>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f43f af6f 	beq.w	8005ca2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3730      	adds	r7, #48	; 0x30
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10d      	bne.n	8005e0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d14d      	bne.n	8005e96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 ffbc 	bl	8006d7c <xTaskPriorityDisinherit>
 8005e04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	e043      	b.n	8005e96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d119      	bne.n	8005e48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6858      	ldr	r0, [r3, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	f002 f820 	bl	8007e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	441a      	add	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d32b      	bcc.n	8005e96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	e026      	b.n	8005e96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68d8      	ldr	r0, [r3, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	461a      	mov	r2, r3
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	f002 f806 	bl	8007e64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	425b      	negs	r3, r3
 8005e62:	441a      	add	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d207      	bcs.n	8005e84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	425b      	negs	r3, r3
 8005e7e:	441a      	add	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d105      	bne.n	8005e96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e9e:	697b      	ldr	r3, [r7, #20]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d018      	beq.n	8005eec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	441a      	add	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d303      	bcc.n	8005edc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68d9      	ldr	r1, [r3, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6838      	ldr	r0, [r7, #0]
 8005ee8:	f001 ffbc 	bl	8007e64 <memcpy>
	}
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005efc:	f001 fc7a 	bl	80077f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f08:	e011      	b.n	8005f2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d012      	beq.n	8005f38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3324      	adds	r3, #36	; 0x24
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fd50 	bl	80069bc <xTaskRemoveFromEventList>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f22:	f000 fe27 	bl	8006b74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dce9      	bgt.n	8005f0a <prvUnlockQueue+0x16>
 8005f36:	e000      	b.n	8005f3a <prvUnlockQueue+0x46>
					break;
 8005f38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	22ff      	movs	r2, #255	; 0xff
 8005f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f42:	f001 fc87 	bl	8007854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f46:	f001 fc55 	bl	80077f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f52:	e011      	b.n	8005f78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d012      	beq.n	8005f82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3310      	adds	r3, #16
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fd2b 	bl	80069bc <xTaskRemoveFromEventList>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f6c:	f000 fe02 	bl	8006b74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dce9      	bgt.n	8005f54 <prvUnlockQueue+0x60>
 8005f80:	e000      	b.n	8005f84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	22ff      	movs	r2, #255	; 0xff
 8005f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f8c:	f001 fc62 	bl	8007854 <vPortExitCritical>
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fa0:	f001 fc28 	bl	80077f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fac:	2301      	movs	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e001      	b.n	8005fb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fb6:	f001 fc4d 	bl	8007854 <vPortExitCritical>

	return xReturn;
 8005fba:	68fb      	ldr	r3, [r7, #12]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fcc:	f001 fc12 	bl	80077f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d102      	bne.n	8005fe2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e001      	b.n	8005fe6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fe6:	f001 fc35 	bl	8007854 <vPortExitCritical>

	return xReturn;
 8005fea:	68fb      	ldr	r3, [r7, #12]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	e014      	b.n	800602e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006004:	4a0f      	ldr	r2, [pc, #60]	; (8006044 <vQueueAddToRegistry+0x50>)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006010:	490c      	ldr	r1, [pc, #48]	; (8006044 <vQueueAddToRegistry+0x50>)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800601a:	4a0a      	ldr	r2, [pc, #40]	; (8006044 <vQueueAddToRegistry+0x50>)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	4413      	add	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006026:	e006      	b.n	8006036 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3301      	adds	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b07      	cmp	r3, #7
 8006032:	d9e7      	bls.n	8006004 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	2000094c 	.word	0x2000094c

08006048 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006058:	f001 fbcc 	bl	80077f4 <vPortEnterCritical>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006062:	b25b      	sxtb	r3, r3
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006068:	d103      	bne.n	8006072 <vQueueWaitForMessageRestricted+0x2a>
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006078:	b25b      	sxtb	r3, r3
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800607e:	d103      	bne.n	8006088 <vQueueWaitForMessageRestricted+0x40>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006088:	f001 fbe4 	bl	8007854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fc61 	bl	8006964 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060a2:	6978      	ldr	r0, [r7, #20]
 80060a4:	f7ff ff26 	bl	8005ef4 <prvUnlockQueue>
	}
 80060a8:	bf00      	nop
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08e      	sub	sp, #56	; 0x38
 80060b4:	af04      	add	r7, sp, #16
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xTaskCreateStatic+0x2a>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	623b      	str	r3, [r7, #32]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	61fb      	str	r3, [r7, #28]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060f6:	23bc      	movs	r3, #188	; 0xbc
 80060f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2bbc      	cmp	r3, #188	; 0xbc
 80060fe:	d00a      	beq.n	8006116 <xTaskCreateStatic+0x66>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	61bb      	str	r3, [r7, #24]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006116:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01e      	beq.n	800615c <xTaskCreateStatic+0xac>
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01b      	beq.n	800615c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800612c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	2202      	movs	r2, #2
 8006132:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006136:	2300      	movs	r3, #0
 8006138:	9303      	str	r3, [sp, #12]
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	9302      	str	r3, [sp, #8]
 800613e:	f107 0314 	add.w	r3, r7, #20
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f850 	bl	80061f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006156:	f000 f8f3 	bl	8006340 <prvAddNewTaskToReadyList>
 800615a:	e001      	b.n	8006160 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006160:	697b      	ldr	r3, [r7, #20]
	}
 8006162:	4618      	mov	r0, r3
 8006164:	3728      	adds	r7, #40	; 0x28
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800616a:	b580      	push	{r7, lr}
 800616c:	b08c      	sub	sp, #48	; 0x30
 800616e:	af04      	add	r7, sp, #16
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	4613      	mov	r3, r2
 8006178:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4618      	mov	r0, r3
 8006180:	f001 fc5a 	bl	8007a38 <pvPortMalloc>
 8006184:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00e      	beq.n	80061aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800618c:	20bc      	movs	r0, #188	; 0xbc
 800618e:	f001 fc53 	bl	8007a38 <pvPortMalloc>
 8006192:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
 80061a0:	e005      	b.n	80061ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061a2:	6978      	ldr	r0, [r7, #20]
 80061a4:	f001 fd14 	bl	8007bd0 <vPortFree>
 80061a8:	e001      	b.n	80061ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d017      	beq.n	80061e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061bc:	88fa      	ldrh	r2, [r7, #6]
 80061be:	2300      	movs	r3, #0
 80061c0:	9303      	str	r3, [sp, #12]
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	9302      	str	r3, [sp, #8]
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f80e 	bl	80061f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061d8:	69f8      	ldr	r0, [r7, #28]
 80061da:	f000 f8b1 	bl	8006340 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061de:	2301      	movs	r3, #1
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	e002      	b.n	80061ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061ea:	69bb      	ldr	r3, [r7, #24]
	}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	461a      	mov	r2, r3
 800620c:	21a5      	movs	r1, #165	; 0xa5
 800620e:	f001 fe37 	bl	8007e80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800621c:	3b01      	subs	r3, #1
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	f023 0307 	bic.w	r3, r3, #7
 800622a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	617b      	str	r3, [r7, #20]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01f      	beq.n	8006292 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	e012      	b.n	800627e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	7819      	ldrb	r1, [r3, #0]
 8006260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	3334      	adds	r3, #52	; 0x34
 8006268:	460a      	mov	r2, r1
 800626a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d006      	beq.n	8006286 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	3301      	adds	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	2b0f      	cmp	r3, #15
 8006282:	d9e9      	bls.n	8006258 <prvInitialiseNewTask+0x64>
 8006284:	e000      	b.n	8006288 <prvInitialiseNewTask+0x94>
			{
				break;
 8006286:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006290:	e003      	b.n	800629a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	2b37      	cmp	r3, #55	; 0x37
 800629e:	d901      	bls.n	80062a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062a0:	2337      	movs	r3, #55	; 0x37
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2200      	movs	r2, #0
 80062b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff f978 	bl	80055b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	3318      	adds	r3, #24
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff f973 	bl	80055b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	3354      	adds	r3, #84	; 0x54
 80062f4:	2260      	movs	r2, #96	; 0x60
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fdc1 	bl	8007e80 <memset>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	4a0c      	ldr	r2, [pc, #48]	; (8006334 <prvInitialiseNewTask+0x140>)
 8006302:	659a      	str	r2, [r3, #88]	; 0x58
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	4a0c      	ldr	r2, [pc, #48]	; (8006338 <prvInitialiseNewTask+0x144>)
 8006308:	65da      	str	r2, [r3, #92]	; 0x5c
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	4a0b      	ldr	r2, [pc, #44]	; (800633c <prvInitialiseNewTask+0x148>)
 800630e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	69b8      	ldr	r0, [r7, #24]
 8006316:	f001 f941 	bl	800759c <pxPortInitialiseStack>
 800631a:	4602      	mov	r2, r0
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800632c:	bf00      	nop
 800632e:	3720      	adds	r7, #32
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	0800896c 	.word	0x0800896c
 8006338:	0800898c 	.word	0x0800898c
 800633c:	0800894c 	.word	0x0800894c

08006340 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006348:	f001 fa54 	bl	80077f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800634c:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <prvAddNewTaskToReadyList+0xc4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3301      	adds	r3, #1
 8006352:	4a2c      	ldr	r2, [pc, #176]	; (8006404 <prvAddNewTaskToReadyList+0xc4>)
 8006354:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006356:	4b2c      	ldr	r3, [pc, #176]	; (8006408 <prvAddNewTaskToReadyList+0xc8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800635e:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <prvAddNewTaskToReadyList+0xc8>)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006364:	4b27      	ldr	r3, [pc, #156]	; (8006404 <prvAddNewTaskToReadyList+0xc4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d110      	bne.n	800638e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800636c:	f000 fc26 	bl	8006bbc <prvInitialiseTaskLists>
 8006370:	e00d      	b.n	800638e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006372:	4b26      	ldr	r3, [pc, #152]	; (800640c <prvAddNewTaskToReadyList+0xcc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800637a:	4b23      	ldr	r3, [pc, #140]	; (8006408 <prvAddNewTaskToReadyList+0xc8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	429a      	cmp	r2, r3
 8006386:	d802      	bhi.n	800638e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006388:	4a1f      	ldr	r2, [pc, #124]	; (8006408 <prvAddNewTaskToReadyList+0xc8>)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800638e:	4b20      	ldr	r3, [pc, #128]	; (8006410 <prvAddNewTaskToReadyList+0xd0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <prvAddNewTaskToReadyList+0xd0>)
 8006396:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006398:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <prvAddNewTaskToReadyList+0xd0>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <prvAddNewTaskToReadyList+0xd4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d903      	bls.n	80063b4 <prvAddNewTaskToReadyList+0x74>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4a18      	ldr	r2, [pc, #96]	; (8006414 <prvAddNewTaskToReadyList+0xd4>)
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4a15      	ldr	r2, [pc, #84]	; (8006418 <prvAddNewTaskToReadyList+0xd8>)
 80063c2:	441a      	add	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4619      	mov	r1, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	f7ff f8fd 	bl	80055ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063d0:	f001 fa40 	bl	8007854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063d4:	4b0d      	ldr	r3, [pc, #52]	; (800640c <prvAddNewTaskToReadyList+0xcc>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00e      	beq.n	80063fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063dc:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <prvAddNewTaskToReadyList+0xc8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d207      	bcs.n	80063fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063ea:	4b0c      	ldr	r3, [pc, #48]	; (800641c <prvAddNewTaskToReadyList+0xdc>)
 80063ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000e60 	.word	0x20000e60
 8006408:	2000098c 	.word	0x2000098c
 800640c:	20000e6c 	.word	0x20000e6c
 8006410:	20000e7c 	.word	0x20000e7c
 8006414:	20000e68 	.word	0x20000e68
 8006418:	20000990 	.word	0x20000990
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d017      	beq.n	8006462 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <vTaskDelay+0x60>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <vTaskDelay+0x30>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	60bb      	str	r3, [r7, #8]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006450:	f000 f88a 	bl	8006568 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006454:	2100      	movs	r1, #0
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fcfe 	bl	8006e58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800645c:	f000 f892 	bl	8006584 <xTaskResumeAll>
 8006460:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d107      	bne.n	8006478 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <vTaskDelay+0x64>)
 800646a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006478:	bf00      	nop
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20000e88 	.word	0x20000e88
 8006484:	e000ed04 	.word	0xe000ed04

08006488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006496:	463a      	mov	r2, r7
 8006498:	1d39      	adds	r1, r7, #4
 800649a:	f107 0308 	add.w	r3, r7, #8
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff f832 	bl	8005508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	9202      	str	r2, [sp, #8]
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	2300      	movs	r3, #0
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	2300      	movs	r3, #0
 80064b4:	460a      	mov	r2, r1
 80064b6:	4924      	ldr	r1, [pc, #144]	; (8006548 <vTaskStartScheduler+0xc0>)
 80064b8:	4824      	ldr	r0, [pc, #144]	; (800654c <vTaskStartScheduler+0xc4>)
 80064ba:	f7ff fdf9 	bl	80060b0 <xTaskCreateStatic>
 80064be:	4603      	mov	r3, r0
 80064c0:	4a23      	ldr	r2, [pc, #140]	; (8006550 <vTaskStartScheduler+0xc8>)
 80064c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064c4:	4b22      	ldr	r3, [pc, #136]	; (8006550 <vTaskStartScheduler+0xc8>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	e001      	b.n	80064d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d102      	bne.n	80064e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064dc:	f000 fd10 	bl	8006f00 <xTimerCreateTimerTask>
 80064e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d11b      	bne.n	8006520 <vTaskStartScheduler+0x98>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	613b      	str	r3, [r7, #16]
}
 80064fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064fc:	4b15      	ldr	r3, [pc, #84]	; (8006554 <vTaskStartScheduler+0xcc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3354      	adds	r3, #84	; 0x54
 8006502:	4a15      	ldr	r2, [pc, #84]	; (8006558 <vTaskStartScheduler+0xd0>)
 8006504:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006506:	4b15      	ldr	r3, [pc, #84]	; (800655c <vTaskStartScheduler+0xd4>)
 8006508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800650c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800650e:	4b14      	ldr	r3, [pc, #80]	; (8006560 <vTaskStartScheduler+0xd8>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006514:	4b13      	ldr	r3, [pc, #76]	; (8006564 <vTaskStartScheduler+0xdc>)
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800651a:	f001 f8c9 	bl	80076b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800651e:	e00e      	b.n	800653e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006526:	d10a      	bne.n	800653e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	60fb      	str	r3, [r7, #12]
}
 800653a:	bf00      	nop
 800653c:	e7fe      	b.n	800653c <vTaskStartScheduler+0xb4>
}
 800653e:	bf00      	nop
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	0800888c 	.word	0x0800888c
 800654c:	08006b8d 	.word	0x08006b8d
 8006550:	20000e84 	.word	0x20000e84
 8006554:	2000098c 	.word	0x2000098c
 8006558:	20000010 	.word	0x20000010
 800655c:	20000e80 	.word	0x20000e80
 8006560:	20000e6c 	.word	0x20000e6c
 8006564:	20000e64 	.word	0x20000e64

08006568 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800656c:	4b04      	ldr	r3, [pc, #16]	; (8006580 <vTaskSuspendAll+0x18>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	4a03      	ldr	r2, [pc, #12]	; (8006580 <vTaskSuspendAll+0x18>)
 8006574:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006576:	bf00      	nop
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	20000e88 	.word	0x20000e88

08006584 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800658e:	2300      	movs	r3, #0
 8006590:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006592:	4b42      	ldr	r3, [pc, #264]	; (800669c <xTaskResumeAll+0x118>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	603b      	str	r3, [r7, #0]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065b0:	f001 f920 	bl	80077f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065b4:	4b39      	ldr	r3, [pc, #228]	; (800669c <xTaskResumeAll+0x118>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	4a38      	ldr	r2, [pc, #224]	; (800669c <xTaskResumeAll+0x118>)
 80065bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065be:	4b37      	ldr	r3, [pc, #220]	; (800669c <xTaskResumeAll+0x118>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d162      	bne.n	800668c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065c6:	4b36      	ldr	r3, [pc, #216]	; (80066a0 <xTaskResumeAll+0x11c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d05e      	beq.n	800668c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ce:	e02f      	b.n	8006630 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d0:	4b34      	ldr	r3, [pc, #208]	; (80066a4 <xTaskResumeAll+0x120>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3318      	adds	r3, #24
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff f851 	bl	8005684 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff f84c 	bl	8005684 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f0:	4b2d      	ldr	r3, [pc, #180]	; (80066a8 <xTaskResumeAll+0x124>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d903      	bls.n	8006600 <xTaskResumeAll+0x7c>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4a2a      	ldr	r2, [pc, #168]	; (80066a8 <xTaskResumeAll+0x124>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4a27      	ldr	r2, [pc, #156]	; (80066ac <xTaskResumeAll+0x128>)
 800660e:	441a      	add	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f7fe ffd7 	bl	80055ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	4b23      	ldr	r3, [pc, #140]	; (80066b0 <xTaskResumeAll+0x12c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	429a      	cmp	r2, r3
 8006628:	d302      	bcc.n	8006630 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800662a:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <xTaskResumeAll+0x130>)
 800662c:	2201      	movs	r2, #1
 800662e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006630:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <xTaskResumeAll+0x120>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1cb      	bne.n	80065d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800663e:	f000 fb5f 	bl	8006d00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006642:	4b1d      	ldr	r3, [pc, #116]	; (80066b8 <xTaskResumeAll+0x134>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d010      	beq.n	8006670 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800664e:	f000 f847 	bl	80066e0 <xTaskIncrementTick>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006658:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <xTaskResumeAll+0x130>)
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3b01      	subs	r3, #1
 8006662:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f1      	bne.n	800664e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <xTaskResumeAll+0x134>)
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006670:	4b10      	ldr	r3, [pc, #64]	; (80066b4 <xTaskResumeAll+0x130>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d009      	beq.n	800668c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006678:	2301      	movs	r3, #1
 800667a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800667c:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <xTaskResumeAll+0x138>)
 800667e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800668c:	f001 f8e2 	bl	8007854 <vPortExitCritical>

	return xAlreadyYielded;
 8006690:	68bb      	ldr	r3, [r7, #8]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000e88 	.word	0x20000e88
 80066a0:	20000e60 	.word	0x20000e60
 80066a4:	20000e20 	.word	0x20000e20
 80066a8:	20000e68 	.word	0x20000e68
 80066ac:	20000990 	.word	0x20000990
 80066b0:	2000098c 	.word	0x2000098c
 80066b4:	20000e74 	.word	0x20000e74
 80066b8:	20000e70 	.word	0x20000e70
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066c6:	4b05      	ldr	r3, [pc, #20]	; (80066dc <xTaskGetTickCount+0x1c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066cc:	687b      	ldr	r3, [r7, #4]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000e64 	.word	0x20000e64

080066e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ea:	4b4f      	ldr	r3, [pc, #316]	; (8006828 <xTaskIncrementTick+0x148>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 808f 	bne.w	8006812 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066f4:	4b4d      	ldr	r3, [pc, #308]	; (800682c <xTaskIncrementTick+0x14c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3301      	adds	r3, #1
 80066fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066fc:	4a4b      	ldr	r2, [pc, #300]	; (800682c <xTaskIncrementTick+0x14c>)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d120      	bne.n	800674a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006708:	4b49      	ldr	r3, [pc, #292]	; (8006830 <xTaskIncrementTick+0x150>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <xTaskIncrementTick+0x48>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	603b      	str	r3, [r7, #0]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xTaskIncrementTick+0x46>
 8006728:	4b41      	ldr	r3, [pc, #260]	; (8006830 <xTaskIncrementTick+0x150>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	4b41      	ldr	r3, [pc, #260]	; (8006834 <xTaskIncrementTick+0x154>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a3f      	ldr	r2, [pc, #252]	; (8006830 <xTaskIncrementTick+0x150>)
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	4a3f      	ldr	r2, [pc, #252]	; (8006834 <xTaskIncrementTick+0x154>)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	4b3e      	ldr	r3, [pc, #248]	; (8006838 <xTaskIncrementTick+0x158>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a3d      	ldr	r2, [pc, #244]	; (8006838 <xTaskIncrementTick+0x158>)
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	f000 fadb 	bl	8006d00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800674a:	4b3c      	ldr	r3, [pc, #240]	; (800683c <xTaskIncrementTick+0x15c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	429a      	cmp	r2, r3
 8006752:	d349      	bcc.n	80067e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006754:	4b36      	ldr	r3, [pc, #216]	; (8006830 <xTaskIncrementTick+0x150>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800675e:	4b37      	ldr	r3, [pc, #220]	; (800683c <xTaskIncrementTick+0x15c>)
 8006760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006764:	601a      	str	r2, [r3, #0]
					break;
 8006766:	e03f      	b.n	80067e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006768:	4b31      	ldr	r3, [pc, #196]	; (8006830 <xTaskIncrementTick+0x150>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	429a      	cmp	r2, r3
 800677e:	d203      	bcs.n	8006788 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006780:	4a2e      	ldr	r2, [pc, #184]	; (800683c <xTaskIncrementTick+0x15c>)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006786:	e02f      	b.n	80067e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	3304      	adds	r3, #4
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe ff79 	bl	8005684 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	3318      	adds	r3, #24
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe ff70 	bl	8005684 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4b25      	ldr	r3, [pc, #148]	; (8006840 <xTaskIncrementTick+0x160>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d903      	bls.n	80067b8 <xTaskIncrementTick+0xd8>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	4a22      	ldr	r2, [pc, #136]	; (8006840 <xTaskIncrementTick+0x160>)
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4a1f      	ldr	r2, [pc, #124]	; (8006844 <xTaskIncrementTick+0x164>)
 80067c6:	441a      	add	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7fe fefb 	bl	80055ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d8:	4b1b      	ldr	r3, [pc, #108]	; (8006848 <xTaskIncrementTick+0x168>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	429a      	cmp	r2, r3
 80067e0:	d3b8      	bcc.n	8006754 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067e2:	2301      	movs	r3, #1
 80067e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e6:	e7b5      	b.n	8006754 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067e8:	4b17      	ldr	r3, [pc, #92]	; (8006848 <xTaskIncrementTick+0x168>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ee:	4915      	ldr	r1, [pc, #84]	; (8006844 <xTaskIncrementTick+0x164>)
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d901      	bls.n	8006804 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006800:	2301      	movs	r3, #1
 8006802:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <xTaskIncrementTick+0x16c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d007      	beq.n	800681c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800680c:	2301      	movs	r3, #1
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e004      	b.n	800681c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006812:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <xTaskIncrementTick+0x170>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3301      	adds	r3, #1
 8006818:	4a0d      	ldr	r2, [pc, #52]	; (8006850 <xTaskIncrementTick+0x170>)
 800681a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800681c:	697b      	ldr	r3, [r7, #20]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000e88 	.word	0x20000e88
 800682c:	20000e64 	.word	0x20000e64
 8006830:	20000e18 	.word	0x20000e18
 8006834:	20000e1c 	.word	0x20000e1c
 8006838:	20000e78 	.word	0x20000e78
 800683c:	20000e80 	.word	0x20000e80
 8006840:	20000e68 	.word	0x20000e68
 8006844:	20000990 	.word	0x20000990
 8006848:	2000098c 	.word	0x2000098c
 800684c:	20000e74 	.word	0x20000e74
 8006850:	20000e70 	.word	0x20000e70

08006854 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800685a:	4b2a      	ldr	r3, [pc, #168]	; (8006904 <vTaskSwitchContext+0xb0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006862:	4b29      	ldr	r3, [pc, #164]	; (8006908 <vTaskSwitchContext+0xb4>)
 8006864:	2201      	movs	r2, #1
 8006866:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006868:	e046      	b.n	80068f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800686a:	4b27      	ldr	r3, [pc, #156]	; (8006908 <vTaskSwitchContext+0xb4>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006870:	4b26      	ldr	r3, [pc, #152]	; (800690c <vTaskSwitchContext+0xb8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	e010      	b.n	800689a <vTaskSwitchContext+0x46>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10a      	bne.n	8006894 <vTaskSwitchContext+0x40>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	607b      	str	r3, [r7, #4]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <vTaskSwitchContext+0x3e>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3b01      	subs	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	491d      	ldr	r1, [pc, #116]	; (8006910 <vTaskSwitchContext+0xbc>)
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0e4      	beq.n	8006878 <vTaskSwitchContext+0x24>
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4a15      	ldr	r2, [pc, #84]	; (8006910 <vTaskSwitchContext+0xbc>)
 80068ba:	4413      	add	r3, r2
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	605a      	str	r2, [r3, #4]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	3308      	adds	r3, #8
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d104      	bne.n	80068de <vTaskSwitchContext+0x8a>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	4a0b      	ldr	r2, [pc, #44]	; (8006914 <vTaskSwitchContext+0xc0>)
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	4a08      	ldr	r2, [pc, #32]	; (800690c <vTaskSwitchContext+0xb8>)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <vTaskSwitchContext+0xc0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3354      	adds	r3, #84	; 0x54
 80068f4:	4a08      	ldr	r2, [pc, #32]	; (8006918 <vTaskSwitchContext+0xc4>)
 80068f6:	6013      	str	r3, [r2, #0]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20000e88 	.word	0x20000e88
 8006908:	20000e74 	.word	0x20000e74
 800690c:	20000e68 	.word	0x20000e68
 8006910:	20000990 	.word	0x20000990
 8006914:	2000098c 	.word	0x2000098c
 8006918:	20000010 	.word	0x20000010

0800691c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60fb      	str	r3, [r7, #12]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <vTaskPlaceOnEventList+0x44>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3318      	adds	r3, #24
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fe fe61 	bl	8005612 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006950:	2101      	movs	r1, #1
 8006952:	6838      	ldr	r0, [r7, #0]
 8006954:	f000 fa80 	bl	8006e58 <prvAddCurrentTaskToDelayedList>
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	2000098c 	.word	0x2000098c

08006964 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10a      	bne.n	800698c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	617b      	str	r3, [r7, #20]
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3318      	adds	r3, #24
 8006992:	4619      	mov	r1, r3
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f7fe fe18 	bl	80055ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	68b8      	ldr	r0, [r7, #8]
 80069aa:	f000 fa55 	bl	8006e58 <prvAddCurrentTaskToDelayedList>
	}
 80069ae:	bf00      	nop
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	2000098c 	.word	0x2000098c

080069bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	60fb      	str	r3, [r7, #12]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3318      	adds	r3, #24
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe fe49 	bl	8005684 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f2:	4b1e      	ldr	r3, [pc, #120]	; (8006a6c <xTaskRemoveFromEventList+0xb0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11d      	bne.n	8006a36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fe40 	bl	8005684 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a08:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <xTaskRemoveFromEventList+0xb4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d903      	bls.n	8006a18 <xTaskRemoveFromEventList+0x5c>
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <xTaskRemoveFromEventList+0xb4>)
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4a13      	ldr	r2, [pc, #76]	; (8006a74 <xTaskRemoveFromEventList+0xb8>)
 8006a26:	441a      	add	r2, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f7fe fdcb 	bl	80055ca <vListInsertEnd>
 8006a34:	e005      	b.n	8006a42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	3318      	adds	r3, #24
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	480e      	ldr	r0, [pc, #56]	; (8006a78 <xTaskRemoveFromEventList+0xbc>)
 8006a3e:	f7fe fdc4 	bl	80055ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <xTaskRemoveFromEventList+0xc0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d905      	bls.n	8006a5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a50:	2301      	movs	r3, #1
 8006a52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <xTaskRemoveFromEventList+0xc4>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e001      	b.n	8006a60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a60:	697b      	ldr	r3, [r7, #20]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000e88 	.word	0x20000e88
 8006a70:	20000e68 	.word	0x20000e68
 8006a74:	20000990 	.word	0x20000990
 8006a78:	20000e20 	.word	0x20000e20
 8006a7c:	2000098c 	.word	0x2000098c
 8006a80:	20000e74 	.word	0x20000e74

08006a84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <vTaskInternalSetTimeOutState+0x24>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <vTaskInternalSetTimeOutState+0x28>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	605a      	str	r2, [r3, #4]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	20000e78 	.word	0x20000e78
 8006aac:	20000e64 	.word	0x20000e64

08006ab0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	613b      	str	r3, [r7, #16]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	60fb      	str	r3, [r7, #12]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006af2:	f000 fe7f 	bl	80077f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006af6:	4b1d      	ldr	r3, [pc, #116]	; (8006b6c <xTaskCheckForTimeOut+0xbc>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b0e:	d102      	bne.n	8006b16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61fb      	str	r3, [r7, #28]
 8006b14:	e023      	b.n	8006b5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <xTaskCheckForTimeOut+0xc0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d007      	beq.n	8006b32 <xTaskCheckForTimeOut+0x82>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	e015      	b.n	8006b5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d20b      	bcs.n	8006b54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ff9b 	bl	8006a84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61fb      	str	r3, [r7, #28]
 8006b52:	e004      	b.n	8006b5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b5e:	f000 fe79 	bl	8007854 <vPortExitCritical>

	return xReturn;
 8006b62:	69fb      	ldr	r3, [r7, #28]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3720      	adds	r7, #32
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20000e64 	.word	0x20000e64
 8006b70:	20000e78 	.word	0x20000e78

08006b74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b78:	4b03      	ldr	r3, [pc, #12]	; (8006b88 <vTaskMissedYield+0x14>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
}
 8006b7e:	bf00      	nop
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	20000e74 	.word	0x20000e74

08006b8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b94:	f000 f852 	bl	8006c3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b98:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <prvIdleTask+0x28>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d9f9      	bls.n	8006b94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <prvIdleTask+0x2c>)
 8006ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bb0:	e7f0      	b.n	8006b94 <prvIdleTask+0x8>
 8006bb2:	bf00      	nop
 8006bb4:	20000990 	.word	0x20000990
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	607b      	str	r3, [r7, #4]
 8006bc6:	e00c      	b.n	8006be2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4a12      	ldr	r2, [pc, #72]	; (8006c1c <prvInitialiseTaskLists+0x60>)
 8006bd4:	4413      	add	r3, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fcca 	bl	8005570 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3301      	adds	r3, #1
 8006be0:	607b      	str	r3, [r7, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b37      	cmp	r3, #55	; 0x37
 8006be6:	d9ef      	bls.n	8006bc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006be8:	480d      	ldr	r0, [pc, #52]	; (8006c20 <prvInitialiseTaskLists+0x64>)
 8006bea:	f7fe fcc1 	bl	8005570 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bee:	480d      	ldr	r0, [pc, #52]	; (8006c24 <prvInitialiseTaskLists+0x68>)
 8006bf0:	f7fe fcbe 	bl	8005570 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bf4:	480c      	ldr	r0, [pc, #48]	; (8006c28 <prvInitialiseTaskLists+0x6c>)
 8006bf6:	f7fe fcbb 	bl	8005570 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bfa:	480c      	ldr	r0, [pc, #48]	; (8006c2c <prvInitialiseTaskLists+0x70>)
 8006bfc:	f7fe fcb8 	bl	8005570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c00:	480b      	ldr	r0, [pc, #44]	; (8006c30 <prvInitialiseTaskLists+0x74>)
 8006c02:	f7fe fcb5 	bl	8005570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <prvInitialiseTaskLists+0x78>)
 8006c08:	4a05      	ldr	r2, [pc, #20]	; (8006c20 <prvInitialiseTaskLists+0x64>)
 8006c0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <prvInitialiseTaskLists+0x7c>)
 8006c0e:	4a05      	ldr	r2, [pc, #20]	; (8006c24 <prvInitialiseTaskLists+0x68>)
 8006c10:	601a      	str	r2, [r3, #0]
}
 8006c12:	bf00      	nop
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000990 	.word	0x20000990
 8006c20:	20000df0 	.word	0x20000df0
 8006c24:	20000e04 	.word	0x20000e04
 8006c28:	20000e20 	.word	0x20000e20
 8006c2c:	20000e34 	.word	0x20000e34
 8006c30:	20000e4c 	.word	0x20000e4c
 8006c34:	20000e18 	.word	0x20000e18
 8006c38:	20000e1c 	.word	0x20000e1c

08006c3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c42:	e019      	b.n	8006c78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c44:	f000 fdd6 	bl	80077f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c48:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <prvCheckTasksWaitingTermination+0x50>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe fd15 	bl	8005684 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <prvCheckTasksWaitingTermination+0x54>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	4a0b      	ldr	r2, [pc, #44]	; (8006c90 <prvCheckTasksWaitingTermination+0x54>)
 8006c62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <prvCheckTasksWaitingTermination+0x58>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	4a0a      	ldr	r2, [pc, #40]	; (8006c94 <prvCheckTasksWaitingTermination+0x58>)
 8006c6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c6e:	f000 fdf1 	bl	8007854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f810 	bl	8006c98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <prvCheckTasksWaitingTermination+0x58>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e1      	bne.n	8006c44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c80:	bf00      	nop
 8006c82:	bf00      	nop
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000e34 	.word	0x20000e34
 8006c90:	20000e60 	.word	0x20000e60
 8006c94:	20000e48 	.word	0x20000e48

08006c98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3354      	adds	r3, #84	; 0x54
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f001 f995 	bl	8007fd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 ff89 	bl	8007bd0 <vPortFree>
				vPortFree( pxTCB );
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 ff86 	bl	8007bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cc4:	e018      	b.n	8006cf8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d103      	bne.n	8006cd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 ff7d 	bl	8007bd0 <vPortFree>
	}
 8006cd6:	e00f      	b.n	8006cf8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d00a      	beq.n	8006cf8 <prvDeleteTCB+0x60>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60fb      	str	r3, [r7, #12]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <prvDeleteTCB+0x5e>
	}
 8006cf8:	bf00      	nop
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d06:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <prvResetNextTaskUnblockTime+0x38>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <prvResetNextTaskUnblockTime+0x3c>)
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d18:	e008      	b.n	8006d2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1a:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <prvResetNextTaskUnblockTime+0x38>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	4a04      	ldr	r2, [pc, #16]	; (8006d3c <prvResetNextTaskUnblockTime+0x3c>)
 8006d2a:	6013      	str	r3, [r2, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20000e18 	.word	0x20000e18
 8006d3c:	20000e80 	.word	0x20000e80

08006d40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <xTaskGetSchedulerState+0x34>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	e008      	b.n	8006d66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d54:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <xTaskGetSchedulerState+0x38>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	607b      	str	r3, [r7, #4]
 8006d60:	e001      	b.n	8006d66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d62:	2300      	movs	r3, #0
 8006d64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d66:	687b      	ldr	r3, [r7, #4]
	}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	20000e6c 	.word	0x20000e6c
 8006d78:	20000e88 	.word	0x20000e88

08006d7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d056      	beq.n	8006e40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d92:	4b2e      	ldr	r3, [pc, #184]	; (8006e4c <xTaskPriorityDisinherit+0xd0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d00a      	beq.n	8006db2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	60fb      	str	r3, [r7, #12]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	60bb      	str	r3, [r7, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd4:	1e5a      	subs	r2, r3, #1
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d02c      	beq.n	8006e40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d128      	bne.n	8006e40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fc46 	bl	8005684 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <xTaskPriorityDisinherit+0xd4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d903      	bls.n	8006e20 <xTaskPriorityDisinherit+0xa4>
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	4a0c      	ldr	r2, [pc, #48]	; (8006e50 <xTaskPriorityDisinherit+0xd4>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <xTaskPriorityDisinherit+0xd8>)
 8006e2e:	441a      	add	r2, r3
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7fe fbc7 	bl	80055ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e40:	697b      	ldr	r3, [r7, #20]
	}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	2000098c 	.word	0x2000098c
 8006e50:	20000e68 	.word	0x20000e68
 8006e54:	20000990 	.word	0x20000990

08006e58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e62:	4b21      	ldr	r3, [pc, #132]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e68:	4b20      	ldr	r3, [pc, #128]	; (8006eec <prvAddCurrentTaskToDelayedList+0x94>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fc08 	bl	8005684 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e7a:	d10a      	bne.n	8006e92 <prvAddCurrentTaskToDelayedList+0x3a>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e82:	4b1a      	ldr	r3, [pc, #104]	; (8006eec <prvAddCurrentTaskToDelayedList+0x94>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4819      	ldr	r0, [pc, #100]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e8c:	f7fe fb9d 	bl	80055ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e90:	e026      	b.n	8006ee0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4413      	add	r3, r2
 8006e98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e9a:	4b14      	ldr	r3, [pc, #80]	; (8006eec <prvAddCurrentTaskToDelayedList+0x94>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d209      	bcs.n	8006ebe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eaa:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f7fe fbab 	bl	8005612 <vListInsert>
}
 8006ebc:	e010      	b.n	8006ee0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7fe fba1 	bl	8005612 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d202      	bcs.n	8006ee0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006eda:	4a08      	ldr	r2, [pc, #32]	; (8006efc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6013      	str	r3, [r2, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000e64 	.word	0x20000e64
 8006eec:	2000098c 	.word	0x2000098c
 8006ef0:	20000e4c 	.word	0x20000e4c
 8006ef4:	20000e1c 	.word	0x20000e1c
 8006ef8:	20000e18 	.word	0x20000e18
 8006efc:	20000e80 	.word	0x20000e80

08006f00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	; 0x28
 8006f04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f0a:	f000 fb07 	bl	800751c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f0e:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <xTimerCreateTimerTask+0x80>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d021      	beq.n	8006f5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f1e:	1d3a      	adds	r2, r7, #4
 8006f20:	f107 0108 	add.w	r1, r7, #8
 8006f24:	f107 030c 	add.w	r3, r7, #12
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fb07 	bl	800553c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	9202      	str	r2, [sp, #8]
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	2302      	movs	r3, #2
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	460a      	mov	r2, r1
 8006f40:	4910      	ldr	r1, [pc, #64]	; (8006f84 <xTimerCreateTimerTask+0x84>)
 8006f42:	4811      	ldr	r0, [pc, #68]	; (8006f88 <xTimerCreateTimerTask+0x88>)
 8006f44:	f7ff f8b4 	bl	80060b0 <xTaskCreateStatic>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	4a10      	ldr	r2, [pc, #64]	; (8006f8c <xTimerCreateTimerTask+0x8c>)
 8006f4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f4e:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <xTimerCreateTimerTask+0x8c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f56:	2301      	movs	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	613b      	str	r3, [r7, #16]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f76:	697b      	ldr	r3, [r7, #20]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20000ebc 	.word	0x20000ebc
 8006f84:	08008894 	.word	0x08008894
 8006f88:	080070c5 	.word	0x080070c5
 8006f8c:	20000ec0 	.word	0x20000ec0

08006f90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	623b      	str	r3, [r7, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fbe:	4b1a      	ldr	r3, [pc, #104]	; (8007028 <xTimerGenericCommand+0x98>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d02a      	beq.n	800701c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b05      	cmp	r3, #5
 8006fd6:	dc18      	bgt.n	800700a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fd8:	f7ff feb2 	bl	8006d40 <xTaskGetSchedulerState>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d109      	bne.n	8006ff6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fe2:	4b11      	ldr	r3, [pc, #68]	; (8007028 <xTimerGenericCommand+0x98>)
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	f107 0110 	add.w	r1, r7, #16
 8006fea:	2300      	movs	r3, #0
 8006fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fee:	f7fe fc77 	bl	80058e0 <xQueueGenericSend>
 8006ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ff4:	e012      	b.n	800701c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <xTimerGenericCommand+0x98>)
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	f107 0110 	add.w	r1, r7, #16
 8006ffe:	2300      	movs	r3, #0
 8007000:	2200      	movs	r2, #0
 8007002:	f7fe fc6d 	bl	80058e0 <xQueueGenericSend>
 8007006:	6278      	str	r0, [r7, #36]	; 0x24
 8007008:	e008      	b.n	800701c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800700a:	4b07      	ldr	r3, [pc, #28]	; (8007028 <xTimerGenericCommand+0x98>)
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	f107 0110 	add.w	r1, r7, #16
 8007012:	2300      	movs	r3, #0
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	f7fe fd61 	bl	8005adc <xQueueGenericSendFromISR>
 800701a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800701e:	4618      	mov	r0, r3
 8007020:	3728      	adds	r7, #40	; 0x28
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000ebc 	.word	0x20000ebc

0800702c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af02      	add	r7, sp, #8
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007036:	4b22      	ldr	r3, [pc, #136]	; (80070c0 <prvProcessExpiredTimer+0x94>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	3304      	adds	r3, #4
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fb1d 	bl	8005684 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	d022      	beq.n	800709e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	699a      	ldr	r2, [r3, #24]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	18d1      	adds	r1, r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	6978      	ldr	r0, [r7, #20]
 8007066:	f000 f8d1 	bl	800720c <prvInsertTimerInActiveList>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01f      	beq.n	80070b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007070:	2300      	movs	r3, #0
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	2300      	movs	r3, #0
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	2100      	movs	r1, #0
 800707a:	6978      	ldr	r0, [r7, #20]
 800707c:	f7ff ff88 	bl	8006f90 <xTimerGenericCommand>
 8007080:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d113      	bne.n	80070b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	60fb      	str	r3, [r7, #12]
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a4:	f023 0301 	bic.w	r3, r3, #1
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	6978      	ldr	r0, [r7, #20]
 80070b6:	4798      	blx	r3
}
 80070b8:	bf00      	nop
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000eb4 	.word	0x20000eb4

080070c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070cc:	f107 0308 	add.w	r3, r7, #8
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 f857 	bl	8007184 <prvGetNextExpireTime>
 80070d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4619      	mov	r1, r3
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 f803 	bl	80070e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070e2:	f000 f8d5 	bl	8007290 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070e6:	e7f1      	b.n	80070cc <prvTimerTask+0x8>

080070e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070f2:	f7ff fa39 	bl	8006568 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070f6:	f107 0308 	add.w	r3, r7, #8
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 f866 	bl	80071cc <prvSampleTimeNow>
 8007100:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d130      	bne.n	800716a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <prvProcessTimerOrBlockTask+0x3c>
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	429a      	cmp	r2, r3
 8007114:	d806      	bhi.n	8007124 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007116:	f7ff fa35 	bl	8006584 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800711a:	68f9      	ldr	r1, [r7, #12]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff ff85 	bl	800702c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007122:	e024      	b.n	800716e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d008      	beq.n	800713c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800712a:	4b13      	ldr	r3, [pc, #76]	; (8007178 <prvProcessTimerOrBlockTask+0x90>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <prvProcessTimerOrBlockTask+0x50>
 8007134:	2301      	movs	r3, #1
 8007136:	e000      	b.n	800713a <prvProcessTimerOrBlockTask+0x52>
 8007138:	2300      	movs	r3, #0
 800713a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800713c:	4b0f      	ldr	r3, [pc, #60]	; (800717c <prvProcessTimerOrBlockTask+0x94>)
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	4619      	mov	r1, r3
 800714a:	f7fe ff7d 	bl	8006048 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800714e:	f7ff fa19 	bl	8006584 <xTaskResumeAll>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10a      	bne.n	800716e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007158:	4b09      	ldr	r3, [pc, #36]	; (8007180 <prvProcessTimerOrBlockTask+0x98>)
 800715a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	f3bf 8f6f 	isb	sy
}
 8007168:	e001      	b.n	800716e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800716a:	f7ff fa0b 	bl	8006584 <xTaskResumeAll>
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000eb8 	.word	0x20000eb8
 800717c:	20000ebc 	.word	0x20000ebc
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800718c:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <prvGetNextExpireTime+0x44>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <prvGetNextExpireTime+0x16>
 8007196:	2201      	movs	r2, #1
 8007198:	e000      	b.n	800719c <prvGetNextExpireTime+0x18>
 800719a:	2200      	movs	r2, #0
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071a8:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <prvGetNextExpireTime+0x44>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	e001      	b.n	80071b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071b8:	68fb      	ldr	r3, [r7, #12]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20000eb4 	.word	0x20000eb4

080071cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071d4:	f7ff fa74 	bl	80066c0 <xTaskGetTickCount>
 80071d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071da:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <prvSampleTimeNow+0x3c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d205      	bcs.n	80071f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071e4:	f000 f936 	bl	8007454 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071f6:	4a04      	ldr	r2, [pc, #16]	; (8007208 <prvSampleTimeNow+0x3c>)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071fc:	68fb      	ldr	r3, [r7, #12]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000ec4 	.word	0x20000ec4

0800720c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	429a      	cmp	r2, r3
 8007230:	d812      	bhi.n	8007258 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	1ad2      	subs	r2, r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	429a      	cmp	r2, r3
 800723e:	d302      	bcc.n	8007246 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007240:	2301      	movs	r3, #1
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	e01b      	b.n	800727e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007246:	4b10      	ldr	r3, [pc, #64]	; (8007288 <prvInsertTimerInActiveList+0x7c>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3304      	adds	r3, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7fe f9de 	bl	8005612 <vListInsert>
 8007256:	e012      	b.n	800727e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d206      	bcs.n	800726e <prvInsertTimerInActiveList+0x62>
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d302      	bcc.n	800726e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007268:	2301      	movs	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	e007      	b.n	800727e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800726e:	4b07      	ldr	r3, [pc, #28]	; (800728c <prvInsertTimerInActiveList+0x80>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3304      	adds	r3, #4
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f7fe f9ca 	bl	8005612 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800727e:	697b      	ldr	r3, [r7, #20]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20000eb8 	.word	0x20000eb8
 800728c:	20000eb4 	.word	0x20000eb4

08007290 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08e      	sub	sp, #56	; 0x38
 8007294:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007296:	e0ca      	b.n	800742e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	da18      	bge.n	80072d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800729e:	1d3b      	adds	r3, r7, #4
 80072a0:	3304      	adds	r3, #4
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	61fb      	str	r3, [r7, #28]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c6:	6850      	ldr	r0, [r2, #4]
 80072c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ca:	6892      	ldr	r2, [r2, #8]
 80072cc:	4611      	mov	r1, r2
 80072ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f2c0 80aa 	blt.w	800742c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	3304      	adds	r3, #4
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe f9cb 	bl	8005684 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ee:	463b      	mov	r3, r7
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff ff6b 	bl	80071cc <prvSampleTimeNow>
 80072f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b09      	cmp	r3, #9
 80072fc:	f200 8097 	bhi.w	800742e <prvProcessReceivedCommands+0x19e>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <prvProcessReceivedCommands+0x78>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	08007331 	.word	0x08007331
 800730c:	08007331 	.word	0x08007331
 8007310:	08007331 	.word	0x08007331
 8007314:	080073a5 	.word	0x080073a5
 8007318:	080073b9 	.word	0x080073b9
 800731c:	08007403 	.word	0x08007403
 8007320:	08007331 	.word	0x08007331
 8007324:	08007331 	.word	0x08007331
 8007328:	080073a5 	.word	0x080073a5
 800732c:	080073b9 	.word	0x080073b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	b2da      	uxtb	r2, r3
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	18d1      	adds	r1, r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800734e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007350:	f7ff ff5c 	bl	800720c <prvInsertTimerInActiveList>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d069      	beq.n	800742e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007360:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d05e      	beq.n	800742e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	441a      	add	r2, r3
 8007378:	2300      	movs	r3, #0
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	2300      	movs	r3, #0
 800737e:	2100      	movs	r1, #0
 8007380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007382:	f7ff fe05 	bl	8006f90 <xTimerGenericCommand>
 8007386:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d14f      	bne.n	800742e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	61bb      	str	r3, [r7, #24]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073aa:	f023 0301 	bic.w	r3, r3, #1
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073b6:	e03a      	b.n	800742e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	617b      	str	r3, [r7, #20]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	18d1      	adds	r1, r2, r3
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fc:	f7ff ff06 	bl	800720c <prvInsertTimerInActiveList>
					break;
 8007400:	e015      	b.n	800742e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007412:	f000 fbdd 	bl	8007bd0 <vPortFree>
 8007416:	e00a      	b.n	800742e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	b2da      	uxtb	r2, r3
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800742a:	e000      	b.n	800742e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800742c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800742e:	4b08      	ldr	r3, [pc, #32]	; (8007450 <prvProcessReceivedCommands+0x1c0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	1d39      	adds	r1, r7, #4
 8007434:	2200      	movs	r2, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fbec 	bl	8005c14 <xQueueReceive>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	f47f af2a 	bne.w	8007298 <prvProcessReceivedCommands+0x8>
	}
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	3730      	adds	r7, #48	; 0x30
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000ebc 	.word	0x20000ebc

08007454 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800745a:	e048      	b.n	80074ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800745c:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <prvSwitchTimerLists+0xc0>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007466:	4b2b      	ldr	r3, [pc, #172]	; (8007514 <prvSwitchTimerLists+0xc0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3304      	adds	r3, #4
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe f905 	bl	8005684 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d02e      	beq.n	80074ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4413      	add	r3, r2
 8007498:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d90e      	bls.n	80074c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ae:	4b19      	ldr	r3, [pc, #100]	; (8007514 <prvSwitchTimerLists+0xc0>)
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe f8aa 	bl	8005612 <vListInsert>
 80074be:	e016      	b.n	80074ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074c0:	2300      	movs	r3, #0
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	2300      	movs	r3, #0
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	2100      	movs	r1, #0
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff fd60 	bl	8006f90 <xTimerGenericCommand>
 80074d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	603b      	str	r3, [r7, #0]
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <prvSwitchTimerLists+0xc0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1b1      	bne.n	800745c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074f8:	4b06      	ldr	r3, [pc, #24]	; (8007514 <prvSwitchTimerLists+0xc0>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074fe:	4b06      	ldr	r3, [pc, #24]	; (8007518 <prvSwitchTimerLists+0xc4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a04      	ldr	r2, [pc, #16]	; (8007514 <prvSwitchTimerLists+0xc0>)
 8007504:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007506:	4a04      	ldr	r2, [pc, #16]	; (8007518 <prvSwitchTimerLists+0xc4>)
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	6013      	str	r3, [r2, #0]
}
 800750c:	bf00      	nop
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000eb4 	.word	0x20000eb4
 8007518:	20000eb8 	.word	0x20000eb8

0800751c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007522:	f000 f967 	bl	80077f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007526:	4b15      	ldr	r3, [pc, #84]	; (800757c <prvCheckForValidListAndQueue+0x60>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d120      	bne.n	8007570 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800752e:	4814      	ldr	r0, [pc, #80]	; (8007580 <prvCheckForValidListAndQueue+0x64>)
 8007530:	f7fe f81e 	bl	8005570 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007534:	4813      	ldr	r0, [pc, #76]	; (8007584 <prvCheckForValidListAndQueue+0x68>)
 8007536:	f7fe f81b 	bl	8005570 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800753a:	4b13      	ldr	r3, [pc, #76]	; (8007588 <prvCheckForValidListAndQueue+0x6c>)
 800753c:	4a10      	ldr	r2, [pc, #64]	; (8007580 <prvCheckForValidListAndQueue+0x64>)
 800753e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007540:	4b12      	ldr	r3, [pc, #72]	; (800758c <prvCheckForValidListAndQueue+0x70>)
 8007542:	4a10      	ldr	r2, [pc, #64]	; (8007584 <prvCheckForValidListAndQueue+0x68>)
 8007544:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007546:	2300      	movs	r3, #0
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <prvCheckForValidListAndQueue+0x74>)
 800754c:	4a11      	ldr	r2, [pc, #68]	; (8007594 <prvCheckForValidListAndQueue+0x78>)
 800754e:	2110      	movs	r1, #16
 8007550:	200a      	movs	r0, #10
 8007552:	f7fe f929 	bl	80057a8 <xQueueGenericCreateStatic>
 8007556:	4603      	mov	r3, r0
 8007558:	4a08      	ldr	r2, [pc, #32]	; (800757c <prvCheckForValidListAndQueue+0x60>)
 800755a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800755c:	4b07      	ldr	r3, [pc, #28]	; (800757c <prvCheckForValidListAndQueue+0x60>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d005      	beq.n	8007570 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <prvCheckForValidListAndQueue+0x60>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	490b      	ldr	r1, [pc, #44]	; (8007598 <prvCheckForValidListAndQueue+0x7c>)
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe fd42 	bl	8005ff4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007570:	f000 f970 	bl	8007854 <vPortExitCritical>
}
 8007574:	bf00      	nop
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000ebc 	.word	0x20000ebc
 8007580:	20000e8c 	.word	0x20000e8c
 8007584:	20000ea0 	.word	0x20000ea0
 8007588:	20000eb4 	.word	0x20000eb4
 800758c:	20000eb8 	.word	0x20000eb8
 8007590:	20000f68 	.word	0x20000f68
 8007594:	20000ec8 	.word	0x20000ec8
 8007598:	0800889c 	.word	0x0800889c

0800759c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3b04      	subs	r3, #4
 80075ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3b04      	subs	r3, #4
 80075ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f023 0201 	bic.w	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3b04      	subs	r3, #4
 80075ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075cc:	4a0c      	ldr	r2, [pc, #48]	; (8007600 <pxPortInitialiseStack+0x64>)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3b14      	subs	r3, #20
 80075d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f06f 0202 	mvn.w	r2, #2
 80075ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3b20      	subs	r3, #32
 80075f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075f2:	68fb      	ldr	r3, [r7, #12]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	08007605 	.word	0x08007605

08007604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800760e:	4b12      	ldr	r3, [pc, #72]	; (8007658 <prvTaskExitError+0x54>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007616:	d00a      	beq.n	800762e <prvTaskExitError+0x2a>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	60fb      	str	r3, [r7, #12]
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <prvTaskExitError+0x28>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	60bb      	str	r3, [r7, #8]
}
 8007640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007642:	bf00      	nop
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0fc      	beq.n	8007644 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	2000000c 	.word	0x2000000c
 800765c:	00000000 	.word	0x00000000

08007660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <pxCurrentTCBConst2>)
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	6808      	ldr	r0, [r1, #0]
 8007666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	f380 8809 	msr	PSP, r0
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f380 8811 	msr	BASEPRI, r0
 800767a:	4770      	bx	lr
 800767c:	f3af 8000 	nop.w

08007680 <pxCurrentTCBConst2>:
 8007680:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop

08007688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007688:	4808      	ldr	r0, [pc, #32]	; (80076ac <prvPortStartFirstTask+0x24>)
 800768a:	6800      	ldr	r0, [r0, #0]
 800768c:	6800      	ldr	r0, [r0, #0]
 800768e:	f380 8808 	msr	MSP, r0
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8814 	msr	CONTROL, r0
 800769a:	b662      	cpsie	i
 800769c:	b661      	cpsie	f
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	df00      	svc	0
 80076a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076aa:	bf00      	nop
 80076ac:	e000ed08 	.word	0xe000ed08

080076b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076b6:	4b46      	ldr	r3, [pc, #280]	; (80077d0 <xPortStartScheduler+0x120>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a46      	ldr	r2, [pc, #280]	; (80077d4 <xPortStartScheduler+0x124>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d10a      	bne.n	80076d6 <xPortStartScheduler+0x26>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	613b      	str	r3, [r7, #16]
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076d6:	4b3e      	ldr	r3, [pc, #248]	; (80077d0 <xPortStartScheduler+0x120>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a3f      	ldr	r2, [pc, #252]	; (80077d8 <xPortStartScheduler+0x128>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10a      	bne.n	80076f6 <xPortStartScheduler+0x46>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	60fb      	str	r3, [r7, #12]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076f6:	4b39      	ldr	r3, [pc, #228]	; (80077dc <xPortStartScheduler+0x12c>)
 80076f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	22ff      	movs	r2, #255	; 0xff
 8007706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4b31      	ldr	r3, [pc, #196]	; (80077e0 <xPortStartScheduler+0x130>)
 800771c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800771e:	4b31      	ldr	r3, [pc, #196]	; (80077e4 <xPortStartScheduler+0x134>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007724:	e009      	b.n	800773a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007726:	4b2f      	ldr	r3, [pc, #188]	; (80077e4 <xPortStartScheduler+0x134>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3b01      	subs	r3, #1
 800772c:	4a2d      	ldr	r2, [pc, #180]	; (80077e4 <xPortStartScheduler+0x134>)
 800772e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	b2db      	uxtb	r3, r3
 8007738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800773a:	78fb      	ldrb	r3, [r7, #3]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007742:	2b80      	cmp	r3, #128	; 0x80
 8007744:	d0ef      	beq.n	8007726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007746:	4b27      	ldr	r3, [pc, #156]	; (80077e4 <xPortStartScheduler+0x134>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1c3 0307 	rsb	r3, r3, #7
 800774e:	2b04      	cmp	r3, #4
 8007750:	d00a      	beq.n	8007768 <xPortStartScheduler+0xb8>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60bb      	str	r3, [r7, #8]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007768:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <xPortStartScheduler+0x134>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <xPortStartScheduler+0x134>)
 8007770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007772:	4b1c      	ldr	r3, [pc, #112]	; (80077e4 <xPortStartScheduler+0x134>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800777a:	4a1a      	ldr	r2, [pc, #104]	; (80077e4 <xPortStartScheduler+0x134>)
 800777c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007786:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <xPortStartScheduler+0x138>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <xPortStartScheduler+0x138>)
 800778c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <xPortStartScheduler+0x138>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <xPortStartScheduler+0x138>)
 8007798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800779c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800779e:	f000 f8dd 	bl	800795c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077a2:	4b12      	ldr	r3, [pc, #72]	; (80077ec <xPortStartScheduler+0x13c>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077a8:	f000 f8fc 	bl	80079a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077ac:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <xPortStartScheduler+0x140>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a0f      	ldr	r2, [pc, #60]	; (80077f0 <xPortStartScheduler+0x140>)
 80077b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077b8:	f7ff ff66 	bl	8007688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077bc:	f7ff f84a 	bl	8006854 <vTaskSwitchContext>
	prvTaskExitError();
 80077c0:	f7ff ff20 	bl	8007604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	e000ed00 	.word	0xe000ed00
 80077d4:	410fc271 	.word	0x410fc271
 80077d8:	410fc270 	.word	0x410fc270
 80077dc:	e000e400 	.word	0xe000e400
 80077e0:	20000fb8 	.word	0x20000fb8
 80077e4:	20000fbc 	.word	0x20000fbc
 80077e8:	e000ed20 	.word	0xe000ed20
 80077ec:	2000000c 	.word	0x2000000c
 80077f0:	e000ef34 	.word	0xe000ef34

080077f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	607b      	str	r3, [r7, #4]
}
 800780c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <vPortEnterCritical+0x58>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3301      	adds	r3, #1
 8007814:	4a0d      	ldr	r2, [pc, #52]	; (800784c <vPortEnterCritical+0x58>)
 8007816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <vPortEnterCritical+0x58>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d10f      	bne.n	8007840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007820:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <vPortEnterCritical+0x5c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <vPortEnterCritical+0x4c>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	603b      	str	r3, [r7, #0]
}
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <vPortEnterCritical+0x4a>
	}
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	2000000c 	.word	0x2000000c
 8007850:	e000ed04 	.word	0xe000ed04

08007854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <vPortExitCritical+0x50>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <vPortExitCritical+0x24>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	607b      	str	r3, [r7, #4]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <vPortExitCritical+0x50>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3b01      	subs	r3, #1
 800787e:	4a09      	ldr	r2, [pc, #36]	; (80078a4 <vPortExitCritical+0x50>)
 8007880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007882:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <vPortExitCritical+0x50>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <vPortExitCritical+0x42>
 800788a:	2300      	movs	r3, #0
 800788c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	f383 8811 	msr	BASEPRI, r3
}
 8007894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	2000000c 	.word	0x2000000c
	...

080078b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078b0:	f3ef 8009 	mrs	r0, PSP
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	4b15      	ldr	r3, [pc, #84]	; (8007910 <pxCurrentTCBConst>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	f01e 0f10 	tst.w	lr, #16
 80078c0:	bf08      	it	eq
 80078c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	6010      	str	r0, [r2, #0]
 80078cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078d4:	f380 8811 	msr	BASEPRI, r0
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f7fe ffb8 	bl	8006854 <vTaskSwitchContext>
 80078e4:	f04f 0000 	mov.w	r0, #0
 80078e8:	f380 8811 	msr	BASEPRI, r0
 80078ec:	bc09      	pop	{r0, r3}
 80078ee:	6819      	ldr	r1, [r3, #0]
 80078f0:	6808      	ldr	r0, [r1, #0]
 80078f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f6:	f01e 0f10 	tst.w	lr, #16
 80078fa:	bf08      	it	eq
 80078fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007900:	f380 8809 	msr	PSP, r0
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	f3af 8000 	nop.w

08007910 <pxCurrentTCBConst>:
 8007910:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
}
 8007930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007932:	f7fe fed5 	bl	80066e0 <xTaskIncrementTick>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800793c:	4b06      	ldr	r3, [pc, #24]	; (8007958 <xPortSysTickHandler+0x40>)
 800793e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	2300      	movs	r3, #0
 8007946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f383 8811 	msr	BASEPRI, r3
}
 800794e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	e000ed04 	.word	0xe000ed04

0800795c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800795c:	b480      	push	{r7}
 800795e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <vPortSetupTimerInterrupt+0x34>)
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007966:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <vPortSetupTimerInterrupt+0x38>)
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800796c:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <vPortSetupTimerInterrupt+0x3c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <vPortSetupTimerInterrupt+0x40>)
 8007972:	fba2 2303 	umull	r2, r3, r2, r3
 8007976:	099b      	lsrs	r3, r3, #6
 8007978:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <vPortSetupTimerInterrupt+0x44>)
 800797a:	3b01      	subs	r3, #1
 800797c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800797e:	4b04      	ldr	r3, [pc, #16]	; (8007990 <vPortSetupTimerInterrupt+0x34>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	e000e010 	.word	0xe000e010
 8007994:	e000e018 	.word	0xe000e018
 8007998:	20000000 	.word	0x20000000
 800799c:	10624dd3 	.word	0x10624dd3
 80079a0:	e000e014 	.word	0xe000e014

080079a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079b4 <vPortEnableVFP+0x10>
 80079a8:	6801      	ldr	r1, [r0, #0]
 80079aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ae:	6001      	str	r1, [r0, #0]
 80079b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079b2:	bf00      	nop
 80079b4:	e000ed88 	.word	0xe000ed88

080079b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079be:	f3ef 8305 	mrs	r3, IPSR
 80079c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b0f      	cmp	r3, #15
 80079c8:	d914      	bls.n	80079f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ca:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <vPortValidateInterruptPriority+0x70>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079d4:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <vPortValidateInterruptPriority+0x74>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	7afa      	ldrb	r2, [r7, #11]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d20a      	bcs.n	80079f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	607b      	str	r3, [r7, #4]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <vPortValidateInterruptPriority+0x78>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079fc:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <vPortValidateInterruptPriority+0x7c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d90a      	bls.n	8007a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	603b      	str	r3, [r7, #0]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <vPortValidateInterruptPriority+0x60>
	}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	e000e3f0 	.word	0xe000e3f0
 8007a2c:	20000fb8 	.word	0x20000fb8
 8007a30:	e000ed0c 	.word	0xe000ed0c
 8007a34:	20000fbc 	.word	0x20000fbc

08007a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a44:	f7fe fd90 	bl	8006568 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a48:	4b5b      	ldr	r3, [pc, #364]	; (8007bb8 <pvPortMalloc+0x180>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a50:	f000 f920 	bl	8007c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a54:	4b59      	ldr	r3, [pc, #356]	; (8007bbc <pvPortMalloc+0x184>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f040 8093 	bne.w	8007b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01d      	beq.n	8007aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a68:	2208      	movs	r2, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d014      	beq.n	8007aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f023 0307 	bic.w	r3, r3, #7
 8007a80:	3308      	adds	r3, #8
 8007a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	617b      	str	r3, [r7, #20]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d06e      	beq.n	8007b88 <pvPortMalloc+0x150>
 8007aaa:	4b45      	ldr	r3, [pc, #276]	; (8007bc0 <pvPortMalloc+0x188>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d869      	bhi.n	8007b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ab4:	4b43      	ldr	r3, [pc, #268]	; (8007bc4 <pvPortMalloc+0x18c>)
 8007ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ab8:	4b42      	ldr	r3, [pc, #264]	; (8007bc4 <pvPortMalloc+0x18c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007abe:	e004      	b.n	8007aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d903      	bls.n	8007adc <pvPortMalloc+0xa4>
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1f1      	bne.n	8007ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007adc:	4b36      	ldr	r3, [pc, #216]	; (8007bb8 <pvPortMalloc+0x180>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d050      	beq.n	8007b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2208      	movs	r2, #8
 8007aec:	4413      	add	r3, r2
 8007aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	1ad2      	subs	r2, r2, r3
 8007b00:	2308      	movs	r3, #8
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d91f      	bls.n	8007b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <pvPortMalloc+0xf8>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	613b      	str	r3, [r7, #16]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b42:	69b8      	ldr	r0, [r7, #24]
 8007b44:	f000 f908 	bl	8007d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b48:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	4a1b      	ldr	r2, [pc, #108]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b56:	4b1a      	ldr	r3, [pc, #104]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4b1b      	ldr	r3, [pc, #108]	; (8007bc8 <pvPortMalloc+0x190>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d203      	bcs.n	8007b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b62:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a18      	ldr	r2, [pc, #96]	; (8007bc8 <pvPortMalloc+0x190>)
 8007b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <pvPortMalloc+0x184>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b7e:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <pvPortMalloc+0x194>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a11      	ldr	r2, [pc, #68]	; (8007bcc <pvPortMalloc+0x194>)
 8007b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b88:	f7fe fcfc 	bl	8006584 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <pvPortMalloc+0x174>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	60fb      	str	r3, [r7, #12]
}
 8007ba8:	bf00      	nop
 8007baa:	e7fe      	b.n	8007baa <pvPortMalloc+0x172>
	return pvReturn;
 8007bac:	69fb      	ldr	r3, [r7, #28]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3728      	adds	r7, #40	; 0x28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20004bc8 	.word	0x20004bc8
 8007bbc:	20004bdc 	.word	0x20004bdc
 8007bc0:	20004bcc 	.word	0x20004bcc
 8007bc4:	20004bc0 	.word	0x20004bc0
 8007bc8:	20004bd0 	.word	0x20004bd0
 8007bcc:	20004bd4 	.word	0x20004bd4

08007bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d04d      	beq.n	8007c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007be2:	2308      	movs	r3, #8
 8007be4:	425b      	negs	r3, r3
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4413      	add	r3, r2
 8007bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <vPortFree+0xb8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <vPortFree+0x44>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	60fb      	str	r3, [r7, #12]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <vPortFree+0x62>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	60bb      	str	r3, [r7, #8]
}
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4b14      	ldr	r3, [pc, #80]	; (8007c88 <vPortFree+0xb8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01e      	beq.n	8007c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11a      	bne.n	8007c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	4b0e      	ldr	r3, [pc, #56]	; (8007c88 <vPortFree+0xb8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	43db      	mvns	r3, r3
 8007c52:	401a      	ands	r2, r3
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c58:	f7fe fc86 	bl	8006568 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <vPortFree+0xbc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4413      	add	r3, r2
 8007c66:	4a09      	ldr	r2, [pc, #36]	; (8007c8c <vPortFree+0xbc>)
 8007c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c6a:	6938      	ldr	r0, [r7, #16]
 8007c6c:	f000 f874 	bl	8007d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <vPortFree+0xc0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3301      	adds	r3, #1
 8007c76:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <vPortFree+0xc0>)
 8007c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c7a:	f7fe fc83 	bl	8006584 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c7e:	bf00      	nop
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20004bdc 	.word	0x20004bdc
 8007c8c:	20004bcc 	.word	0x20004bcc
 8007c90:	20004bd8 	.word	0x20004bd8

08007c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ca0:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <prvHeapInit+0xac>)
 8007ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00c      	beq.n	8007cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3307      	adds	r3, #7
 8007cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0307 	bic.w	r3, r3, #7
 8007cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	4a1f      	ldr	r2, [pc, #124]	; (8007d40 <prvHeapInit+0xac>)
 8007cc4:	4413      	add	r3, r2
 8007cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ccc:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <prvHeapInit+0xb0>)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <prvHeapInit+0xb0>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	4413      	add	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0307 	bic.w	r3, r3, #7
 8007cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <prvHeapInit+0xb4>)
 8007cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <prvHeapInit+0xb4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <prvHeapInit+0xb4>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	1ad2      	subs	r2, r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <prvHeapInit+0xb4>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <prvHeapInit+0xb8>)
 8007d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <prvHeapInit+0xbc>)
 8007d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <prvHeapInit+0xc0>)
 8007d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	20000fc0 	.word	0x20000fc0
 8007d44:	20004bc0 	.word	0x20004bc0
 8007d48:	20004bc8 	.word	0x20004bc8
 8007d4c:	20004bd0 	.word	0x20004bd0
 8007d50:	20004bcc 	.word	0x20004bcc
 8007d54:	20004bdc 	.word	0x20004bdc

08007d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d60:	4b28      	ldr	r3, [pc, #160]	; (8007e04 <prvInsertBlockIntoFreeList+0xac>)
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e002      	b.n	8007d6c <prvInsertBlockIntoFreeList+0x14>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d8f7      	bhi.n	8007d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4413      	add	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d108      	bne.n	8007d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	441a      	add	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d118      	bne.n	8007de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d00d      	beq.n	8007dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e008      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e003      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d002      	beq.n	8007df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20004bc0 	.word	0x20004bc0
 8007e08:	20004bc8 	.word	0x20004bc8

08007e0c <__errno>:
 8007e0c:	4b01      	ldr	r3, [pc, #4]	; (8007e14 <__errno+0x8>)
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000010 	.word	0x20000010

08007e18 <__libc_init_array>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4d0d      	ldr	r5, [pc, #52]	; (8007e50 <__libc_init_array+0x38>)
 8007e1c:	4c0d      	ldr	r4, [pc, #52]	; (8007e54 <__libc_init_array+0x3c>)
 8007e1e:	1b64      	subs	r4, r4, r5
 8007e20:	10a4      	asrs	r4, r4, #2
 8007e22:	2600      	movs	r6, #0
 8007e24:	42a6      	cmp	r6, r4
 8007e26:	d109      	bne.n	8007e3c <__libc_init_array+0x24>
 8007e28:	4d0b      	ldr	r5, [pc, #44]	; (8007e58 <__libc_init_array+0x40>)
 8007e2a:	4c0c      	ldr	r4, [pc, #48]	; (8007e5c <__libc_init_array+0x44>)
 8007e2c:	f000 fcf8 	bl	8008820 <_init>
 8007e30:	1b64      	subs	r4, r4, r5
 8007e32:	10a4      	asrs	r4, r4, #2
 8007e34:	2600      	movs	r6, #0
 8007e36:	42a6      	cmp	r6, r4
 8007e38:	d105      	bne.n	8007e46 <__libc_init_array+0x2e>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e40:	4798      	blx	r3
 8007e42:	3601      	adds	r6, #1
 8007e44:	e7ee      	b.n	8007e24 <__libc_init_array+0xc>
 8007e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4a:	4798      	blx	r3
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	e7f2      	b.n	8007e36 <__libc_init_array+0x1e>
 8007e50:	080089e8 	.word	0x080089e8
 8007e54:	080089e8 	.word	0x080089e8
 8007e58:	080089e8 	.word	0x080089e8
 8007e5c:	080089ec 	.word	0x080089ec

08007e60 <__retarget_lock_acquire_recursive>:
 8007e60:	4770      	bx	lr

08007e62 <__retarget_lock_release_recursive>:
 8007e62:	4770      	bx	lr

08007e64 <memcpy>:
 8007e64:	440a      	add	r2, r1
 8007e66:	4291      	cmp	r1, r2
 8007e68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e6c:	d100      	bne.n	8007e70 <memcpy+0xc>
 8007e6e:	4770      	bx	lr
 8007e70:	b510      	push	{r4, lr}
 8007e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e7a:	4291      	cmp	r1, r2
 8007e7c:	d1f9      	bne.n	8007e72 <memcpy+0xe>
 8007e7e:	bd10      	pop	{r4, pc}

08007e80 <memset>:
 8007e80:	4402      	add	r2, r0
 8007e82:	4603      	mov	r3, r0
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d100      	bne.n	8007e8a <memset+0xa>
 8007e88:	4770      	bx	lr
 8007e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8e:	e7f9      	b.n	8007e84 <memset+0x4>

08007e90 <sbrk_aligned>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	4e0e      	ldr	r6, [pc, #56]	; (8007ecc <sbrk_aligned+0x3c>)
 8007e94:	460c      	mov	r4, r1
 8007e96:	6831      	ldr	r1, [r6, #0]
 8007e98:	4605      	mov	r5, r0
 8007e9a:	b911      	cbnz	r1, 8007ea2 <sbrk_aligned+0x12>
 8007e9c:	f000 f8f6 	bl	800808c <_sbrk_r>
 8007ea0:	6030      	str	r0, [r6, #0]
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 f8f1 	bl	800808c <_sbrk_r>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	d00a      	beq.n	8007ec4 <sbrk_aligned+0x34>
 8007eae:	1cc4      	adds	r4, r0, #3
 8007eb0:	f024 0403 	bic.w	r4, r4, #3
 8007eb4:	42a0      	cmp	r0, r4
 8007eb6:	d007      	beq.n	8007ec8 <sbrk_aligned+0x38>
 8007eb8:	1a21      	subs	r1, r4, r0
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f000 f8e6 	bl	800808c <_sbrk_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d101      	bne.n	8007ec8 <sbrk_aligned+0x38>
 8007ec4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007ec8:	4620      	mov	r0, r4
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	20004be8 	.word	0x20004be8

08007ed0 <_malloc_r>:
 8007ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed4:	1ccd      	adds	r5, r1, #3
 8007ed6:	f025 0503 	bic.w	r5, r5, #3
 8007eda:	3508      	adds	r5, #8
 8007edc:	2d0c      	cmp	r5, #12
 8007ede:	bf38      	it	cc
 8007ee0:	250c      	movcc	r5, #12
 8007ee2:	2d00      	cmp	r5, #0
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	db01      	blt.n	8007eec <_malloc_r+0x1c>
 8007ee8:	42a9      	cmp	r1, r5
 8007eea:	d905      	bls.n	8007ef8 <_malloc_r+0x28>
 8007eec:	230c      	movs	r3, #12
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	2600      	movs	r6, #0
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	4e2e      	ldr	r6, [pc, #184]	; (8007fb4 <_malloc_r+0xe4>)
 8007efa:	f000 f8f7 	bl	80080ec <__malloc_lock>
 8007efe:	6833      	ldr	r3, [r6, #0]
 8007f00:	461c      	mov	r4, r3
 8007f02:	bb34      	cbnz	r4, 8007f52 <_malloc_r+0x82>
 8007f04:	4629      	mov	r1, r5
 8007f06:	4638      	mov	r0, r7
 8007f08:	f7ff ffc2 	bl	8007e90 <sbrk_aligned>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	4604      	mov	r4, r0
 8007f10:	d14d      	bne.n	8007fae <_malloc_r+0xde>
 8007f12:	6834      	ldr	r4, [r6, #0]
 8007f14:	4626      	mov	r6, r4
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	d140      	bne.n	8007f9c <_malloc_r+0xcc>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4638      	mov	r0, r7
 8007f20:	eb04 0803 	add.w	r8, r4, r3
 8007f24:	f000 f8b2 	bl	800808c <_sbrk_r>
 8007f28:	4580      	cmp	r8, r0
 8007f2a:	d13a      	bne.n	8007fa2 <_malloc_r+0xd2>
 8007f2c:	6821      	ldr	r1, [r4, #0]
 8007f2e:	3503      	adds	r5, #3
 8007f30:	1a6d      	subs	r5, r5, r1
 8007f32:	f025 0503 	bic.w	r5, r5, #3
 8007f36:	3508      	adds	r5, #8
 8007f38:	2d0c      	cmp	r5, #12
 8007f3a:	bf38      	it	cc
 8007f3c:	250c      	movcc	r5, #12
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4638      	mov	r0, r7
 8007f42:	f7ff ffa5 	bl	8007e90 <sbrk_aligned>
 8007f46:	3001      	adds	r0, #1
 8007f48:	d02b      	beq.n	8007fa2 <_malloc_r+0xd2>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	442b      	add	r3, r5
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	e00e      	b.n	8007f70 <_malloc_r+0xa0>
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	1b52      	subs	r2, r2, r5
 8007f56:	d41e      	bmi.n	8007f96 <_malloc_r+0xc6>
 8007f58:	2a0b      	cmp	r2, #11
 8007f5a:	d916      	bls.n	8007f8a <_malloc_r+0xba>
 8007f5c:	1961      	adds	r1, r4, r5
 8007f5e:	42a3      	cmp	r3, r4
 8007f60:	6025      	str	r5, [r4, #0]
 8007f62:	bf18      	it	ne
 8007f64:	6059      	strne	r1, [r3, #4]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	bf08      	it	eq
 8007f6a:	6031      	streq	r1, [r6, #0]
 8007f6c:	5162      	str	r2, [r4, r5]
 8007f6e:	604b      	str	r3, [r1, #4]
 8007f70:	4638      	mov	r0, r7
 8007f72:	f104 060b 	add.w	r6, r4, #11
 8007f76:	f000 f8bf 	bl	80080f8 <__malloc_unlock>
 8007f7a:	f026 0607 	bic.w	r6, r6, #7
 8007f7e:	1d23      	adds	r3, r4, #4
 8007f80:	1af2      	subs	r2, r6, r3
 8007f82:	d0b6      	beq.n	8007ef2 <_malloc_r+0x22>
 8007f84:	1b9b      	subs	r3, r3, r6
 8007f86:	50a3      	str	r3, [r4, r2]
 8007f88:	e7b3      	b.n	8007ef2 <_malloc_r+0x22>
 8007f8a:	6862      	ldr	r2, [r4, #4]
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	bf0c      	ite	eq
 8007f90:	6032      	streq	r2, [r6, #0]
 8007f92:	605a      	strne	r2, [r3, #4]
 8007f94:	e7ec      	b.n	8007f70 <_malloc_r+0xa0>
 8007f96:	4623      	mov	r3, r4
 8007f98:	6864      	ldr	r4, [r4, #4]
 8007f9a:	e7b2      	b.n	8007f02 <_malloc_r+0x32>
 8007f9c:	4634      	mov	r4, r6
 8007f9e:	6876      	ldr	r6, [r6, #4]
 8007fa0:	e7b9      	b.n	8007f16 <_malloc_r+0x46>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f000 f8a6 	bl	80080f8 <__malloc_unlock>
 8007fac:	e7a1      	b.n	8007ef2 <_malloc_r+0x22>
 8007fae:	6025      	str	r5, [r4, #0]
 8007fb0:	e7de      	b.n	8007f70 <_malloc_r+0xa0>
 8007fb2:	bf00      	nop
 8007fb4:	20004be4 	.word	0x20004be4

08007fb8 <cleanup_glue>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	460c      	mov	r4, r1
 8007fbc:	6809      	ldr	r1, [r1, #0]
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	b109      	cbz	r1, 8007fc6 <cleanup_glue+0xe>
 8007fc2:	f7ff fff9 	bl	8007fb8 <cleanup_glue>
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fce:	f000 b899 	b.w	8008104 <_free_r>
	...

08007fd4 <_reclaim_reent>:
 8007fd4:	4b2c      	ldr	r3, [pc, #176]	; (8008088 <_reclaim_reent+0xb4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4283      	cmp	r3, r0
 8007fda:	b570      	push	{r4, r5, r6, lr}
 8007fdc:	4604      	mov	r4, r0
 8007fde:	d051      	beq.n	8008084 <_reclaim_reent+0xb0>
 8007fe0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007fe2:	b143      	cbz	r3, 8007ff6 <_reclaim_reent+0x22>
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d14a      	bne.n	8008080 <_reclaim_reent+0xac>
 8007fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fec:	6819      	ldr	r1, [r3, #0]
 8007fee:	b111      	cbz	r1, 8007ff6 <_reclaim_reent+0x22>
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 f887 	bl	8008104 <_free_r>
 8007ff6:	6961      	ldr	r1, [r4, #20]
 8007ff8:	b111      	cbz	r1, 8008000 <_reclaim_reent+0x2c>
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 f882 	bl	8008104 <_free_r>
 8008000:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008002:	b111      	cbz	r1, 800800a <_reclaim_reent+0x36>
 8008004:	4620      	mov	r0, r4
 8008006:	f000 f87d 	bl	8008104 <_free_r>
 800800a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800800c:	b111      	cbz	r1, 8008014 <_reclaim_reent+0x40>
 800800e:	4620      	mov	r0, r4
 8008010:	f000 f878 	bl	8008104 <_free_r>
 8008014:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008016:	b111      	cbz	r1, 800801e <_reclaim_reent+0x4a>
 8008018:	4620      	mov	r0, r4
 800801a:	f000 f873 	bl	8008104 <_free_r>
 800801e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008020:	b111      	cbz	r1, 8008028 <_reclaim_reent+0x54>
 8008022:	4620      	mov	r0, r4
 8008024:	f000 f86e 	bl	8008104 <_free_r>
 8008028:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800802a:	b111      	cbz	r1, 8008032 <_reclaim_reent+0x5e>
 800802c:	4620      	mov	r0, r4
 800802e:	f000 f869 	bl	8008104 <_free_r>
 8008032:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008034:	b111      	cbz	r1, 800803c <_reclaim_reent+0x68>
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f864 	bl	8008104 <_free_r>
 800803c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800803e:	b111      	cbz	r1, 8008046 <_reclaim_reent+0x72>
 8008040:	4620      	mov	r0, r4
 8008042:	f000 f85f 	bl	8008104 <_free_r>
 8008046:	69a3      	ldr	r3, [r4, #24]
 8008048:	b1e3      	cbz	r3, 8008084 <_reclaim_reent+0xb0>
 800804a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800804c:	4620      	mov	r0, r4
 800804e:	4798      	blx	r3
 8008050:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008052:	b1b9      	cbz	r1, 8008084 <_reclaim_reent+0xb0>
 8008054:	4620      	mov	r0, r4
 8008056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800805a:	f7ff bfad 	b.w	8007fb8 <cleanup_glue>
 800805e:	5949      	ldr	r1, [r1, r5]
 8008060:	b941      	cbnz	r1, 8008074 <_reclaim_reent+0xa0>
 8008062:	3504      	adds	r5, #4
 8008064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008066:	2d80      	cmp	r5, #128	; 0x80
 8008068:	68d9      	ldr	r1, [r3, #12]
 800806a:	d1f8      	bne.n	800805e <_reclaim_reent+0x8a>
 800806c:	4620      	mov	r0, r4
 800806e:	f000 f849 	bl	8008104 <_free_r>
 8008072:	e7ba      	b.n	8007fea <_reclaim_reent+0x16>
 8008074:	680e      	ldr	r6, [r1, #0]
 8008076:	4620      	mov	r0, r4
 8008078:	f000 f844 	bl	8008104 <_free_r>
 800807c:	4631      	mov	r1, r6
 800807e:	e7ef      	b.n	8008060 <_reclaim_reent+0x8c>
 8008080:	2500      	movs	r5, #0
 8008082:	e7ef      	b.n	8008064 <_reclaim_reent+0x90>
 8008084:	bd70      	pop	{r4, r5, r6, pc}
 8008086:	bf00      	nop
 8008088:	20000010 	.word	0x20000010

0800808c <_sbrk_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d06      	ldr	r5, [pc, #24]	; (80080a8 <_sbrk_r+0x1c>)
 8008090:	2300      	movs	r3, #0
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7f9 fa96 	bl	80015c8 <_sbrk>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_sbrk_r+0x1a>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_sbrk_r+0x1a>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	20004bec 	.word	0x20004bec

080080ac <siprintf>:
 80080ac:	b40e      	push	{r1, r2, r3}
 80080ae:	b500      	push	{lr}
 80080b0:	b09c      	sub	sp, #112	; 0x70
 80080b2:	ab1d      	add	r3, sp, #116	; 0x74
 80080b4:	9002      	str	r0, [sp, #8]
 80080b6:	9006      	str	r0, [sp, #24]
 80080b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080bc:	4809      	ldr	r0, [pc, #36]	; (80080e4 <siprintf+0x38>)
 80080be:	9107      	str	r1, [sp, #28]
 80080c0:	9104      	str	r1, [sp, #16]
 80080c2:	4909      	ldr	r1, [pc, #36]	; (80080e8 <siprintf+0x3c>)
 80080c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c8:	9105      	str	r1, [sp, #20]
 80080ca:	6800      	ldr	r0, [r0, #0]
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	a902      	add	r1, sp, #8
 80080d0:	f000 f8c0 	bl	8008254 <_svfiprintf_r>
 80080d4:	9b02      	ldr	r3, [sp, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	b01c      	add	sp, #112	; 0x70
 80080dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e0:	b003      	add	sp, #12
 80080e2:	4770      	bx	lr
 80080e4:	20000010 	.word	0x20000010
 80080e8:	ffff0208 	.word	0xffff0208

080080ec <__malloc_lock>:
 80080ec:	4801      	ldr	r0, [pc, #4]	; (80080f4 <__malloc_lock+0x8>)
 80080ee:	f7ff beb7 	b.w	8007e60 <__retarget_lock_acquire_recursive>
 80080f2:	bf00      	nop
 80080f4:	20004be0 	.word	0x20004be0

080080f8 <__malloc_unlock>:
 80080f8:	4801      	ldr	r0, [pc, #4]	; (8008100 <__malloc_unlock+0x8>)
 80080fa:	f7ff beb2 	b.w	8007e62 <__retarget_lock_release_recursive>
 80080fe:	bf00      	nop
 8008100:	20004be0 	.word	0x20004be0

08008104 <_free_r>:
 8008104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008106:	2900      	cmp	r1, #0
 8008108:	d044      	beq.n	8008194 <_free_r+0x90>
 800810a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800810e:	9001      	str	r0, [sp, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f1a1 0404 	sub.w	r4, r1, #4
 8008116:	bfb8      	it	lt
 8008118:	18e4      	addlt	r4, r4, r3
 800811a:	f7ff ffe7 	bl	80080ec <__malloc_lock>
 800811e:	4a1e      	ldr	r2, [pc, #120]	; (8008198 <_free_r+0x94>)
 8008120:	9801      	ldr	r0, [sp, #4]
 8008122:	6813      	ldr	r3, [r2, #0]
 8008124:	b933      	cbnz	r3, 8008134 <_free_r+0x30>
 8008126:	6063      	str	r3, [r4, #4]
 8008128:	6014      	str	r4, [r2, #0]
 800812a:	b003      	add	sp, #12
 800812c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008130:	f7ff bfe2 	b.w	80080f8 <__malloc_unlock>
 8008134:	42a3      	cmp	r3, r4
 8008136:	d908      	bls.n	800814a <_free_r+0x46>
 8008138:	6825      	ldr	r5, [r4, #0]
 800813a:	1961      	adds	r1, r4, r5
 800813c:	428b      	cmp	r3, r1
 800813e:	bf01      	itttt	eq
 8008140:	6819      	ldreq	r1, [r3, #0]
 8008142:	685b      	ldreq	r3, [r3, #4]
 8008144:	1949      	addeq	r1, r1, r5
 8008146:	6021      	streq	r1, [r4, #0]
 8008148:	e7ed      	b.n	8008126 <_free_r+0x22>
 800814a:	461a      	mov	r2, r3
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	b10b      	cbz	r3, 8008154 <_free_r+0x50>
 8008150:	42a3      	cmp	r3, r4
 8008152:	d9fa      	bls.n	800814a <_free_r+0x46>
 8008154:	6811      	ldr	r1, [r2, #0]
 8008156:	1855      	adds	r5, r2, r1
 8008158:	42a5      	cmp	r5, r4
 800815a:	d10b      	bne.n	8008174 <_free_r+0x70>
 800815c:	6824      	ldr	r4, [r4, #0]
 800815e:	4421      	add	r1, r4
 8008160:	1854      	adds	r4, r2, r1
 8008162:	42a3      	cmp	r3, r4
 8008164:	6011      	str	r1, [r2, #0]
 8008166:	d1e0      	bne.n	800812a <_free_r+0x26>
 8008168:	681c      	ldr	r4, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	6053      	str	r3, [r2, #4]
 800816e:	4421      	add	r1, r4
 8008170:	6011      	str	r1, [r2, #0]
 8008172:	e7da      	b.n	800812a <_free_r+0x26>
 8008174:	d902      	bls.n	800817c <_free_r+0x78>
 8008176:	230c      	movs	r3, #12
 8008178:	6003      	str	r3, [r0, #0]
 800817a:	e7d6      	b.n	800812a <_free_r+0x26>
 800817c:	6825      	ldr	r5, [r4, #0]
 800817e:	1961      	adds	r1, r4, r5
 8008180:	428b      	cmp	r3, r1
 8008182:	bf04      	itt	eq
 8008184:	6819      	ldreq	r1, [r3, #0]
 8008186:	685b      	ldreq	r3, [r3, #4]
 8008188:	6063      	str	r3, [r4, #4]
 800818a:	bf04      	itt	eq
 800818c:	1949      	addeq	r1, r1, r5
 800818e:	6021      	streq	r1, [r4, #0]
 8008190:	6054      	str	r4, [r2, #4]
 8008192:	e7ca      	b.n	800812a <_free_r+0x26>
 8008194:	b003      	add	sp, #12
 8008196:	bd30      	pop	{r4, r5, pc}
 8008198:	20004be4 	.word	0x20004be4

0800819c <__ssputs_r>:
 800819c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	688e      	ldr	r6, [r1, #8]
 80081a2:	429e      	cmp	r6, r3
 80081a4:	4682      	mov	sl, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	4690      	mov	r8, r2
 80081aa:	461f      	mov	r7, r3
 80081ac:	d838      	bhi.n	8008220 <__ssputs_r+0x84>
 80081ae:	898a      	ldrh	r2, [r1, #12]
 80081b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081b4:	d032      	beq.n	800821c <__ssputs_r+0x80>
 80081b6:	6825      	ldr	r5, [r4, #0]
 80081b8:	6909      	ldr	r1, [r1, #16]
 80081ba:	eba5 0901 	sub.w	r9, r5, r1
 80081be:	6965      	ldr	r5, [r4, #20]
 80081c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081c8:	3301      	adds	r3, #1
 80081ca:	444b      	add	r3, r9
 80081cc:	106d      	asrs	r5, r5, #1
 80081ce:	429d      	cmp	r5, r3
 80081d0:	bf38      	it	cc
 80081d2:	461d      	movcc	r5, r3
 80081d4:	0553      	lsls	r3, r2, #21
 80081d6:	d531      	bpl.n	800823c <__ssputs_r+0xa0>
 80081d8:	4629      	mov	r1, r5
 80081da:	f7ff fe79 	bl	8007ed0 <_malloc_r>
 80081de:	4606      	mov	r6, r0
 80081e0:	b950      	cbnz	r0, 80081f8 <__ssputs_r+0x5c>
 80081e2:	230c      	movs	r3, #12
 80081e4:	f8ca 3000 	str.w	r3, [sl]
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ee:	81a3      	strh	r3, [r4, #12]
 80081f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f8:	6921      	ldr	r1, [r4, #16]
 80081fa:	464a      	mov	r2, r9
 80081fc:	f7ff fe32 	bl	8007e64 <memcpy>
 8008200:	89a3      	ldrh	r3, [r4, #12]
 8008202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820a:	81a3      	strh	r3, [r4, #12]
 800820c:	6126      	str	r6, [r4, #16]
 800820e:	6165      	str	r5, [r4, #20]
 8008210:	444e      	add	r6, r9
 8008212:	eba5 0509 	sub.w	r5, r5, r9
 8008216:	6026      	str	r6, [r4, #0]
 8008218:	60a5      	str	r5, [r4, #8]
 800821a:	463e      	mov	r6, r7
 800821c:	42be      	cmp	r6, r7
 800821e:	d900      	bls.n	8008222 <__ssputs_r+0x86>
 8008220:	463e      	mov	r6, r7
 8008222:	6820      	ldr	r0, [r4, #0]
 8008224:	4632      	mov	r2, r6
 8008226:	4641      	mov	r1, r8
 8008228:	f000 faa8 	bl	800877c <memmove>
 800822c:	68a3      	ldr	r3, [r4, #8]
 800822e:	1b9b      	subs	r3, r3, r6
 8008230:	60a3      	str	r3, [r4, #8]
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	4433      	add	r3, r6
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	2000      	movs	r0, #0
 800823a:	e7db      	b.n	80081f4 <__ssputs_r+0x58>
 800823c:	462a      	mov	r2, r5
 800823e:	f000 fab7 	bl	80087b0 <_realloc_r>
 8008242:	4606      	mov	r6, r0
 8008244:	2800      	cmp	r0, #0
 8008246:	d1e1      	bne.n	800820c <__ssputs_r+0x70>
 8008248:	6921      	ldr	r1, [r4, #16]
 800824a:	4650      	mov	r0, sl
 800824c:	f7ff ff5a 	bl	8008104 <_free_r>
 8008250:	e7c7      	b.n	80081e2 <__ssputs_r+0x46>
	...

08008254 <_svfiprintf_r>:
 8008254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008258:	4698      	mov	r8, r3
 800825a:	898b      	ldrh	r3, [r1, #12]
 800825c:	061b      	lsls	r3, r3, #24
 800825e:	b09d      	sub	sp, #116	; 0x74
 8008260:	4607      	mov	r7, r0
 8008262:	460d      	mov	r5, r1
 8008264:	4614      	mov	r4, r2
 8008266:	d50e      	bpl.n	8008286 <_svfiprintf_r+0x32>
 8008268:	690b      	ldr	r3, [r1, #16]
 800826a:	b963      	cbnz	r3, 8008286 <_svfiprintf_r+0x32>
 800826c:	2140      	movs	r1, #64	; 0x40
 800826e:	f7ff fe2f 	bl	8007ed0 <_malloc_r>
 8008272:	6028      	str	r0, [r5, #0]
 8008274:	6128      	str	r0, [r5, #16]
 8008276:	b920      	cbnz	r0, 8008282 <_svfiprintf_r+0x2e>
 8008278:	230c      	movs	r3, #12
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008280:	e0d1      	b.n	8008426 <_svfiprintf_r+0x1d2>
 8008282:	2340      	movs	r3, #64	; 0x40
 8008284:	616b      	str	r3, [r5, #20]
 8008286:	2300      	movs	r3, #0
 8008288:	9309      	str	r3, [sp, #36]	; 0x24
 800828a:	2320      	movs	r3, #32
 800828c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008290:	f8cd 800c 	str.w	r8, [sp, #12]
 8008294:	2330      	movs	r3, #48	; 0x30
 8008296:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008440 <_svfiprintf_r+0x1ec>
 800829a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800829e:	f04f 0901 	mov.w	r9, #1
 80082a2:	4623      	mov	r3, r4
 80082a4:	469a      	mov	sl, r3
 80082a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082aa:	b10a      	cbz	r2, 80082b0 <_svfiprintf_r+0x5c>
 80082ac:	2a25      	cmp	r2, #37	; 0x25
 80082ae:	d1f9      	bne.n	80082a4 <_svfiprintf_r+0x50>
 80082b0:	ebba 0b04 	subs.w	fp, sl, r4
 80082b4:	d00b      	beq.n	80082ce <_svfiprintf_r+0x7a>
 80082b6:	465b      	mov	r3, fp
 80082b8:	4622      	mov	r2, r4
 80082ba:	4629      	mov	r1, r5
 80082bc:	4638      	mov	r0, r7
 80082be:	f7ff ff6d 	bl	800819c <__ssputs_r>
 80082c2:	3001      	adds	r0, #1
 80082c4:	f000 80aa 	beq.w	800841c <_svfiprintf_r+0x1c8>
 80082c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ca:	445a      	add	r2, fp
 80082cc:	9209      	str	r2, [sp, #36]	; 0x24
 80082ce:	f89a 3000 	ldrb.w	r3, [sl]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 80a2 	beq.w	800841c <_svfiprintf_r+0x1c8>
 80082d8:	2300      	movs	r3, #0
 80082da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082e2:	f10a 0a01 	add.w	sl, sl, #1
 80082e6:	9304      	str	r3, [sp, #16]
 80082e8:	9307      	str	r3, [sp, #28]
 80082ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082ee:	931a      	str	r3, [sp, #104]	; 0x68
 80082f0:	4654      	mov	r4, sl
 80082f2:	2205      	movs	r2, #5
 80082f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082f8:	4851      	ldr	r0, [pc, #324]	; (8008440 <_svfiprintf_r+0x1ec>)
 80082fa:	f7f7 ff71 	bl	80001e0 <memchr>
 80082fe:	9a04      	ldr	r2, [sp, #16]
 8008300:	b9d8      	cbnz	r0, 800833a <_svfiprintf_r+0xe6>
 8008302:	06d0      	lsls	r0, r2, #27
 8008304:	bf44      	itt	mi
 8008306:	2320      	movmi	r3, #32
 8008308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800830c:	0711      	lsls	r1, r2, #28
 800830e:	bf44      	itt	mi
 8008310:	232b      	movmi	r3, #43	; 0x2b
 8008312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008316:	f89a 3000 	ldrb.w	r3, [sl]
 800831a:	2b2a      	cmp	r3, #42	; 0x2a
 800831c:	d015      	beq.n	800834a <_svfiprintf_r+0xf6>
 800831e:	9a07      	ldr	r2, [sp, #28]
 8008320:	4654      	mov	r4, sl
 8008322:	2000      	movs	r0, #0
 8008324:	f04f 0c0a 	mov.w	ip, #10
 8008328:	4621      	mov	r1, r4
 800832a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800832e:	3b30      	subs	r3, #48	; 0x30
 8008330:	2b09      	cmp	r3, #9
 8008332:	d94e      	bls.n	80083d2 <_svfiprintf_r+0x17e>
 8008334:	b1b0      	cbz	r0, 8008364 <_svfiprintf_r+0x110>
 8008336:	9207      	str	r2, [sp, #28]
 8008338:	e014      	b.n	8008364 <_svfiprintf_r+0x110>
 800833a:	eba0 0308 	sub.w	r3, r0, r8
 800833e:	fa09 f303 	lsl.w	r3, r9, r3
 8008342:	4313      	orrs	r3, r2
 8008344:	9304      	str	r3, [sp, #16]
 8008346:	46a2      	mov	sl, r4
 8008348:	e7d2      	b.n	80082f0 <_svfiprintf_r+0x9c>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	1d19      	adds	r1, r3, #4
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	9103      	str	r1, [sp, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	bfbb      	ittet	lt
 8008356:	425b      	neglt	r3, r3
 8008358:	f042 0202 	orrlt.w	r2, r2, #2
 800835c:	9307      	strge	r3, [sp, #28]
 800835e:	9307      	strlt	r3, [sp, #28]
 8008360:	bfb8      	it	lt
 8008362:	9204      	strlt	r2, [sp, #16]
 8008364:	7823      	ldrb	r3, [r4, #0]
 8008366:	2b2e      	cmp	r3, #46	; 0x2e
 8008368:	d10c      	bne.n	8008384 <_svfiprintf_r+0x130>
 800836a:	7863      	ldrb	r3, [r4, #1]
 800836c:	2b2a      	cmp	r3, #42	; 0x2a
 800836e:	d135      	bne.n	80083dc <_svfiprintf_r+0x188>
 8008370:	9b03      	ldr	r3, [sp, #12]
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	9203      	str	r2, [sp, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	bfb8      	it	lt
 800837c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008380:	3402      	adds	r4, #2
 8008382:	9305      	str	r3, [sp, #20]
 8008384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008450 <_svfiprintf_r+0x1fc>
 8008388:	7821      	ldrb	r1, [r4, #0]
 800838a:	2203      	movs	r2, #3
 800838c:	4650      	mov	r0, sl
 800838e:	f7f7 ff27 	bl	80001e0 <memchr>
 8008392:	b140      	cbz	r0, 80083a6 <_svfiprintf_r+0x152>
 8008394:	2340      	movs	r3, #64	; 0x40
 8008396:	eba0 000a 	sub.w	r0, r0, sl
 800839a:	fa03 f000 	lsl.w	r0, r3, r0
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	4303      	orrs	r3, r0
 80083a2:	3401      	adds	r4, #1
 80083a4:	9304      	str	r3, [sp, #16]
 80083a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083aa:	4826      	ldr	r0, [pc, #152]	; (8008444 <_svfiprintf_r+0x1f0>)
 80083ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083b0:	2206      	movs	r2, #6
 80083b2:	f7f7 ff15 	bl	80001e0 <memchr>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d038      	beq.n	800842c <_svfiprintf_r+0x1d8>
 80083ba:	4b23      	ldr	r3, [pc, #140]	; (8008448 <_svfiprintf_r+0x1f4>)
 80083bc:	bb1b      	cbnz	r3, 8008406 <_svfiprintf_r+0x1b2>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	3307      	adds	r3, #7
 80083c2:	f023 0307 	bic.w	r3, r3, #7
 80083c6:	3308      	adds	r3, #8
 80083c8:	9303      	str	r3, [sp, #12]
 80083ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083cc:	4433      	add	r3, r6
 80083ce:	9309      	str	r3, [sp, #36]	; 0x24
 80083d0:	e767      	b.n	80082a2 <_svfiprintf_r+0x4e>
 80083d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083d6:	460c      	mov	r4, r1
 80083d8:	2001      	movs	r0, #1
 80083da:	e7a5      	b.n	8008328 <_svfiprintf_r+0xd4>
 80083dc:	2300      	movs	r3, #0
 80083de:	3401      	adds	r4, #1
 80083e0:	9305      	str	r3, [sp, #20]
 80083e2:	4619      	mov	r1, r3
 80083e4:	f04f 0c0a 	mov.w	ip, #10
 80083e8:	4620      	mov	r0, r4
 80083ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ee:	3a30      	subs	r2, #48	; 0x30
 80083f0:	2a09      	cmp	r2, #9
 80083f2:	d903      	bls.n	80083fc <_svfiprintf_r+0x1a8>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d0c5      	beq.n	8008384 <_svfiprintf_r+0x130>
 80083f8:	9105      	str	r1, [sp, #20]
 80083fa:	e7c3      	b.n	8008384 <_svfiprintf_r+0x130>
 80083fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008400:	4604      	mov	r4, r0
 8008402:	2301      	movs	r3, #1
 8008404:	e7f0      	b.n	80083e8 <_svfiprintf_r+0x194>
 8008406:	ab03      	add	r3, sp, #12
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	462a      	mov	r2, r5
 800840c:	4b0f      	ldr	r3, [pc, #60]	; (800844c <_svfiprintf_r+0x1f8>)
 800840e:	a904      	add	r1, sp, #16
 8008410:	4638      	mov	r0, r7
 8008412:	f3af 8000 	nop.w
 8008416:	1c42      	adds	r2, r0, #1
 8008418:	4606      	mov	r6, r0
 800841a:	d1d6      	bne.n	80083ca <_svfiprintf_r+0x176>
 800841c:	89ab      	ldrh	r3, [r5, #12]
 800841e:	065b      	lsls	r3, r3, #25
 8008420:	f53f af2c 	bmi.w	800827c <_svfiprintf_r+0x28>
 8008424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008426:	b01d      	add	sp, #116	; 0x74
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	ab03      	add	r3, sp, #12
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	462a      	mov	r2, r5
 8008432:	4b06      	ldr	r3, [pc, #24]	; (800844c <_svfiprintf_r+0x1f8>)
 8008434:	a904      	add	r1, sp, #16
 8008436:	4638      	mov	r0, r7
 8008438:	f000 f87a 	bl	8008530 <_printf_i>
 800843c:	e7eb      	b.n	8008416 <_svfiprintf_r+0x1c2>
 800843e:	bf00      	nop
 8008440:	080089ac 	.word	0x080089ac
 8008444:	080089b6 	.word	0x080089b6
 8008448:	00000000 	.word	0x00000000
 800844c:	0800819d 	.word	0x0800819d
 8008450:	080089b2 	.word	0x080089b2

08008454 <_printf_common>:
 8008454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008458:	4616      	mov	r6, r2
 800845a:	4699      	mov	r9, r3
 800845c:	688a      	ldr	r2, [r1, #8]
 800845e:	690b      	ldr	r3, [r1, #16]
 8008460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008464:	4293      	cmp	r3, r2
 8008466:	bfb8      	it	lt
 8008468:	4613      	movlt	r3, r2
 800846a:	6033      	str	r3, [r6, #0]
 800846c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008470:	4607      	mov	r7, r0
 8008472:	460c      	mov	r4, r1
 8008474:	b10a      	cbz	r2, 800847a <_printf_common+0x26>
 8008476:	3301      	adds	r3, #1
 8008478:	6033      	str	r3, [r6, #0]
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	0699      	lsls	r1, r3, #26
 800847e:	bf42      	ittt	mi
 8008480:	6833      	ldrmi	r3, [r6, #0]
 8008482:	3302      	addmi	r3, #2
 8008484:	6033      	strmi	r3, [r6, #0]
 8008486:	6825      	ldr	r5, [r4, #0]
 8008488:	f015 0506 	ands.w	r5, r5, #6
 800848c:	d106      	bne.n	800849c <_printf_common+0x48>
 800848e:	f104 0a19 	add.w	sl, r4, #25
 8008492:	68e3      	ldr	r3, [r4, #12]
 8008494:	6832      	ldr	r2, [r6, #0]
 8008496:	1a9b      	subs	r3, r3, r2
 8008498:	42ab      	cmp	r3, r5
 800849a:	dc26      	bgt.n	80084ea <_printf_common+0x96>
 800849c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084a0:	1e13      	subs	r3, r2, #0
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	bf18      	it	ne
 80084a6:	2301      	movne	r3, #1
 80084a8:	0692      	lsls	r2, r2, #26
 80084aa:	d42b      	bmi.n	8008504 <_printf_common+0xb0>
 80084ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084b0:	4649      	mov	r1, r9
 80084b2:	4638      	mov	r0, r7
 80084b4:	47c0      	blx	r8
 80084b6:	3001      	adds	r0, #1
 80084b8:	d01e      	beq.n	80084f8 <_printf_common+0xa4>
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	68e5      	ldr	r5, [r4, #12]
 80084be:	6832      	ldr	r2, [r6, #0]
 80084c0:	f003 0306 	and.w	r3, r3, #6
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	bf08      	it	eq
 80084c8:	1aad      	subeq	r5, r5, r2
 80084ca:	68a3      	ldr	r3, [r4, #8]
 80084cc:	6922      	ldr	r2, [r4, #16]
 80084ce:	bf0c      	ite	eq
 80084d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084d4:	2500      	movne	r5, #0
 80084d6:	4293      	cmp	r3, r2
 80084d8:	bfc4      	itt	gt
 80084da:	1a9b      	subgt	r3, r3, r2
 80084dc:	18ed      	addgt	r5, r5, r3
 80084de:	2600      	movs	r6, #0
 80084e0:	341a      	adds	r4, #26
 80084e2:	42b5      	cmp	r5, r6
 80084e4:	d11a      	bne.n	800851c <_printf_common+0xc8>
 80084e6:	2000      	movs	r0, #0
 80084e8:	e008      	b.n	80084fc <_printf_common+0xa8>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4652      	mov	r2, sl
 80084ee:	4649      	mov	r1, r9
 80084f0:	4638      	mov	r0, r7
 80084f2:	47c0      	blx	r8
 80084f4:	3001      	adds	r0, #1
 80084f6:	d103      	bne.n	8008500 <_printf_common+0xac>
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008500:	3501      	adds	r5, #1
 8008502:	e7c6      	b.n	8008492 <_printf_common+0x3e>
 8008504:	18e1      	adds	r1, r4, r3
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	2030      	movs	r0, #48	; 0x30
 800850a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800850e:	4422      	add	r2, r4
 8008510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008518:	3302      	adds	r3, #2
 800851a:	e7c7      	b.n	80084ac <_printf_common+0x58>
 800851c:	2301      	movs	r3, #1
 800851e:	4622      	mov	r2, r4
 8008520:	4649      	mov	r1, r9
 8008522:	4638      	mov	r0, r7
 8008524:	47c0      	blx	r8
 8008526:	3001      	adds	r0, #1
 8008528:	d0e6      	beq.n	80084f8 <_printf_common+0xa4>
 800852a:	3601      	adds	r6, #1
 800852c:	e7d9      	b.n	80084e2 <_printf_common+0x8e>
	...

08008530 <_printf_i>:
 8008530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008534:	7e0f      	ldrb	r7, [r1, #24]
 8008536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008538:	2f78      	cmp	r7, #120	; 0x78
 800853a:	4691      	mov	r9, r2
 800853c:	4680      	mov	r8, r0
 800853e:	460c      	mov	r4, r1
 8008540:	469a      	mov	sl, r3
 8008542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008546:	d807      	bhi.n	8008558 <_printf_i+0x28>
 8008548:	2f62      	cmp	r7, #98	; 0x62
 800854a:	d80a      	bhi.n	8008562 <_printf_i+0x32>
 800854c:	2f00      	cmp	r7, #0
 800854e:	f000 80d8 	beq.w	8008702 <_printf_i+0x1d2>
 8008552:	2f58      	cmp	r7, #88	; 0x58
 8008554:	f000 80a3 	beq.w	800869e <_printf_i+0x16e>
 8008558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800855c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008560:	e03a      	b.n	80085d8 <_printf_i+0xa8>
 8008562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008566:	2b15      	cmp	r3, #21
 8008568:	d8f6      	bhi.n	8008558 <_printf_i+0x28>
 800856a:	a101      	add	r1, pc, #4	; (adr r1, 8008570 <_printf_i+0x40>)
 800856c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008570:	080085c9 	.word	0x080085c9
 8008574:	080085dd 	.word	0x080085dd
 8008578:	08008559 	.word	0x08008559
 800857c:	08008559 	.word	0x08008559
 8008580:	08008559 	.word	0x08008559
 8008584:	08008559 	.word	0x08008559
 8008588:	080085dd 	.word	0x080085dd
 800858c:	08008559 	.word	0x08008559
 8008590:	08008559 	.word	0x08008559
 8008594:	08008559 	.word	0x08008559
 8008598:	08008559 	.word	0x08008559
 800859c:	080086e9 	.word	0x080086e9
 80085a0:	0800860d 	.word	0x0800860d
 80085a4:	080086cb 	.word	0x080086cb
 80085a8:	08008559 	.word	0x08008559
 80085ac:	08008559 	.word	0x08008559
 80085b0:	0800870b 	.word	0x0800870b
 80085b4:	08008559 	.word	0x08008559
 80085b8:	0800860d 	.word	0x0800860d
 80085bc:	08008559 	.word	0x08008559
 80085c0:	08008559 	.word	0x08008559
 80085c4:	080086d3 	.word	0x080086d3
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	1d1a      	adds	r2, r3, #4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	602a      	str	r2, [r5, #0]
 80085d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085d8:	2301      	movs	r3, #1
 80085da:	e0a3      	b.n	8008724 <_printf_i+0x1f4>
 80085dc:	6820      	ldr	r0, [r4, #0]
 80085de:	6829      	ldr	r1, [r5, #0]
 80085e0:	0606      	lsls	r6, r0, #24
 80085e2:	f101 0304 	add.w	r3, r1, #4
 80085e6:	d50a      	bpl.n	80085fe <_printf_i+0xce>
 80085e8:	680e      	ldr	r6, [r1, #0]
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	2e00      	cmp	r6, #0
 80085ee:	da03      	bge.n	80085f8 <_printf_i+0xc8>
 80085f0:	232d      	movs	r3, #45	; 0x2d
 80085f2:	4276      	negs	r6, r6
 80085f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f8:	485e      	ldr	r0, [pc, #376]	; (8008774 <_printf_i+0x244>)
 80085fa:	230a      	movs	r3, #10
 80085fc:	e019      	b.n	8008632 <_printf_i+0x102>
 80085fe:	680e      	ldr	r6, [r1, #0]
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008606:	bf18      	it	ne
 8008608:	b236      	sxthne	r6, r6
 800860a:	e7ef      	b.n	80085ec <_printf_i+0xbc>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	6820      	ldr	r0, [r4, #0]
 8008610:	1d19      	adds	r1, r3, #4
 8008612:	6029      	str	r1, [r5, #0]
 8008614:	0601      	lsls	r1, r0, #24
 8008616:	d501      	bpl.n	800861c <_printf_i+0xec>
 8008618:	681e      	ldr	r6, [r3, #0]
 800861a:	e002      	b.n	8008622 <_printf_i+0xf2>
 800861c:	0646      	lsls	r6, r0, #25
 800861e:	d5fb      	bpl.n	8008618 <_printf_i+0xe8>
 8008620:	881e      	ldrh	r6, [r3, #0]
 8008622:	4854      	ldr	r0, [pc, #336]	; (8008774 <_printf_i+0x244>)
 8008624:	2f6f      	cmp	r7, #111	; 0x6f
 8008626:	bf0c      	ite	eq
 8008628:	2308      	moveq	r3, #8
 800862a:	230a      	movne	r3, #10
 800862c:	2100      	movs	r1, #0
 800862e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008632:	6865      	ldr	r5, [r4, #4]
 8008634:	60a5      	str	r5, [r4, #8]
 8008636:	2d00      	cmp	r5, #0
 8008638:	bfa2      	ittt	ge
 800863a:	6821      	ldrge	r1, [r4, #0]
 800863c:	f021 0104 	bicge.w	r1, r1, #4
 8008640:	6021      	strge	r1, [r4, #0]
 8008642:	b90e      	cbnz	r6, 8008648 <_printf_i+0x118>
 8008644:	2d00      	cmp	r5, #0
 8008646:	d04d      	beq.n	80086e4 <_printf_i+0x1b4>
 8008648:	4615      	mov	r5, r2
 800864a:	fbb6 f1f3 	udiv	r1, r6, r3
 800864e:	fb03 6711 	mls	r7, r3, r1, r6
 8008652:	5dc7      	ldrb	r7, [r0, r7]
 8008654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008658:	4637      	mov	r7, r6
 800865a:	42bb      	cmp	r3, r7
 800865c:	460e      	mov	r6, r1
 800865e:	d9f4      	bls.n	800864a <_printf_i+0x11a>
 8008660:	2b08      	cmp	r3, #8
 8008662:	d10b      	bne.n	800867c <_printf_i+0x14c>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	07de      	lsls	r6, r3, #31
 8008668:	d508      	bpl.n	800867c <_printf_i+0x14c>
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	6861      	ldr	r1, [r4, #4]
 800866e:	4299      	cmp	r1, r3
 8008670:	bfde      	ittt	le
 8008672:	2330      	movle	r3, #48	; 0x30
 8008674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008678:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800867c:	1b52      	subs	r2, r2, r5
 800867e:	6122      	str	r2, [r4, #16]
 8008680:	f8cd a000 	str.w	sl, [sp]
 8008684:	464b      	mov	r3, r9
 8008686:	aa03      	add	r2, sp, #12
 8008688:	4621      	mov	r1, r4
 800868a:	4640      	mov	r0, r8
 800868c:	f7ff fee2 	bl	8008454 <_printf_common>
 8008690:	3001      	adds	r0, #1
 8008692:	d14c      	bne.n	800872e <_printf_i+0x1fe>
 8008694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008698:	b004      	add	sp, #16
 800869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869e:	4835      	ldr	r0, [pc, #212]	; (8008774 <_printf_i+0x244>)
 80086a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086a4:	6829      	ldr	r1, [r5, #0]
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80086ac:	6029      	str	r1, [r5, #0]
 80086ae:	061d      	lsls	r5, r3, #24
 80086b0:	d514      	bpl.n	80086dc <_printf_i+0x1ac>
 80086b2:	07df      	lsls	r7, r3, #31
 80086b4:	bf44      	itt	mi
 80086b6:	f043 0320 	orrmi.w	r3, r3, #32
 80086ba:	6023      	strmi	r3, [r4, #0]
 80086bc:	b91e      	cbnz	r6, 80086c6 <_printf_i+0x196>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	f023 0320 	bic.w	r3, r3, #32
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	2310      	movs	r3, #16
 80086c8:	e7b0      	b.n	800862c <_printf_i+0xfc>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	f043 0320 	orr.w	r3, r3, #32
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	2378      	movs	r3, #120	; 0x78
 80086d4:	4828      	ldr	r0, [pc, #160]	; (8008778 <_printf_i+0x248>)
 80086d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086da:	e7e3      	b.n	80086a4 <_printf_i+0x174>
 80086dc:	0659      	lsls	r1, r3, #25
 80086de:	bf48      	it	mi
 80086e0:	b2b6      	uxthmi	r6, r6
 80086e2:	e7e6      	b.n	80086b2 <_printf_i+0x182>
 80086e4:	4615      	mov	r5, r2
 80086e6:	e7bb      	b.n	8008660 <_printf_i+0x130>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	6826      	ldr	r6, [r4, #0]
 80086ec:	6961      	ldr	r1, [r4, #20]
 80086ee:	1d18      	adds	r0, r3, #4
 80086f0:	6028      	str	r0, [r5, #0]
 80086f2:	0635      	lsls	r5, r6, #24
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	d501      	bpl.n	80086fc <_printf_i+0x1cc>
 80086f8:	6019      	str	r1, [r3, #0]
 80086fa:	e002      	b.n	8008702 <_printf_i+0x1d2>
 80086fc:	0670      	lsls	r0, r6, #25
 80086fe:	d5fb      	bpl.n	80086f8 <_printf_i+0x1c8>
 8008700:	8019      	strh	r1, [r3, #0]
 8008702:	2300      	movs	r3, #0
 8008704:	6123      	str	r3, [r4, #16]
 8008706:	4615      	mov	r5, r2
 8008708:	e7ba      	b.n	8008680 <_printf_i+0x150>
 800870a:	682b      	ldr	r3, [r5, #0]
 800870c:	1d1a      	adds	r2, r3, #4
 800870e:	602a      	str	r2, [r5, #0]
 8008710:	681d      	ldr	r5, [r3, #0]
 8008712:	6862      	ldr	r2, [r4, #4]
 8008714:	2100      	movs	r1, #0
 8008716:	4628      	mov	r0, r5
 8008718:	f7f7 fd62 	bl	80001e0 <memchr>
 800871c:	b108      	cbz	r0, 8008722 <_printf_i+0x1f2>
 800871e:	1b40      	subs	r0, r0, r5
 8008720:	6060      	str	r0, [r4, #4]
 8008722:	6863      	ldr	r3, [r4, #4]
 8008724:	6123      	str	r3, [r4, #16]
 8008726:	2300      	movs	r3, #0
 8008728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800872c:	e7a8      	b.n	8008680 <_printf_i+0x150>
 800872e:	6923      	ldr	r3, [r4, #16]
 8008730:	462a      	mov	r2, r5
 8008732:	4649      	mov	r1, r9
 8008734:	4640      	mov	r0, r8
 8008736:	47d0      	blx	sl
 8008738:	3001      	adds	r0, #1
 800873a:	d0ab      	beq.n	8008694 <_printf_i+0x164>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	079b      	lsls	r3, r3, #30
 8008740:	d413      	bmi.n	800876a <_printf_i+0x23a>
 8008742:	68e0      	ldr	r0, [r4, #12]
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	4298      	cmp	r0, r3
 8008748:	bfb8      	it	lt
 800874a:	4618      	movlt	r0, r3
 800874c:	e7a4      	b.n	8008698 <_printf_i+0x168>
 800874e:	2301      	movs	r3, #1
 8008750:	4632      	mov	r2, r6
 8008752:	4649      	mov	r1, r9
 8008754:	4640      	mov	r0, r8
 8008756:	47d0      	blx	sl
 8008758:	3001      	adds	r0, #1
 800875a:	d09b      	beq.n	8008694 <_printf_i+0x164>
 800875c:	3501      	adds	r5, #1
 800875e:	68e3      	ldr	r3, [r4, #12]
 8008760:	9903      	ldr	r1, [sp, #12]
 8008762:	1a5b      	subs	r3, r3, r1
 8008764:	42ab      	cmp	r3, r5
 8008766:	dcf2      	bgt.n	800874e <_printf_i+0x21e>
 8008768:	e7eb      	b.n	8008742 <_printf_i+0x212>
 800876a:	2500      	movs	r5, #0
 800876c:	f104 0619 	add.w	r6, r4, #25
 8008770:	e7f5      	b.n	800875e <_printf_i+0x22e>
 8008772:	bf00      	nop
 8008774:	080089bd 	.word	0x080089bd
 8008778:	080089ce 	.word	0x080089ce

0800877c <memmove>:
 800877c:	4288      	cmp	r0, r1
 800877e:	b510      	push	{r4, lr}
 8008780:	eb01 0402 	add.w	r4, r1, r2
 8008784:	d902      	bls.n	800878c <memmove+0x10>
 8008786:	4284      	cmp	r4, r0
 8008788:	4623      	mov	r3, r4
 800878a:	d807      	bhi.n	800879c <memmove+0x20>
 800878c:	1e43      	subs	r3, r0, #1
 800878e:	42a1      	cmp	r1, r4
 8008790:	d008      	beq.n	80087a4 <memmove+0x28>
 8008792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800879a:	e7f8      	b.n	800878e <memmove+0x12>
 800879c:	4402      	add	r2, r0
 800879e:	4601      	mov	r1, r0
 80087a0:	428a      	cmp	r2, r1
 80087a2:	d100      	bne.n	80087a6 <memmove+0x2a>
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087ae:	e7f7      	b.n	80087a0 <memmove+0x24>

080087b0 <_realloc_r>:
 80087b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b4:	4680      	mov	r8, r0
 80087b6:	4614      	mov	r4, r2
 80087b8:	460e      	mov	r6, r1
 80087ba:	b921      	cbnz	r1, 80087c6 <_realloc_r+0x16>
 80087bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087c0:	4611      	mov	r1, r2
 80087c2:	f7ff bb85 	b.w	8007ed0 <_malloc_r>
 80087c6:	b92a      	cbnz	r2, 80087d4 <_realloc_r+0x24>
 80087c8:	f7ff fc9c 	bl	8008104 <_free_r>
 80087cc:	4625      	mov	r5, r4
 80087ce:	4628      	mov	r0, r5
 80087d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d4:	f000 f81b 	bl	800880e <_malloc_usable_size_r>
 80087d8:	4284      	cmp	r4, r0
 80087da:	4607      	mov	r7, r0
 80087dc:	d802      	bhi.n	80087e4 <_realloc_r+0x34>
 80087de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087e2:	d812      	bhi.n	800880a <_realloc_r+0x5a>
 80087e4:	4621      	mov	r1, r4
 80087e6:	4640      	mov	r0, r8
 80087e8:	f7ff fb72 	bl	8007ed0 <_malloc_r>
 80087ec:	4605      	mov	r5, r0
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d0ed      	beq.n	80087ce <_realloc_r+0x1e>
 80087f2:	42bc      	cmp	r4, r7
 80087f4:	4622      	mov	r2, r4
 80087f6:	4631      	mov	r1, r6
 80087f8:	bf28      	it	cs
 80087fa:	463a      	movcs	r2, r7
 80087fc:	f7ff fb32 	bl	8007e64 <memcpy>
 8008800:	4631      	mov	r1, r6
 8008802:	4640      	mov	r0, r8
 8008804:	f7ff fc7e 	bl	8008104 <_free_r>
 8008808:	e7e1      	b.n	80087ce <_realloc_r+0x1e>
 800880a:	4635      	mov	r5, r6
 800880c:	e7df      	b.n	80087ce <_realloc_r+0x1e>

0800880e <_malloc_usable_size_r>:
 800880e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008812:	1f18      	subs	r0, r3, #4
 8008814:	2b00      	cmp	r3, #0
 8008816:	bfbc      	itt	lt
 8008818:	580b      	ldrlt	r3, [r1, r0]
 800881a:	18c0      	addlt	r0, r0, r3
 800881c:	4770      	bx	lr
	...

08008820 <_init>:
 8008820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008822:	bf00      	nop
 8008824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008826:	bc08      	pop	{r3}
 8008828:	469e      	mov	lr, r3
 800882a:	4770      	bx	lr

0800882c <_fini>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	bf00      	nop
 8008830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008832:	bc08      	pop	{r3}
 8008834:	469e      	mov	lr, r3
 8008836:	4770      	bx	lr
